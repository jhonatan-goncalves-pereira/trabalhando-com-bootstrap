%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 25.0
%%For: Tom
%%CreationDate: 4/25/2021
%%BoundingBox: 0 0 441 343
%%HiResBoundingBox: 0 0 440.2958 342.4354
%%CropBox: 0 0 440.2958 342.4354
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 25.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 25.0.0 x60 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164519, 2020/08/25-17:54:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2021-04-25T00:06:58+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2021-04-25T00:06:58+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2021-04-25T00:06:58+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator 25.0 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>200</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAyAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYqkGseYzE7W9nQuuzzdQD4Ll+PFe5YkscmuJ5m5TSNI3ixJzIAAYpv5Z1CSO8Fqz&#xA;Ewyg8VPQMBXb55VmjtaYlleYrN2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2Kpdr9+bSwYoaSyngh8K9T92WYo2UEsKzMYOxVVtJvQuoZv8Afbqx+QO+CQsK&#xA;9BzAbFplQGlat4Dc/hh4Sttc5D0jP+yIH6q4aCHVm/kX/gj/AM047K71HH2oz8wQcaCtrIjGgO/8&#xA;p2P3HAQUrsCuxV2KuxV2KpRe+ZbO2naFVaVk2crQAHwqctjhJCCUZp+qWl8hMLEOv2o22YZGUDHm&#xA;oKLyCXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWL+bpSbmCLsqFv8AgjT/AI1zJwDZjJIcvYux&#xA;V2Ksz0q9iuNPikll+JRwdOm67b03NeuYsokHYMrVzfxIKRpt9wx8InmvEpnUZeyr+P8AXD4QRxNj&#xA;UZO6A/Kox8ILxKqahE2zAr+IyJxFPEiP3Uq12Ydjle4ZLf3kfSrp4ftD+uHYoXqwYAqag5EhLeKu&#xA;xVB6vefVNPlmBo9OMf8ArNsPu65OEbKCwUkk1PXM1grWl1La3CTxGjIa07EdwfnglGxSs9t5454E&#xA;mjNUkUMPpzBIoti/ArsVdirsVdirsVdirsVdiriQBUmg8cVWesp+wC/uBt952yXCi3cpj0UD5n+g&#xA;x2V377/J/HBsrqzfyr/wR/pjsrFvNXP6/EWFP3QAoa9GbMnDyYlJcuQ7FXYqr2l5LbPyTdT9pD0O&#xA;AhU3h1e0koGJjbwbp94yNIR8KiUBkIZT0I3rkSaUlc8JUVxEkWp4Ur45HjbkhocBAKbTC2u1l+Fv&#xA;hfw7H5ZROFMwVRlKEyKNv218fce+RG+yqgIIBBqD0ORS7FWO+brj4YLcHqTIw+Ww/jmRgHVjJjeZ&#xA;DF2Kss8q3BeweIneFzT/AFW3/XXMXMN2UU6ylk7FXYq7FXYq7FXYq4kAVOwHfFVP1Hf+7G387dPo&#xA;HfJVXNCnI9vGaytzcdjv+HQZIAnkqi+on9hPpb+zJDF3o4lM39we4HyGT8MI4i0L65/m/AY+GF4i&#xA;2L+49j9GDwgvEknmN3laGVqbVXb7xlkIgItJssV2KuxV2KuxVOtDvI4xwY9KgqOtCa1A75XMMSm7&#xA;XMUingfoIIP3GhyEQgBRybJ2KtgkEEbEdDiqZ2lx6qUP216+/vmNOFNgK8fu34/sP9n2Ph9ODmFV&#xA;MilhfmG49bVZaGqxUjH+x6/jXMzEKiwKW5Yh2Ksg8ovSe5T+ZVb/AIEkfxyjPyDKLJsxmTsVdirs&#xA;VdirsVad1QVP0AdScIFqoTSxRL6lywUDdUrt/bkwL2CEovPMcG6oxI8E/wCajTLo4qYkpXLrkp/u&#xA;4wvuxJ/VTLOFCHfVL5v92UHgAB/DDStJqd6hr6nL2YA40qZWWqxzERyj05D0/lOAhCPyKoTVYvUs&#xA;38U+MfR1/DCFY/k0uxVGadpsl5LxrwjoSXpXp2pkZTpBKOfyzMPsTqfmCP1VyHiI4lFvLl+Ohjb5&#xA;E/xAw+IF4lh0DUgfsKfcMMPiBNqlrpOq28yyLGNvtDku47jriZhbTsW8nsMhxBFti2fuRjxrbnt+&#xA;KFuVadsRJbWRSNHIHXt1HiMMhYZAprVJoqg/CwqD4Zi8izUp7tYLWWaTrCDyHie334eGytsCd2d2&#xA;djVmJJPuczmDWKuxVOvKjhdRdSftRGnzBBynPyTFlmYrN2KuxV2KuxVB3ur2FnUSyAuP91r8Tfd2&#xA;+nJxgSglj935nupHJt0EQ6KzfEwHt2zIjiFbsbSme4nncvNI0jHuxrlgFIU8KpzpFmksIPpo5NSz&#xA;OK03plUy1yJtGvp6LIqCCI8uh4im2R4kWW5dPSMA+hEwJpsg6nHiUktvpqKnP0YSRuQFGPEtlSiv&#xA;Ea5e3I4soUp7gqCcmOTMckQQCCDuDsRiljFxCYZ3iP7JoPl2yxKniqf+Xvsf8F+sZRk5sSnqlAN1&#xA;qfGuVlAIaJFa028MKtlkpstD41wUVsOUqOq1+mmJUU0xBOwoPDFS2Wjp9j8caKbClL/dt8slHmgI&#xA;PLWSLsJ+Lemx+Fvs/PKskerKJSjzPqKPILSE1Cf35HQkdF+jJYY7WsikGXodirsVVLe4mt5lmhbj&#xA;IhqDgIsUrM9H1aPUISacJkoJE7b9x7ZiZIcJZgo/K0uxVAahrVjZVV25y/76Tc/T4ZOOMlBLHL/z&#xA;Df3VVRvQiP7KHc/NuuZEcQDElK8tQ7FXYq7FU70a9iggAdhQ15CoB6175VMWWs80c+qwGRCrDivW&#xA;pFTXI8LG3TarAygIw6gkkjsa+OIiVJbk1a3MZCsAxFNyKD8cHCU2x67n/wBNMsTfZ48WHiqgfwy6&#xA;I2Zx5J7a3C3ECyL32YeB7jAUpfrdtstwo6fC/wDA4QlKckqf+Xvsf8F+sZRk5sSnql6bCo+VcrKA&#xA;S0SeVab+FMVXMXpuKD5Y7JJLSlh0FforiUC2mJruKH5UxClTu7mSGOoUVO24wiKJSIQRv5GUqUG+&#xA;21cmAx4lIzOOq0yVp4y07zMpG617rscHEvGUJ+jrcVJjPzJbDxFHEVp022IrwIHiCceMrxlBX1qk&#xA;BTgSQ1dj7U/rk4m2cZWhckzdiqa+WpSmqoo6Sqyn6By/41yrMPSmLMcxGbE9U8x3M7NFbH0oKkcx&#xA;9ph417ZlQxAc2BKSkkmp65ch2Krok9SVUrTkQK4CaCo+XRplAZD8J6cgR+OVjKxtQ/Rt14D78PiB&#xA;Nrl0u4PUqPpJx8ULaumjO37RP+quR8VFqv6Ban7f4Y+KVtL72zktZeDA0IqrEUrlkZWEgofJJdir&#xA;xPzH+enm/TPM97baT6MFjaTPB9XmjDmQxMUZnJIYVIOykbZVKW6aRif85M64/ppd6NayQHa5ETyI&#xA;zDxQkuF+kNg4kU9asruG9sra9gJMF1FHPCTsSkqh1NP9VsuBVkvl77H/AAX6xlGTmxKfKHps1B4V&#xA;plZpRawJM7MVI+E0rkDJkIril106j542nhaCXQ6LT5H+3HiRwuKXJ3K1+nHiXgQmo+p6Y9TrUUyy&#xA;Basg3UIefGCnOnqGlKUrt0r3+eEoHREX/qc4aiUfFtyKHfbpx75GLOfRGUm8Jvvi/rkNmzfz+xRv&#xA;PV+rSVEoFN+Rjp170NclHmxnddVNvV/R/SWnAbkpxp/xKmHqjfhY5q3+6v8AZfwzIgxxpfk2x2Ko&#xA;/Qf+Otbf6x/4ichk+kpDN8wmbDNU0K6s3Z0UyW1SVddyo/yszIZAWBCWZYh2Kqtr/vTF/rDIy5IL&#xA;NIF5RruB8I6/LMa2IFrjaxnqEPzH9mC08LhboOnEH2H9mG14W1Qn2+dcbQIt+kfEfj/TBxJ4Uh8z&#xA;7JB82/hl+JQkGWslC/nlt7G4uIozNLDE8kcI6uyqSFHzIpir508r+VIPM00urazc3KG8un+C1tpJ&#xA;mkZjykkZ1V0jXk/VvfNZqNSYGgB8S7DSaSOQXInn0F/2Jt+YX5eaJp1u0+ii5jnt0DzW7QzyQsgF&#xA;WZbgqY1YAElS/wB3ejS6qUjUq+z7nI1uhhAXC9vI183pn5NR65N+XdvLqULolvM8dg8gIZ7QhWVg&#xA;DvxV2YKfD2GbeBdOXp/l77H/AAX6xleTmxKer6dPirX2ys2gUqW1KPTpy2ystseStgZOxV2KpdrH&#xA;2V+j+OW4+Tj5eaBiKUirw+2eVa1pt19smWIV7swl4uJiI5b8a0pt19sjG2UqRPO28YPvOR382djy&#xA;UrpoDA/Ew17ca169sMbtjKq6LGMP1KlYuXEePKv9cO9o2rokGrf7q/2X8MvguNL8m2OxVE6bMIb+&#xA;3kbZVkXkfAE0ORmLBUM9zBbHYqgbrRdNuSS8IVz+2nwn8Ov05OOQhFJReeVCis9vPUKCeEg32/yh&#xA;/TLo5r5oMUpSzuYLmP1EIHIfENx94y2R2YFmNp/dj/VHj4e2Yslir/f/AMNkWa0faPwkf5XxYWPV&#xA;yVP7XL78BSGi0w/3WSPZsFppJdesrq6WP0kNULEg7daeOXY5gMaSdND1NjQQ/TyU/qJy3xYrSvce&#xA;X7m3tGuJXAK78AK/j/ZgGUE0mmHDR7a3mQRxhOEjSxJGOC1cFTVV2OxznNViljmQd3q9JlhkgJR2&#xA;r7193o0gcR3kTpM8DQlJOQBSQitVNOvHKowkCBW7bKcJAyBsbs50u0WDTILdjzASjE9+W5/XnSYM&#xA;XhwEe55XU5vEyGXehobkabK0TV2NUbqCp8cslAndxiEWvmGE9afc39uQ4Cik606USweoOj7j6RlE&#xA;ubbHkisDJ2KuxVC3to1wAAaZZCVNWSBJ2Q66Ovdv8/uw+Ix8ItnSE7HHxF8IrG0g9j+P9mHxAjwi&#xA;pvpciqWJooFSdug+nCJhj4ckuN1p463IPyVjlnCUcJSu+uRPJRP7tKhSepr3ycRTbGNIbJMnYq7F&#xA;WZeXtRN5Z8JN5oKK58Qfsn8MxMsKLMFNMqS7FVO5NIH+WShzQUnf7B+WZMuTWUTNdNa2BmUBmULQ&#xA;GtN9u2Qxw4pANOTIYRJCWx+bFrR41PuCw/XXMg6QdC4w1x6hGwa/YSGrOy+xFR/wpOVS00hybo6y&#xA;B57Iy3v7OQgLKgJIotdz9BOVSxSHRuhmgeRC/UdT07TbRrvULmK0tUoHnmdY0BY0A5MQNz0ylyFJ&#xA;Ne0V4XnjvoHgjSOV5UkVkCTEiNuQJFHKmhxV1hrui6jPcW9hf291PasUuYoZUd42BoQ6qSRuKYqs&#xA;8wMq6TOzEKoFSTsAMnj+pBeb3F7b3S/6HPHK0Z+JlIZa+BpmB2pljIgDmHd9jwIEieSnDf3z34l1&#xA;FkWKlDcPJUAigWrMRQdsxtDk/fAycvtHGBpyIbM9t2P1eIhSy8BR13UinUHwzf8AGHlLQ2p2xuI1&#xA;KKfVTpUUqD1GEZAm0rOnXY/Y/Ef1yXiBbZRpVzFBZRxSVDhQCACe3tmLMWWQkFuuSSXui6hZ2nNL&#xA;m5tpoYJCCoV5IyqsWG4oT2wcJTxhhtzrf5iWGsXJjge+0a0iguUht4TLLIiSrFPCrCJP3hjkMipy&#xA;ZiU60NMBCQbRXl/W/P585W2marbS/o8WYN7cGGkJuDEknKKRIwoUPzT4pCT/ACjuEpJpN95g0q5v&#xA;rO1W+bT5L9DeeZpLO8e5EUy3EvD6rOjBnjkEcZkjThxYVXbFVXXtb8+2MJ1USTNHG+oLb1smQRxR&#xA;yRpbtIh48zLUlQ1K9BvU4qmHl3UPOF15o0+XUbu8bSWbUYLdxZNbRzqv1WSBriJk5RNvOqs3Gvp/&#xA;D9o8lXouKqdz/vNL/qN+rCOavPcz2t2KuxV2KuxVkvlKIrHPIRtIQqH/AFOv/Esx87KLIcx2TsVU&#xA;rr/ed/lkoc0FKcymtS1SYnT3SnYb/I5PDH1ONqh6Cxu20y/uY/UggaRK05AbVGZUskY7EuBHFKQs&#xA;BdNpOpQRtLLbuka/aYjpgjliTQKZYZgWQibLTdZEsMiwyenyVgx8Kg13yM8sKItlDBOwaT/zZot3&#xA;rGmw2lrObaRbu1nadCodEhmV3Kc1kXlxXaq0zUu6Ytcflg8EV3baVcywWYt7OGzg9c8ZGgmkllNx&#xA;8J5V9SoxVpdPTyXBPq0izaj5ivjcQWluDzijge6kuAFVFQhB6gZiasW2rTIylQViGtareaneelrE&#xA;16gaiBJArxc26MqD0EXi21QNwMwpSJFm+9t618Ejhh+rSerbalFG3gRMG8aGkbA/LfDKIPNGPNKB&#xA;uJoou/mikKfXL17oKqssMK8VqVBqWZUod/5GyGOEQ26jU5J7SOy+28xXukpCulE2YlbnIVZnLKCa&#xA;BlY+mT8J34d8sjkIJpoIFC3q/lLzTDrtvJGwEeoWp4XMI6HegkT/ACWp9B28Cc3Dl44205IcJpP+&#xA;LeB+7LbYU4Kx6AnDaKcQR1FMVprTek//ABkOVybYckZkWbsVQuqG2FhKbmFbiGg5QyAMrHkKVBBH&#xA;XJ44cUgGvLk4ImSXp5mjP24CPkwP6wMyjoz0LhjtAdQrL5jsT1WRfoH9cgdJLyZjXQ83S65p7wyK&#xA;GYFlIFVPUjANLNl+dxsR9CTwzK8MsPzcGxbv3Iw+EWJ1se4rZY+FN61xljplh1Ima5LMrcpsAkgA&#xA;VJ2AxVnNpaC0sIIh9qKhc+5+1+s5hmVks0ZlaXYqpXQrbv8ALJQ5oPJKcymtDal/vHJluL6nH1X0&#xA;FCaHazS2EpigldixCyJP6YrQU+Go6Y55AS3I+TRp4ExNA/OkRJaPb6fy1K2mmCf3rfWKg77HjXIC&#xA;dy9JA+DMw4Y+sE/FGWdoHWF47WdIW4lSbk0C9vhDeHbK5z57i/c2whdUDX9ZOJXdFqsbSH+VSo/4&#xA;kRmMA5ZNdEvvNdSyZRdW0qBlZgQUbZBVtg3hlgxWCbGzSc1EAg7+549r1/ret6vc6lJbzBQAtrbA&#xA;FjGgNIwyitGFSx/ys1uUmRr8U5UNt+770hsJ7yC84RyyQfvFDhWZD2rWmRmSAUQFkKh1J5CTcQQz&#xA;13qycGr48oyjH/ZE5IFgSvuW0xp5AY5o2DEFg6uNjTZSqn/hsjjrhDPJ9RW3J01XhYpNMGVeJ5LE&#xA;PhQr04ydx44wrf3rP9CaaRrWp2V/BqOkWg5R0FxHEjSM6igZHZubAOKdKb+4yWOVGky3FvbdO1CP&#xA;ULGG8gakUy8grji6noVYdmU7EeOZwILVurpzp9odckaYi2pefHdgR4DGKyulHTuk/wDxkOCSYckZ&#xA;kWbsVQOt/wDHLm/2P/Exl+m+sONq/wC7P46pLY2ySQcmsnnNT+8Vyo+7MzLMg/UA6/DjBj9JK2C3&#xA;VryVDaO4WtIQ1Cu/c5KUvSDxIhAGZHCT5OurdUuIVFm8QY7xliS+/QHtghKwfVa5IVIekj9Kpe2y&#xA;Jbsy2MkJFP3jOSBv4YMcyT9QLLLjAj9BHxXQWiNAjHT5JCVB5hyAfemRlM39QZQxgxHoJ+KR3f7H&#xA;zzInyaNP9YUcxnco7SLcyXQkP2Yvi+ntgkrNZd4X91P6swY82ZX4EuxVZOKwyD/JP6sMeaCk+ZbW&#xA;smiWWJo26MKZKJo2xnASFFJBoV+teMqAezMP4ZkeNFwPyk+8KU2lamo3UyL7NX8DhGSLCWnyBCOL&#xA;mL4XDx+ANRkxRaSJDmt9WX+dvvOGgiyx3zVNqNwEs7eGaWLZ55FRmBofhQEeHU/Rms1+b+AfF2Gj&#xA;xfxn4Md9ELAFlJjABll2q1KhFFCRvUn781OOPFI+TsjtEL4NYaInlJLMlCFjm4SqtV4/CrhgMyDh&#xA;vqxBppr7SZP7y0ZT3aJihP8AwRdfuXD4IQ1JdaM8jOYLmrEsaSp3Nf8AfeCOnAFWmRs2uOo6YqIs&#xA;VqxeMkpLMRIRXsF+FCNz9pTiMABUy2pt76SaLm8zyW4YJJbtRVXkCQYwPhH2ewFMqzYjV2mEq9zM&#xA;Pyy1m407UJNMnjeTTbtg0U4UlEmI+EluwkWg+dPfJ6fISicaepq8QG675mEFpBDTtGR8K0PjiAVJ&#xA;DFtXuLiK7IjldAakhWI/aPhl+MAhMUAbq5JqZnr/AKxyzhCURYxX97N6UMrcgOXxMwFPxyMiIjdI&#xA;RraPrifC5aSPuockfccceWANtOohKUCAq28SQx8biG5D1/3XsuWynZ2MXBhj4R6hP4OtbbldO3o3&#xA;Hpt9gghW69yaVxnkAjzja48JMjtKnalbLbzQsyy+kftMzAnY7geGOCfEDytGoxiEhzpSuZ7F4SsX&#xA;rl9qeowK/dk4RkDvTDJOBG3FfmuiuNPWFVf6xzAowVwFr7YyhO9uFMZ4634vmlN3+x88snyYaf6w&#xA;ogEmg65jO5ZHp9r9Xt1Q/bb4n+Z7ZAlCfy/3JX+ai/ftmJHm2FUyKXYq4ioocVSVlKsVPUGhzMDU&#xA;1irYBJoMVVRASK7/ADyPEi1JlpsdxkgUpP5i1Cz0nTJLswJJOfgt4uIJeQgkDbsAKn2GQy5uCNkr&#xA;HEJHk8cLmaZ7i6ckO5aaWnVmqx9gW7ZqJzJ95boR+SPmOp3Gk3F5NI/1IlY4Y2ZiKhx9kE9F40rm&#xA;TgxERvoiUrKSgE7DL0OxV2KuxVMtL9UW9w0TRKwaP4pgnHo/QyAqp9zTKsvJV+pDUDFBLeNIz/Ek&#xA;crMWBUUYFXqQftdQcwxYkWZ+kPUfK/niG/0iI3KO19CPTuiAoBYdHG/7Q36dajNnhPGGiUUyfzOv&#xA;7FuT4EtT9Qy/w0cKjaWM99M8sjCoP7yQgH4juUVTtt3OEkBbRU+g0jJik9Rh+xIBv7BhQjIia2h/&#xA;LyiLVgBUK6MAG6ih3B9xTHN9LOLI7fVNMuLuezt7yCa7taC5to5EaSOvTmgJZfpzFZr3vLRbiO2a&#xA;ZBPKWEcRI5EooZgB7KQcVVsVSHzazrbW/A0+M179sytLKiXG1OHjAYx6tx/P+AzM8VxPyPm2J5/5&#xA;gfow+KGP5I9613lcrypQeGCWQEM8WllGQJRWmiM3sfPpXavjTbKC57JrZOc6L2rU/Ib5VM0FCZt8&#xA;Uqr2X4j+oZjjkzX5FLsVdiqWX0fCcns+4/jmTjNhhJD5NiuQ0YE4lUUsi8RlVMaQ0hBbLAyDzr8w&#xA;tb09ry0ht9Qs2nt2ljuIhJFJcQseJ2iLFgTx60qCOormHrLrbdtxjfuYpJrt5KArTTBFFEKSsDTx&#xA;bqGP0DNfGJjyLZLIJcw3cxSJp8sktzI7zosgt3rXiGULI3xMBUbLXentSuTgMrosJV0SbMpiidNm&#xA;tob+CW5T1IEcGRKVqB7HAqO8zX+l3t8kmnxenGEo54hAzV60GKpRhVHWFsZrS5O5ERSRuI5MFAcE&#xA;0qOld8oz3WyY11V7PUPq0csFqREJKP8AHRg7J2ZWHD5bdcwjE2CW6MhRATLRvM+jWYnutTv7O1Lq&#xA;qiMTAyvQn4mi5uVp2AUZs9JEQBJoNMuKXmyTSvMGiaqOWnXsN3xHJkjcFgK0+JftD6RmaJA8mBBD&#xA;OdFkQ27xg1dJGLe4Y1DfSMqnzaymBIAqdgOpyCEh02UNraMn2ZJJXX3U7A/8LlmQelsilWveTtQt&#xA;Uvdb02SaXzLJcU0r0mrDHHJdLN6ci0jHpvx/elyaDp2GYrYhbv8AKzUHkuEhuqKoZ7S9N3dJcmf6&#xA;hHbxySFa0IniMh+I1B3GwGKqdt+XfnJ9anuNS1gPp9xOXukhu7tHuIzOZBVQEWH04j6QWI0YdaYr&#xA;bIv0RqcXlrStPuJfrd7ZxLHcT8mfmyqF5F3AZq+J3y/Fsd2EpBL30q/QEtCaDvl/EGNoVkZTRgVP&#xA;gRTJJaxV2Kpz5fv7v6+kbOXiKtz5b0AFa1+eVZY7JDKolIBZvtOakeHgMxSWQX4EuxV2KqV1B60d&#xA;B9obqcnCVFBCVEEEgihHUZktbWKt4q8P/PT8wtSg1A+VtLma2iSNW1KVCVdzKOSxBhuF4EFqda0+&#xA;ePmn0Dfjh1eKUGUNyLttW1O1/uLmRB041qv3GoyJiCggMw8s+Z9W1e8v0v2WRjb+qZAoUlvWjHbb&#xA;9roBkoRo21ziAnWWtbsVdirsVS3zJqd/p2jiexme3n+tRASRmjD93Kdj26ZCYZwG7Arq8vLt2e6m&#xA;eVmYseRJ3OQptpRoBhSr2N9eWF3FeWcrQXMLco5UNCD/AE8RhBrkgi3015L8zzat5esNVIMU00ZD&#xA;lNqOjFHFDWq8lNAczoniFuLKNGk9n1a4mThJK0iHqlBGD/rcak4RFjSroMqnVo2lYAkELXYVpQAZ&#xA;HKPSyiyO81zTrRijyc5B1RByI+fb8cojjJZWhovNGnyPx4yIaE1YCmwr2JyRwlHEjWcsanAA1E21&#xA;hQ7FUDqlnBLbO7KOSitR1/28lE7pBYowoxHWhpmQzbjjeR1RFLOxoqjck4kqy3RNIFqhZ6GVvtkd&#xA;Kj9kfLv75i5J2yATfKWTsVdirsVdiqGurQSjmu0n68shOmJCXEEEgihHUZkMGsVfO35+eWdQtPNJ&#xA;17gz6fqSRr6wHwxzRIIzGx7VVQwr13p0OY2aO9uRiltTy7KW12KovTNUvNNufrFqwVypR1YBlZDu&#xA;VYHttjaCLTf/ABxqf/LPbf8AAyf9VMPEx8MNf451PvbW33Sf9VMeJeANnzzqQ/49rb/gZP8Aqpjx&#xA;LwBw88ap3trb/gZP+qmPEvhhAat5h1HVESKcqkEZ5LDEOK8unI1JYn5nbtgJZCICWYpdiqIsNPvd&#xA;Qu47Oyhae5lPGOJBUn+gHc9sIBPJBNPo/wAo6I+h+W7HS5GDy26EysOnORjI4HsGYgZnwjQpxZGy&#xA;nGTQ7FXYq2rFWDKaEGoOKpzZeYOCCOdagbBhlUsbEhMU1vT3/wB2U+e368jwFFNSa7p6ftkntQV/&#xA;VXHgK0lV/rsk6+nEvBPE9cnGFJAS+2tp7mURQoXduw/WcmTTJlel6NFZjY87g7Szdl/yU/rmNPJb&#xA;IBNgAoAAoB0GUsnYq7FXYq7FXYq7FUJfW4ZfVUfEv2vcZbjl0YyCX5ewU7m1trq3e3uoUnt5Rxkh&#xA;lUOjDwZWqDil5z5h/IXydqJaXTml0mc9BEfUhrXqY33+hXAyqWEFmMpDzvW/yD84WJZtPmttTiqQ&#xA;oRxBLQdCyy0QfQ5yo4T0bBlDBdU8t+YNKP8AuS064tFqQHljZUJHWj04n6DlZiRzbBIFLcCXYqyH&#xA;8vfKsXmnzhYaHLM1vBdmQyyoAXCxRNIeNdt+FMCCaZ/5z/5x08waaGuvLs36WtQKm2eiXK9OnRH8&#xA;ex9jjaBN5fD5e16e8eyh026kvIjSW3WGQyJ/rLSq/TkgCeSSQGX6L+SPnnUeLTxQabEy8g11KORr&#xA;24R+owPswGWDDIsDlDMrX8g9I04xyanfS6hyoSsSiCOo6qd3c/MMMtjgHVgcpZfpOg6No8Po6ZZx&#xA;WqEAMUX4mp05Oas30nL4xA5NZJKPySHYq7FXYq7FXYq7FXYqmFjo9zcsOQKIen8xyMpAKyewsYba&#xA;P07cU/35L3PsMxpyvmyARyqqgKooBlRLJvFXYq7FXYq7FXYq7FXEAgg9DscVSZl4sV8CR92ZgLUt&#xA;xVDTx3BY0qV7Af0whUMVYdQR88Kqtt9V5/6TyKeC9/nleTir0shXVLdX8lfltqgpdaBbMak+pEn1&#xA;eQk/zPCY2P0nMbwZtnGwLWPyE8oXCs2l3d5YSE1AkKTxAeHEhH/4fJDTyT4qO/Ln8qrTyhrZ1me8&#xA;Oo3caPHagR+isfOqs/25OTFNvAVPXbJfl/NBy29RGueKf5/eMh+Xl3seIKdzfWE6HnE3qdmFB/E5&#xA;KGKceSmQS6lcymttrZ5UKFTxb6MbVBT6Rcwiq/vV706j6MNpQRBBodiO2FXYq7FXYq7FXAEmg64q&#xA;jLfSrqahYemni3X7sFqnFjpEEXxAcmHWV+3yGQlJU5gtqLShVD1/mb5+A9sx5TZAIkAAUAoB0GVs&#xA;nYq7FXYq7FXYq7FXYq7FXYqlFx/fyf6x/XmXHkGsqeFDsVdirRRT1AP0YVa9KL+QfcMVa9GL+Qfd&#xA;irvRi/kH3Yq36UX8g+7FWxHGOij7sVbAA6YFdirsVU5baCX+8jVvcjf78KoSTRbRt1LJ7A1H44bV&#xA;QbQj+xN9BX+3HiS0NCkrvKAPYE48Sq0eiW67u7P7DYY2hGwWkEW0UYB8QKn7+uAlUZDas56V/V9J&#xA;/plcp0yAR8cCpQndh08B8hlBlbIBUyKXYq7FXYq7FXYq7FXYq7FXYq7FUonNZpD/AJR/XmXHk1lT&#xA;wodirsVdirsVdirsVdirsVdirsVdirsVdirsVbxVVitZZOg28e335GUwEgI2KyjQfF8R8O2UyyEs&#xA;wEQAAKDYZWl2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVJSamvjmY1NYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FW6VxVUS1uG6IR89v15EzATSIj05v22p7DIHL3J4UTHawJ0Wp8TvlRmSypVyKXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FUtuLORXJRSyHcU6jMiOQHmwIURDMeiN9xyfEEUqpY3Dfs8R4k5E5A&#xA;nhKsum/zv9AGQOVPCqrYW461b5n+lMicpXhXi1tx0QfTv+vI8ZTQXehD/vtfuGPEe9ad6EH++1+4&#xA;Y8R71pabS3PVB9FR+rDxlaCw2Fv4EfTh8Qrwhr9Hwf5X34+KUcK4WNsP2SfpOPiFPCFy2tuvRB9O&#xA;/wCvImZWgqKqqKKAB7bYCUt4FdirsVdirsVdirsVdirsVdirsVdir//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:d75baeff-eb2d-de4b-b410-c54757393bb0</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:d75baeff-eb2d-de4b-b410-c54757393bb0</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:bf9bb114-3d59-464e-a33b-0e5f5783e719</stRef:instanceID>
            <stRef:documentID>xmp.did:bf9bb114-3d59-464e-a33b-0e5f5783e719</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:16788c1a-7ba8-4d45-b79c-c8be488437e1</stEvt:instanceID>
                  <stEvt:when>2021-04-11T22:09:28+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:bf9bb114-3d59-464e-a33b-0e5f5783e719</stEvt:instanceID>
                  <stEvt:when>2021-04-24T23:55:17+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 25.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d75baeff-eb2d-de4b-b410-c54757393bb0</stEvt:instanceID>
                  <stEvt:when>2021-04-25T00:06:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 25.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>400.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>55</xmpG:red>
                           <xmpG:green>53</xmpG:green>
                           <xmpG:blue>53</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>55</xmpG:red>
                           <xmpG:green>53</xmpG:green>
                           <xmpG:blue>53</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=60</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>133</xmpG:red>
                           <xmpG:green>135</xmpG:green>
                           <xmpG:blue>137</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=20</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>210</xmpG:red>
                           <xmpG:green>212</xmpG:green>
                           <xmpG:blue>213</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -342.435 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 342.435 li
440.296 342.435 li
440.296 0 li
cp
clp
202.6 333.15 mo
318.223 348.683 466.014 237.747 417.471 162.079 cv
403.053 139.603 374.464 130.956 355.45 112.21 cv
338.136 95.1406 329.683 70.5986 312.169 53.7348 cv
295.132 37.3305 269.971 29.8124 246.728 34.1806 cv
221.609 38.9018 199.951 56.2739 174.573 59.3125 cv
165.896 60.3516 158.632 59.8833 151.451 59.4151 cv
136.482 58.4393 121.872 57.4633 95.5684 70.1361 cv
45.2358 94.3861 39.3207 127.64 39.5234 185.033 cv
39.8491 277.391 94.9931 235.438 83.4302 319.71 cv
82.6918 325.091 81.98 330.953 84.7573 335.621 cv
89.8828 344.235 102.506 343.069 112.267 340.787 cv
144.271 333.303 169.663 328.945 202.6 333.15 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
.898039 .917647 .996078 rgb
f
142.465 48.8681 mo
130.669 48.8681 117.463 50.892 97.6738 60.4262 cv
48.1675 84.2782 39.9116 116.143 40.1318 178.548 cv
40.2978 225.594 54.4341 238.823 66.9067 250.496 cv
73.417 256.59 79.5669 262.345 83.3506 272.157 cv
87.5664 283.091 88.2417 297.573 85.4751 317.733 cv
84.7861 322.755 83.9287 329.005 86.7661 333.773 cv
90.7671 340.498 100.105 342.199 114.519 338.828 cv
150.106 330.506 175.55 326.783 208.034 330.93 cv
215.626 331.949 223.338 332.436 231.095 332.436 cv
308.807 332.441 392.131 283.682 423.989 233.646 cv
436.653 213.756 447.868 183.995 429.375 155.169 cv
420.734 141.699 406.786 132.865 393.297 124.322 cv
383.611 118.188 373.595 111.845 365.402 103.768 cv
356.517 95.0072 349.788 84.2079 343.28 73.7641 cv
336.654 63.1313 329.803 52.1371 320.705 43.3759 cv
303.21 26.5307 277.516 18.8539 253.648 23.3393 cv
241.52 25.6186 229.962 30.8676 218.786 35.9443 cv
206.139 41.6889 193.061 47.6288 179.083 49.3027 cv
170.035 50.3866 162.399 49.8886 155.014 49.4067 cv
150.853 49.1357 146.751 48.8681 142.465 48.8681 cv
cp
101.828 341.723 mo
94.0195 341.723 88.624 339.274 85.7207 334.395 cv
82.6655 329.261 83.5552 322.777 84.27 317.568 cv
90.2475 274.007 79.0459 263.523 66.0752 251.385 cv
53.4233 239.544 39.083 226.123 38.9155 178.552 cv
38.8105 148.854 40.372 125.176 48.3325 106.142 cv
56.77 85.9672 71.8247 71.5297 97.146 59.3305 cv
124.414 46.1928 139.315 47.1645 155.093 48.1933 cv
162.422 48.6708 170.001 49.1655 178.938 48.0951 cv
192.729 46.4438 205.72 40.5434 218.283 34.8368 cv
229.526 29.7304 241.151 24.4501 253.423 22.1435 cv
277.669 17.5863 303.775 25.3862 321.548 42.4994 cv
330.755 51.3656 337.647 62.4252 344.312 73.1205 cv
350.783 83.5048 357.473 94.2421 366.256 102.901 cv
374.356 110.887 384.316 117.195 393.948 123.294 cv
407.548 131.908 421.613 140.815 430.4 154.512 cv
438.051 166.441 441.292 179.628 440.031 193.707 cv
438.854 206.842 433.801 220.5 425.015 234.3 cv
406.687 263.086 373.282 290.386 333.367 309.2 cv
299.329 325.244 263.865 333.656 231.245 333.657 cv
223.262 333.657 215.456 333.154 207.876 332.136 cv
175.589 328.015 150.245 331.723 114.795 340.013 cv
109.919 341.152 105.592 341.723 101.828 341.723 cv
cp
f
417.006 222.874 mo
416.382 222.796 li
409.966 221.998 406.43 214.905 409.683 209.318 cv
418.277 194.558 425.512 179.006 431.259 162.921 cv
436.233 149.004 431.736 147.34 427.582 140.167 cv
418.761 124.932 428.897 101.658 415.66 90.0512 cv
413.543 88.1962 410.937 86.812 409.372 84.4735 cv
404.971 77.9008 410.277 53.0087 396.987 31.7621 cv
391.592 23.1381 378.421 14.0048 370.676 31.3232 cv
360.472 54.1391 360.978 91.1635 334.976 104.292 cv
301.03 121.431 265.751 77.6889 240.997 221.961 cv
235.468 254.183 221.13 285.986 297.407 296.078 cv
350.082 303.047 448.842 226.833 417.006 222.874 cv
.772549 .784314 .890196 rgb
f
211.49 227.632 mo
206.361 213.259 191.717 200.144 192.733 170.777 cv
193.13 159.324 196.008 146.988 190.387 137.001 cv
188.156 133.037 184.772 129.877 181.766 126.464 cv
166.523 109.152 156.568 76.0209 129.805 71.8954 cv
112.724 69.2626 54.6293 86.5551 4.39885 116.685 cv
-1.0972 119.981 -1.5264 127.777 3.58058 131.649 cv
20.4253 144.418 48.709 143.595 64.6982 159.259 cv
69.5078 163.971 73.0225 170.053 78.5781 173.856 cv
87.6353 180.055 99.7028 178.599 110.134 177.144 cv
119.178 175.882 126.993 174.62 130.547 178.348 cv
137.155 185.277 127.474 209.117 126.222 224.975 cv
125.205 237.843 130.05 252.912 142.237 257.163 cv
147.438 258.977 153.013 258.494 158.593 258.011 cv
164.04 257.539 169.491 257.068 174.603 258.732 cv
186.485 262.601 194.509 284.375 206.925 273.512 cv
216.968 264.724 215.427 238.665 211.49 227.632 cv
f
172.26 62.4731 mo
161.506 7.67912 200.698 -3.84725 210.354 1.00285 cv
220.829 6.26457 216.365 35.7309 230.28 46.373 cv
235.42 50.3046 242.123 51.3476 248.22 53.5146 cv
270.31 61.3637 284.536 86.8085 279.654 109.737 cv
275.682 128.391 261.068 143.809 258.895 162.756 cv
257.75 172.734 258.564 174.978 273.653 257.397 cv
275.164 265.646 265.588 271.323 259.079 266.036 cv
254.281 262.139 250.084 258.513 248.631 256.275 cv
240.23 243.336 237.157 229.111 235.331 214.007 cv
228.771 159.767 183.463 119.559 172.26 62.4731 cv
cp
f
305.666 146.13 mo
270.16 149.592 248.958 149.858 213.595 146.15 cv
211.984 145.981 210.756 144.623 210.756 143.004 cv
210.756 82.7553 li
210.756 80.8437 212.443 79.3715 214.338 79.6225 cv
247.658 84.037 270.585 84.0307 304.957 79.6064 cv
306.848 79.3632 308.527 80.8339 308.527 82.7406 cv
308.527 142.982 li
308.527 144.61 307.287 145.972 305.666 146.13 cv
cp
.854902 .901961 .917647 rgb
f
310.603 142.168 mo
275.096 145.631 253.894 145.896 218.531 142.188 cv
216.92 142.019 215.693 140.662 215.693 139.042 cv
215.693 78.7939 li
215.693 76.8822 217.38 75.4101 219.274 75.6611 cv
252.594 80.0756 275.522 80.0688 309.893 75.6449 cv
311.785 75.4018 313.463 76.8725 313.463 78.7792 cv
313.463 139.02 li
313.463 140.648 312.223 142.01 310.603 142.168 cv
cp
.92549 .976471 1 rgb
f
236.182 89.04 mo
225.673 89.04 li
224.991 89.04 224.437 88.4867 224.437 87.8036 cv
224.437 87.121 224.991 86.5673 225.673 86.5673 cv
236.182 86.5673 li
236.865 86.5673 237.418 87.121 237.418 87.8036 cv
237.418 88.4867 236.865 89.04 236.182 89.04 cv
cp
1 1 1 rgb
f
257.571 89.04 mo
247.062 89.04 li
246.379 89.04 245.826 88.4867 245.826 87.8036 cv
245.826 87.121 246.379 86.5673 247.062 86.5673 cv
257.571 86.5673 li
258.253 86.5673 258.807 87.121 258.807 87.8036 cv
258.807 88.4867 258.253 89.04 257.571 89.04 cv
cp
f
278.958 89.04 mo
268.451 89.04 li
267.767 89.04 267.214 88.4867 267.214 87.8036 cv
267.214 87.121 267.767 86.5673 268.451 86.5673 cv
278.958 86.5673 li
279.641 86.5673 280.195 87.121 280.195 87.8036 cv
280.195 88.4867 279.641 89.04 278.958 89.04 cv
cp
f
300.347 89.04 mo
289.838 89.04 li
289.156 89.04 288.602 88.4867 288.602 87.8036 cv
288.602 87.121 289.156 86.5673 289.838 86.5673 cv
300.347 86.5673 li
301.03 86.5673 301.583 87.121 301.583 87.8036 cv
301.583 88.4867 301.03 89.04 300.347 89.04 cv
cp
f
236.182 100.12 mo
225.673 100.12 li
224.991 100.12 224.437 99.5663 224.437 98.8832 cv
224.437 98.2006 224.991 97.6474 225.673 97.6474 cv
236.182 97.6474 li
236.865 97.6474 237.418 98.2006 237.418 98.8832 cv
237.418 99.5663 236.865 100.12 236.182 100.12 cv
cp
f
257.571 100.12 mo
247.062 100.12 li
246.379 100.12 245.826 99.5663 245.826 98.8832 cv
245.826 98.2006 246.379 97.6474 247.062 97.6474 cv
257.571 97.6474 li
258.253 97.6474 258.807 98.2006 258.807 98.8832 cv
258.807 99.5663 258.253 100.12 257.571 100.12 cv
cp
f
278.958 100.12 mo
268.451 100.12 li
267.767 100.12 267.214 99.5663 267.214 98.8832 cv
267.214 98.2006 267.767 97.6474 268.451 97.6474 cv
278.958 97.6474 li
279.641 97.6474 280.195 98.2006 280.195 98.8832 cv
280.195 99.5663 279.641 100.12 278.958 100.12 cv
cp
f
300.347 100.12 mo
289.838 100.12 li
289.156 100.12 288.602 99.5663 288.602 98.8832 cv
288.602 98.2006 289.156 97.6474 289.838 97.6474 cv
300.347 97.6474 li
301.03 97.6474 301.583 98.2006 301.583 98.8832 cv
301.583 99.5663 301.03 100.12 300.347 100.12 cv
cp
f
236.182 111.48 mo
225.673 111.48 li
224.991 111.48 224.437 110.926 224.437 110.244 cv
224.437 109.56 224.991 109.007 225.673 109.007 cv
236.182 109.007 li
236.865 109.007 237.418 109.56 237.418 110.244 cv
237.418 110.926 236.865 111.48 236.182 111.48 cv
cp
f
257.571 111.48 mo
247.062 111.48 li
246.379 111.48 245.826 110.926 245.826 110.244 cv
245.826 109.56 246.379 109.007 247.062 109.007 cv
257.571 109.007 li
258.253 109.007 258.807 109.56 258.807 110.244 cv
258.807 110.926 258.253 111.48 257.571 111.48 cv
cp
f
278.958 111.48 mo
268.451 111.48 li
267.767 111.48 267.214 110.926 267.214 110.244 cv
267.214 109.56 267.767 109.007 268.451 109.007 cv
278.958 109.007 li
279.641 109.007 280.195 109.56 280.195 110.244 cv
280.195 110.926 279.641 111.48 278.958 111.48 cv
cp
f
300.347 111.48 mo
289.838 111.48 li
289.156 111.48 288.602 110.926 288.602 110.244 cv
288.602 109.56 289.156 109.007 289.838 109.007 cv
300.347 109.007 li
301.03 109.007 301.583 109.56 301.583 110.244 cv
301.583 110.926 301.03 111.48 300.347 111.48 cv
cp
f
236.182 122.399 mo
225.673 122.399 li
224.991 122.399 224.437 121.845 224.437 121.163 cv
224.437 120.48 224.991 119.926 225.673 119.926 cv
236.182 119.926 li
236.865 119.926 237.418 120.48 237.418 121.163 cv
237.418 121.845 236.865 122.399 236.182 122.399 cv
cp
f
257.571 122.399 mo
247.062 122.399 li
246.379 122.399 245.826 121.845 245.826 121.163 cv
245.826 120.48 246.379 119.926 247.062 119.926 cv
257.571 119.926 li
258.253 119.926 258.807 120.48 258.807 121.163 cv
258.807 121.845 258.253 122.399 257.571 122.399 cv
cp
f
278.958 122.399 mo
268.451 122.399 li
267.767 122.399 267.214 121.845 267.214 121.163 cv
267.214 120.48 267.767 119.926 268.451 119.926 cv
278.958 119.926 li
279.641 119.926 280.195 120.48 280.195 121.163 cv
280.195 121.845 279.641 122.399 278.958 122.399 cv
cp
f
300.347 122.399 mo
289.838 122.399 li
289.156 122.399 288.602 121.845 288.602 121.163 cv
288.602 120.48 289.156 119.926 289.838 119.926 cv
300.347 119.926 li
301.03 119.926 301.583 120.48 301.583 121.163 cv
301.583 121.845 301.03 122.399 300.347 122.399 cv
cp
f
236.182 132.009 mo
225.673 132.009 li
224.991 132.009 224.437 131.455 224.437 130.772 cv
224.437 130.089 224.991 129.536 225.673 129.536 cv
236.182 129.536 li
236.865 129.536 237.418 130.089 237.418 130.772 cv
237.418 131.455 236.865 132.009 236.182 132.009 cv
cp
f
257.571 132.009 mo
247.062 132.009 li
246.379 132.009 245.826 131.455 245.826 130.772 cv
245.826 130.089 246.379 129.536 247.062 129.536 cv
257.571 129.536 li
258.253 129.536 258.807 130.089 258.807 130.772 cv
258.807 131.455 258.253 132.009 257.571 132.009 cv
cp
f
278.958 132.009 mo
268.451 132.009 li
267.767 132.009 267.214 131.455 267.214 130.772 cv
267.214 130.089 267.767 129.536 268.451 129.536 cv
278.958 129.536 li
279.641 129.536 280.195 130.089 280.195 130.772 cv
280.195 131.455 279.641 132.009 278.958 132.009 cv
cp
f
300.347 132.009 mo
289.838 132.009 li
289.156 132.009 288.602 131.455 288.602 130.772 cv
288.602 130.089 289.156 129.536 289.838 129.536 cv
300.347 129.536 li
301.03 129.536 301.583 130.089 301.583 130.772 cv
301.583 131.455 301.03 132.009 300.347 132.009 cv
cp
f
349.79 189.976 mo
308.234 187.837 279.193 186.712 239.49 189.868 cv
237.652 190.015 236.077 188.561 236.077 186.718 cv
236.077 116.986 li
236.077 115.121 237.682 113.655 239.539 113.84 cv
271.042 116.982 307.124 115.788 349.792 113.643 cv
351.599 113.553 353.118 114.992 353.118 116.801 cv
353.118 186.818 li
353.118 188.629 351.598 190.069 349.79 189.976 cv
cp
.929412 .94902 .94902 rgb
f
353.317 195.377 mo
311.759 193.238 282.719 192.113 243.016 195.269 cv
241.177 195.416 239.603 193.963 239.603 192.119 cv
239.603 122.388 li
239.603 120.522 241.208 119.057 243.065 119.242 cv
274.569 122.384 310.65 121.189 353.319 119.045 cv
355.125 118.954 356.644 120.393 356.644 122.202 cv
356.644 192.22 li
356.644 194.03 355.124 195.471 353.317 195.377 cv
cp
1 1 1 rgb
f
260.187 152.614 mo
261.573 152.614 li
261.573 159.799 li
261.573 162.65 260.171 163.527 258.323 163.527 cv
257.813 163.527 257.192 163.415 256.841 163.272 cv
257.048 162.141 li
257.335 162.252 257.749 162.348 258.211 162.348 cv
259.455 162.348 260.187 161.79 260.187 159.687 cv
260.187 152.614 li
cp
.266667 .258824 .266667 rgb
f
267.898 159.416 mo
266.369 159.385 264.632 159.655 264.632 161.153 cv
264.632 162.061 265.237 162.491 265.955 162.491 cv
266.957 162.491 267.595 161.854 267.818 161.201 cv
267.866 161.058 267.898 160.898 267.898 160.755 cv
267.898 159.416 li
cp
268.105 163.351 mo
267.994 162.379 li
267.946 162.379 li
267.515 162.985 266.687 163.527 265.587 163.527 cv
264.027 163.527 263.23 162.427 263.23 161.312 cv
263.23 159.448 264.886 158.429 267.866 158.445 cv
267.866 158.285 li
267.866 157.648 267.691 156.501 266.114 156.501 cv
265.396 156.501 264.648 156.724 264.106 157.075 cv
263.788 156.15 li
264.424 155.736 265.349 155.465 266.321 155.465 cv
268.678 155.465 269.251 157.075 269.251 158.62 cv
269.251 161.503 li
269.251 162.172 269.284 162.826 269.379 163.351 cv
268.105 163.351 li
cp
f
271.928 155.641 mo
273.442 159.974 li
273.697 160.675 273.904 161.312 274.063 161.95 cv
274.111 161.95 li
274.287 161.312 274.509 160.675 274.764 159.974 cv
276.262 155.641 li
277.727 155.641 li
274.701 163.351 li
273.362 163.351 li
270.431 155.641 li
271.928 155.641 li
cp
f
283.048 159.416 mo
281.519 159.385 279.783 159.655 279.783 161.153 cv
279.783 162.061 280.388 162.491 281.105 162.491 cv
282.109 162.491 282.746 161.854 282.968 161.201 cv
283.016 161.058 283.048 160.898 283.048 160.755 cv
283.048 159.416 li
cp
283.255 163.351 mo
283.144 162.379 li
283.096 162.379 li
282.665 162.985 281.837 163.527 280.739 163.527 cv
279.177 163.527 278.38 162.427 278.38 161.312 cv
278.38 159.448 280.038 158.429 283.016 158.445 cv
283.016 158.285 li
283.016 157.648 282.841 156.501 281.264 156.501 cv
280.547 156.501 279.798 156.724 279.256 157.075 cv
278.938 156.15 li
279.576 155.736 280.499 155.465 281.471 155.465 cv
283.829 155.465 284.403 157.075 284.403 158.62 cv
284.403 161.503 li
284.403 162.172 284.434 162.826 284.53 163.351 cv
283.255 163.351 li
cp
f
289.899 161.663 mo
290.52 162.045 291.428 162.364 292.384 162.364 cv
293.802 162.364 294.63 161.615 294.63 160.532 cv
294.63 159.528 294.057 158.955 292.607 158.397 cv
290.855 157.775 289.771 156.868 289.771 155.354 cv
289.771 153.681 291.158 152.438 293.245 152.438 cv
294.343 152.438 295.14 152.693 295.618 152.964 cv
295.236 154.096 li
294.885 153.904 294.168 153.586 293.197 153.586 cv
291.731 153.586 291.173 154.462 291.173 155.195 cv
291.173 156.198 291.827 156.692 293.308 157.266 cv
295.124 157.967 296.048 158.843 296.048 160.42 cv
296.048 162.077 294.822 163.511 292.289 163.511 cv
291.252 163.511 290.122 163.208 289.548 162.826 cv
289.899 161.663 li
cp
f
303.488 163.065 mo
303.122 163.256 302.309 163.511 301.274 163.511 cv
298.948 163.511 297.434 161.934 297.434 159.576 cv
297.434 157.202 299.059 155.481 301.577 155.481 cv
302.405 155.481 303.137 155.688 303.52 155.88 cv
303.201 156.963 li
302.867 156.772 302.341 156.597 301.577 156.597 cv
299.808 156.597 298.852 157.903 298.852 159.512 cv
298.852 161.296 299.999 162.395 301.529 162.395 cv
302.325 162.395 302.851 162.188 303.249 162.013 cv
303.488 163.065 li
cp
f
305.129 158.046 mo
305.129 157.138 305.113 156.358 305.065 155.641 cv
306.291 155.641 li
306.34 157.154 li
306.404 157.154 li
306.754 156.119 307.598 155.465 308.539 155.465 cv
308.698 155.465 308.809 155.481 308.937 155.513 cv
308.937 156.835 li
308.793 156.804 308.65 156.788 308.458 156.788 cv
307.471 156.788 306.77 157.537 306.579 158.588 cv
306.547 158.779 306.515 159.002 306.515 159.241 cv
306.515 163.351 li
305.129 163.351 li
305.129 158.046 li
cp
f
310.402 163.351 mo
310.402 155.641 li
311.804 155.641 li
311.804 163.351 li
310.402 163.351 li
cp
311.963 153.474 mo
311.979 153.952 311.628 154.334 311.072 154.334 cv
310.578 154.334 310.227 153.952 310.227 153.474 cv
310.227 152.98 310.593 152.598 311.103 152.598 cv
311.628 152.598 311.963 152.98 311.963 153.474 cv
cp
f
315.516 160.213 mo
315.516 160.42 315.548 160.611 315.58 160.787 cv
315.834 161.758 316.679 162.427 317.683 162.427 cv
319.165 162.427 320.025 161.217 320.025 159.448 cv
320.025 157.903 319.212 156.58 317.731 156.58 cv
316.775 156.58 315.882 157.266 315.612 158.317 cv
315.564 158.493 315.516 158.7 315.516 158.891 cv
315.516 160.213 li
cp
314.13 158.158 mo
314.13 157.17 314.098 156.373 314.066 155.641 cv
315.325 155.641 li
315.388 156.963 li
315.42 156.963 li
315.994 156.023 316.902 155.465 318.161 155.465 cv
320.025 155.465 321.426 157.042 321.426 159.385 cv
321.426 162.157 319.738 163.527 317.921 163.527 cv
316.902 163.527 316.01 163.08 315.548 162.316 cv
315.516 162.316 li
315.516 166.506 li
314.13 166.506 li
314.13 158.158 li
cp
f
324.883 153.426 mo
324.883 155.641 li
326.891 155.641 li
326.891 156.708 li
324.883 156.708 li
324.883 160.866 li
324.883 161.822 325.155 162.364 325.935 162.364 cv
326.301 162.364 326.572 162.316 326.748 162.268 cv
326.811 163.319 li
326.54 163.431 326.11 163.511 325.569 163.511 cv
324.915 163.511 324.389 163.304 324.055 162.921 cv
323.657 162.507 323.513 161.822 323.513 160.914 cv
323.513 156.708 li
322.319 156.708 li
322.319 155.641 li
323.513 155.641 li
323.513 153.793 li
324.883 153.426 li
cp
f
263.999 209.321 mo
236.968 212.424 219.736 212.762 194.781 209.377 cv
193.211 209.164 192.035 207.825 192.035 206.241 cv
192.035 162.889 li
192.035 161.038 193.622 159.584 195.466 159.739 cv
221.697 161.936 238.427 162.779 263.27 159.88 cv
265.15 159.661 266.805 161.125 266.805 163.018 cv
266.805 206.179 li
266.805 207.787 265.595 209.139 263.999 209.321 cv
cp
.854902 .901961 .917647 rgb
f
259.92 212.797 mo
232.89 215.899 215.658 216.236 190.703 212.851 cv
189.133 212.639 187.957 211.301 187.957 209.717 cv
187.957 166.364 li
187.957 164.514 189.544 163.059 191.388 163.214 cv
217.619 165.411 234.349 166.253 259.192 163.355 cv
261.072 163.136 262.728 164.6 262.728 166.493 cv
262.728 209.654 li
262.728 211.262 261.517 212.613 259.92 212.797 cv
cp
.92549 .976471 1 rgb
f
211.299 182.835 mo
195.561 182.835 li
194.202 182.835 193.101 181.733 193.101 180.375 cv
193.101 179.016 194.202 177.914 195.561 177.914 cv
211.299 177.914 li
212.658 177.914 213.759 179.016 213.759 180.375 cv
213.759 181.733 212.658 182.835 211.299 182.835 cv
cp
1 1 1 rgb
f
233.211 182.835 mo
217.473 182.835 li
216.114 182.835 215.013 181.733 215.013 180.375 cv
215.013 179.016 216.114 177.914 217.473 177.914 cv
233.211 177.914 li
234.57 177.914 235.671 179.016 235.671 180.375 cv
235.671 181.733 234.57 182.835 233.211 182.835 cv
cp
f
255.124 182.835 mo
239.386 182.835 li
238.027 182.835 236.925 181.733 236.925 180.375 cv
236.925 179.016 238.027 177.914 239.386 177.914 cv
255.124 177.914 li
256.483 177.914 257.584 179.016 257.584 180.375 cv
257.584 181.733 256.483 182.835 255.124 182.835 cv
cp
f
211.299 191.691 mo
195.561 191.691 li
194.202 191.691 193.101 190.59 193.101 189.231 cv
193.101 187.872 194.202 186.77 195.561 186.77 cv
211.299 186.77 li
212.658 186.77 213.759 187.872 213.759 189.231 cv
213.759 190.59 212.658 191.691 211.299 191.691 cv
cp
f
233.211 191.691 mo
217.473 191.691 li
216.114 191.691 215.013 190.59 215.013 189.231 cv
215.013 187.872 216.114 186.77 217.473 186.77 cv
233.211 186.77 li
234.57 186.77 235.671 187.872 235.671 189.231 cv
235.671 190.59 234.57 191.691 233.211 191.691 cv
cp
f
255.124 191.691 mo
239.386 191.691 li
238.027 191.691 236.925 190.59 236.925 189.231 cv
236.925 187.872 238.027 186.77 239.386 186.77 cv
255.124 186.77 li
256.483 186.77 257.584 187.872 257.584 189.231 cv
257.584 190.59 256.483 191.691 255.124 191.691 cv
cp
f
211.299 200.548 mo
195.561 200.548 li
194.202 200.548 193.101 199.446 193.101 198.088 cv
193.101 196.728 194.202 195.627 195.561 195.627 cv
211.299 195.627 li
212.658 195.627 213.759 196.728 213.759 198.088 cv
213.759 199.446 212.658 200.548 211.299 200.548 cv
cp
f
233.211 200.548 mo
217.473 200.548 li
216.114 200.548 215.013 199.446 215.013 198.088 cv
215.013 196.728 216.114 195.627 217.473 195.627 cv
233.211 195.627 li
234.57 195.627 235.671 196.728 235.671 198.088 cv
235.671 199.446 234.57 200.548 233.211 200.548 cv
cp
f
255.124 200.548 mo
239.386 200.548 li
238.027 200.548 236.925 199.446 236.925 198.088 cv
236.925 196.728 238.027 195.627 239.386 195.627 cv
255.124 195.627 li
256.483 195.627 257.584 196.728 257.584 198.088 cv
257.584 199.446 256.483 200.548 255.124 200.548 cv
cp
f
125.098 165.846 mo
97.0415 178.079 82.5205 163.054 55.8803 165.901 cv
54.3052 166.069 53.1343 164.35 53.1343 162.765 cv
53.1343 119.413 li
53.1343 117.563 54.8286 115.625 56.5654 116.263 cv
82.769 125.894 100.337 113.385 124.369 116.404 cv
126.248 116.64 127.905 117.649 127.905 119.542 cv
127.905 162.703 li
127.905 164.31 126.571 165.203 125.098 165.846 cv
cp
.854902 .901961 .917647 rgb
f
128.293 171.511 mo
100.237 183.744 85.7163 168.719 59.0761 171.565 cv
57.501 171.734 56.3305 170.014 56.3305 168.43 cv
56.3305 125.078 li
56.3305 123.227 58.0244 121.29 59.7612 121.928 cv
85.9653 131.559 103.533 119.05 127.565 122.069 cv
129.443 122.305 131.101 123.314 131.101 125.207 cv
131.101 168.368 li
131.101 169.976 129.767 170.868 128.293 171.511 cv
cp
.92549 .976471 1 rgb
f
95.2744 134.999 mo
63.0234 134.999 li
62.4009 134.999 61.896 134.495 61.896 133.872 cv
61.896 133.249 62.4009 132.745 63.0234 132.745 cv
95.2744 132.745 li
95.8969 132.745 96.4013 133.249 96.4013 133.872 cv
96.4013 134.495 95.8969 134.999 95.2744 134.999 cv
cp
1 1 1 rgb
f
124.408 134.999 mo
103.31 134.999 li
102.687 134.999 102.183 134.495 102.183 133.872 cv
102.183 133.249 102.687 132.745 103.31 132.745 cv
124.408 132.745 li
125.031 132.745 125.536 133.249 125.536 133.872 cv
125.536 134.495 125.031 134.999 124.408 134.999 cv
cp
f
92.1572 139.316 mo
124.408 139.316 li
125.031 139.316 125.536 138.812 125.536 138.189 cv
125.536 137.567 125.031 137.062 124.408 137.062 cv
92.1572 137.062 li
91.5346 137.062 91.0298 137.567 91.0298 138.189 cv
91.0298 138.812 91.5346 139.316 92.1572 139.316 cv
cp
f
63.0234 139.316 mo
84.122 139.316 li
84.7441 139.316 85.249 138.812 85.249 138.189 cv
85.249 137.567 84.7441 137.062 84.122 137.062 cv
63.0234 137.062 li
62.4009 137.062 61.896 137.567 61.896 138.189 cv
61.896 138.812 62.4009 139.316 63.0234 139.316 cv
cp
f
95.2744 143.634 mo
63.0234 143.634 li
62.4009 143.634 61.896 143.129 61.896 142.507 cv
61.896 141.884 62.4009 141.38 63.0234 141.38 cv
95.2744 141.38 li
95.8969 141.38 96.4013 141.884 96.4013 142.507 cv
96.4013 143.129 95.8969 143.634 95.2744 143.634 cv
cp
f
124.408 143.634 mo
103.31 143.634 li
102.687 143.634 102.183 143.129 102.183 142.507 cv
102.183 141.884 102.687 141.38 103.31 141.38 cv
124.408 141.38 li
125.031 141.38 125.536 141.884 125.536 142.507 cv
125.536 143.129 125.031 143.634 124.408 143.634 cv
cp
f
92.1572 147.951 mo
124.408 147.951 li
125.031 147.951 125.536 147.447 125.536 146.824 cv
125.536 146.202 125.031 145.697 124.408 145.697 cv
92.1572 145.697 li
91.5346 145.697 91.0298 146.202 91.0298 146.824 cv
91.0298 147.447 91.5346 147.951 92.1572 147.951 cv
cp
f
63.0234 147.951 mo
84.122 147.951 li
84.7441 147.951 85.249 147.447 85.249 146.824 cv
85.249 146.202 84.7441 145.697 84.122 145.697 cv
63.0234 145.697 li
62.4009 145.697 61.896 146.202 61.896 146.824 cv
61.896 147.447 62.4009 147.951 63.0234 147.951 cv
cp
f
95.2744 152.268 mo
63.0234 152.268 li
62.4009 152.268 61.896 151.764 61.896 151.142 cv
61.896 150.519 62.4009 150.014 63.0234 150.014 cv
95.2744 150.014 li
95.8969 150.014 96.4013 150.519 96.4013 151.142 cv
96.4013 151.764 95.8969 152.268 95.2744 152.268 cv
cp
f
124.408 152.268 mo
103.31 152.268 li
102.687 152.268 102.183 151.764 102.183 151.142 cv
102.183 150.519 102.687 150.014 103.31 150.014 cv
124.408 150.014 li
125.031 150.014 125.536 150.519 125.536 151.142 cv
125.536 151.764 125.031 152.268 124.408 152.268 cv
cp
f
92.1572 156.586 mo
124.408 156.586 li
125.031 156.586 125.536 156.081 125.536 155.459 cv
125.536 154.836 125.031 154.331 124.408 154.331 cv
92.1572 154.331 li
91.5346 154.331 91.0298 154.836 91.0298 155.459 cv
91.0298 156.081 91.5346 156.586 92.1572 156.586 cv
cp
f
63.0234 156.586 mo
84.122 156.586 li
84.7441 156.586 85.249 156.081 85.249 155.459 cv
85.249 154.836 84.7441 154.331 84.122 154.331 cv
63.0234 154.331 li
62.4009 154.331 61.896 154.836 61.896 155.459 cv
61.896 156.081 62.4009 156.586 63.0234 156.586 cv
cp
f
95.2744 160.903 mo
63.0234 160.903 li
62.4009 160.903 61.896 160.398 61.896 159.776 cv
61.896 159.154 62.4009 158.649 63.0234 158.649 cv
95.2744 158.649 li
95.8969 158.649 96.4013 159.154 96.4013 159.776 cv
96.4013 160.398 95.8969 160.903 95.2744 160.903 cv
cp
f
124.408 160.903 mo
103.31 160.903 li
102.687 160.903 102.183 160.398 102.183 159.776 cv
102.183 159.154 102.687 158.649 103.31 158.649 cv
124.408 158.649 li
125.031 158.649 125.536 159.154 125.536 159.776 cv
125.536 160.398 125.031 160.903 124.408 160.903 cv
cp
f
92.1572 165.221 mo
124.408 165.221 li
125.031 165.221 125.536 164.716 125.536 164.094 cv
125.536 163.471 125.031 162.967 124.408 162.967 cv
92.1572 162.967 li
91.5346 162.967 91.0298 163.471 91.0298 164.094 cv
91.0298 164.716 91.5346 165.221 92.1572 165.221 cv
cp
f
63.0234 165.221 mo
84.122 165.221 li
84.7441 165.221 85.249 164.716 85.249 164.094 cv
85.249 163.471 84.7441 162.967 84.122 162.967 cv
63.0234 162.967 li
62.4009 162.967 61.896 163.471 61.896 164.094 cv
61.896 164.716 62.4009 165.221 63.0234 165.221 cv
cp
f
372.131 147.097 mo
344.838 151.15 326.648 140.906 297.265 147.125 cv
295.745 147.447 294.597 145.555 294.597 144.001 cv
294.597 108.137 li
294.597 106.208 296.311 104.732 298.219 105.009 cv
326.511 109.123 339.192 100.02 371.143 105.112 cv
373.076 105.42 374.835 106.27 374.835 108.227 cv
374.835 143.967 li
374.835 145.536 373.682 146.866 372.131 147.097 cv
cp
.882353 .968627 1 rgb
f
375.658 143.699 mo
348.365 147.752 330.173 137.508 300.791 143.727 cv
299.271 144.049 298.124 142.158 298.124 140.603 cv
298.124 104.739 li
298.124 102.81 299.837 101.334 301.746 101.611 cv
330.038 105.725 342.718 96.622 374.669 101.714 cv
376.601 102.022 378.362 102.872 378.362 104.829 cv
378.362 140.569 li
378.362 142.138 377.208 143.468 375.658 143.699 cv
cp
.827451 .905882 .945098 rgb
f
308.779 113.021 mo
307.847 113.021 307.092 112.266 307.092 111.334 cv
307.092 110.403 307.847 109.648 308.779 109.648 cv
309.709 109.648 310.464 110.403 310.464 111.334 cv
310.464 112.266 309.709 113.021 308.779 113.021 cv
cp
1 1 1 rgb
f
322.504 113.021 mo
315.755 113.021 li
314.825 113.021 314.07 112.266 314.07 111.334 cv
314.07 110.403 314.825 109.648 315.755 109.648 cv
322.504 109.648 li
323.436 109.648 324.191 110.403 324.191 111.334 cv
324.191 112.266 323.436 113.021 322.504 113.021 cv
cp
f
367.707 113.021 mo
360.957 113.021 li
360.026 113.021 359.271 112.266 359.271 111.334 cv
359.271 110.403 360.026 109.648 360.957 109.648 cv
367.707 109.648 li
368.637 109.648 369.392 110.403 369.392 111.334 cv
369.392 112.266 368.637 113.021 367.707 113.021 cv
cp
f
353.574 113.021 mo
330.349 113.021 li
329.417 113.021 328.663 112.266 328.663 111.334 cv
328.663 110.403 329.417 109.648 330.349 109.648 cv
353.574 109.648 li
354.505 109.648 355.26 110.403 355.26 111.334 cv
355.26 112.266 354.505 113.021 353.574 113.021 cv
cp
f
308.779 118.553 mo
307.847 118.553 307.092 117.798 307.092 116.867 cv
307.092 115.935 307.847 115.18 308.779 115.18 cv
309.709 115.18 310.464 115.935 310.464 116.867 cv
310.464 117.798 309.709 118.553 308.779 118.553 cv
cp
f
322.504 118.553 mo
315.755 118.553 li
314.825 118.553 314.07 117.798 314.07 116.867 cv
314.07 115.935 314.825 115.18 315.755 115.18 cv
322.504 115.18 li
323.436 115.18 324.191 115.935 324.191 116.867 cv
324.191 117.798 323.436 118.553 322.504 118.553 cv
cp
f
367.707 118.553 mo
360.957 118.553 li
360.026 118.553 359.271 117.798 359.271 116.867 cv
359.271 115.935 360.026 115.18 360.957 115.18 cv
367.707 115.18 li
368.637 115.18 369.392 115.935 369.392 116.867 cv
369.392 117.798 368.637 118.553 367.707 118.553 cv
cp
f
353.574 118.553 mo
330.349 118.553 li
329.417 118.553 328.663 117.798 328.663 116.867 cv
328.663 115.935 329.417 115.18 330.349 115.18 cv
353.574 115.18 li
354.505 115.18 355.26 115.935 355.26 116.867 cv
355.26 117.798 354.505 118.553 353.574 118.553 cv
cp
f
308.779 124.085 mo
307.847 124.085 307.092 123.33 307.092 122.399 cv
307.092 121.468 307.847 120.712 308.779 120.712 cv
309.709 120.712 310.464 121.468 310.464 122.399 cv
310.464 123.33 309.709 124.085 308.779 124.085 cv
cp
f
322.504 124.085 mo
315.755 124.085 li
314.825 124.085 314.07 123.33 314.07 122.399 cv
314.07 121.468 314.825 120.712 315.755 120.712 cv
322.504 120.712 li
323.436 120.712 324.191 121.468 324.191 122.399 cv
324.191 123.33 323.436 124.085 322.504 124.085 cv
cp
f
367.707 124.085 mo
360.957 124.085 li
360.026 124.085 359.271 123.33 359.271 122.399 cv
359.271 121.468 360.026 120.712 360.957 120.712 cv
367.707 120.712 li
368.637 120.712 369.392 121.468 369.392 122.399 cv
369.392 123.33 368.637 124.085 367.707 124.085 cv
cp
f
353.574 124.085 mo
330.349 124.085 li
329.417 124.085 328.663 123.33 328.663 122.399 cv
328.663 121.468 329.417 120.712 330.349 120.712 cv
353.574 120.712 li
354.505 120.712 355.26 121.468 355.26 122.399 cv
355.26 123.33 354.505 124.085 353.574 124.085 cv
cp
f
308.779 129.618 mo
307.847 129.618 307.092 128.862 307.092 127.931 cv
307.092 127 307.847 126.245 308.779 126.245 cv
309.709 126.245 310.464 127 310.464 127.931 cv
310.464 128.862 309.709 129.618 308.779 129.618 cv
cp
f
322.504 129.618 mo
315.755 129.618 li
314.825 129.618 314.07 128.862 314.07 127.931 cv
314.07 127 314.825 126.245 315.755 126.245 cv
322.504 126.245 li
323.436 126.245 324.191 127 324.191 127.931 cv
324.191 128.862 323.436 129.618 322.504 129.618 cv
cp
f
367.707 129.618 mo
360.957 129.618 li
360.026 129.618 359.271 128.862 359.271 127.931 cv
359.271 127 360.026 126.245 360.957 126.245 cv
367.707 126.245 li
368.637 126.245 369.392 127 369.392 127.931 cv
369.392 128.862 368.637 129.618 367.707 129.618 cv
cp
f
353.574 129.618 mo
330.349 129.618 li
329.417 129.618 328.663 128.862 328.663 127.931 cv
328.663 127 329.417 126.245 330.349 126.245 cv
353.574 126.245 li
354.505 126.245 355.26 127 355.26 127.931 cv
355.26 128.862 354.505 129.618 353.574 129.618 cv
cp
f
308.779 135.15 mo
307.847 135.15 307.092 134.394 307.092 133.463 cv
307.092 132.532 307.847 131.777 308.779 131.777 cv
309.709 131.777 310.464 132.532 310.464 133.463 cv
310.464 134.394 309.709 135.15 308.779 135.15 cv
cp
f
322.504 135.15 mo
315.755 135.15 li
314.825 135.15 314.07 134.394 314.07 133.463 cv
314.07 132.532 314.825 131.777 315.755 131.777 cv
322.504 131.777 li
323.436 131.777 324.191 132.532 324.191 133.463 cv
324.191 134.394 323.436 135.15 322.504 135.15 cv
cp
f
367.707 135.15 mo
360.957 135.15 li
360.026 135.15 359.271 134.394 359.271 133.463 cv
359.271 132.532 360.026 131.777 360.957 131.777 cv
367.707 131.777 li
368.637 131.777 369.392 132.532 369.392 133.463 cv
369.392 134.394 368.637 135.15 367.707 135.15 cv
cp
f
353.574 135.15 mo
330.349 135.15 li
329.417 135.15 328.663 134.394 328.663 133.463 cv
328.663 132.532 329.417 131.777 330.349 131.777 cv
353.574 131.777 li
354.505 131.777 355.26 132.532 355.26 133.463 cv
355.26 134.394 354.505 135.15 353.574 135.15 cv
cp
f
392.835 215.199 mo
364.073 212.379 346.772 213.596 320.348 215.333 cv
318.525 215.453 316.975 214.006 316.975 212.179 cv
316.975 179.114 li
316.975 177.218 318.637 175.75 320.52 175.976 cv
348.512 179.353 367.733 180.759 392.579 176.257 cv
394.521 175.905 396.313 177.39 396.313 179.363 cv
396.313 212.054 li
396.313 213.924 394.696 215.382 392.835 215.199 cv
cp
.611765 .819608 .941176 rgb
f
389.309 211.192 mo
360.546 208.372 343.246 209.59 316.823 211.326 cv
314.999 211.446 313.449 210 313.449 208.172 cv
313.449 175.108 li
313.449 173.212 315.111 171.743 316.994 171.97 cv
344.986 175.347 364.207 176.752 389.053 172.251 cv
390.995 171.899 392.787 173.384 392.787 175.357 cv
392.787 208.048 li
392.787 209.917 391.17 211.375 389.309 211.192 cv
cp
.662745 .886275 1 rgb
f
331.476 185.903 mo
322.086 185.903 li
321.239 185.903 320.551 185.216 320.551 184.368 cv
320.551 183.52 321.239 182.833 322.086 182.833 cv
331.476 182.833 li
332.324 182.833 333.01 183.52 333.01 184.368 cv
333.01 185.216 332.324 185.903 331.476 185.903 cv
cp
1 1 1 rgb
f
349.034 185.903 mo
339.644 185.903 li
338.796 185.903 338.109 185.216 338.109 184.368 cv
338.109 183.52 338.796 182.833 339.644 182.833 cv
349.034 182.833 li
349.881 182.833 350.568 183.52 350.568 184.368 cv
350.568 185.216 349.881 185.903 349.034 185.903 cv
cp
f
366.591 185.903 mo
357.202 185.903 li
356.354 185.903 355.666 185.216 355.666 184.368 cv
355.666 183.52 356.354 182.833 357.202 182.833 cv
366.591 182.833 li
367.439 182.833 368.126 183.52 368.126 184.368 cv
368.126 185.216 367.439 185.903 366.591 185.903 cv
cp
f
384.149 185.903 mo
374.759 185.903 li
373.912 185.903 373.225 185.216 373.225 184.368 cv
373.225 183.52 373.912 182.833 374.759 182.833 cv
384.149 182.833 li
384.997 182.833 385.684 183.52 385.684 184.368 cv
385.684 185.216 384.997 185.903 384.149 185.903 cv
cp
f
331.476 193.175 mo
322.086 193.175 li
321.239 193.175 320.551 192.488 320.551 191.641 cv
320.551 190.793 321.239 190.105 322.086 190.105 cv
331.476 190.105 li
332.324 190.105 333.01 190.793 333.01 191.641 cv
333.01 192.488 332.324 193.175 331.476 193.175 cv
cp
f
349.034 193.175 mo
339.644 193.175 li
338.796 193.175 338.109 192.488 338.109 191.641 cv
338.109 190.793 338.796 190.105 339.644 190.105 cv
349.034 190.105 li
349.881 190.105 350.568 190.793 350.568 191.641 cv
350.568 192.488 349.881 193.175 349.034 193.175 cv
cp
f
366.591 193.175 mo
357.202 193.175 li
356.354 193.175 355.666 192.488 355.666 191.641 cv
355.666 190.793 356.354 190.105 357.202 190.105 cv
366.591 190.105 li
367.439 190.105 368.126 190.793 368.126 191.641 cv
368.126 192.488 367.439 193.175 366.591 193.175 cv
cp
f
384.149 193.175 mo
374.759 193.175 li
373.912 193.175 373.225 192.488 373.225 191.641 cv
373.225 190.793 373.912 190.105 374.759 190.105 cv
384.149 190.105 li
384.997 190.105 385.684 190.793 385.684 191.641 cv
385.684 192.488 384.997 193.175 384.149 193.175 cv
cp
f
331.476 200.447 mo
322.086 200.447 li
321.239 200.447 320.551 199.76 320.551 198.912 cv
320.551 198.064 321.239 197.378 322.086 197.378 cv
331.476 197.378 li
332.324 197.378 333.01 198.064 333.01 198.912 cv
333.01 199.76 332.324 200.447 331.476 200.447 cv
cp
f
349.034 200.447 mo
339.644 200.447 li
338.796 200.447 338.109 199.76 338.109 198.912 cv
338.109 198.064 338.796 197.378 339.644 197.378 cv
349.034 197.378 li
349.881 197.378 350.568 198.064 350.568 198.912 cv
350.568 199.76 349.881 200.447 349.034 200.447 cv
cp
f
366.591 200.447 mo
357.202 200.447 li
356.354 200.447 355.666 199.76 355.666 198.912 cv
355.666 198.064 356.354 197.378 357.202 197.378 cv
366.591 197.378 li
367.439 197.378 368.126 198.064 368.126 198.912 cv
368.126 199.76 367.439 200.447 366.591 200.447 cv
cp
f
384.149 200.447 mo
374.759 200.447 li
373.912 200.447 373.225 199.76 373.225 198.912 cv
373.225 198.064 373.912 197.378 374.759 197.378 cv
384.149 197.378 li
384.997 197.378 385.684 198.064 385.684 198.912 cv
385.684 199.76 384.997 200.447 384.149 200.447 cv
cp
f
140.971 196.117 mo
108.936 211.723 94.9072 194.515 68.4844 196.251 cv
66.6606 196.371 65.1103 194.925 65.1103 193.097 cv
65.1103 160.033 li
65.1103 158.137 66.7729 156.668 68.6557 156.895 cv
96.6479 160.271 113.774 171.644 140.715 157.176 cv
142.454 156.242 144.449 158.308 144.449 160.282 cv
144.449 192.973 li
144.449 194.842 142.652 195.299 140.971 196.117 cv
cp
.662745 .886275 1 rgb
f
144.161 200.852 mo
112.125 216.458 98.0967 199.25 71.6738 200.986 cv
69.8501 201.106 68.2998 199.66 68.2998 197.832 cv
68.2998 164.768 li
68.2998 162.872 69.9624 161.403 71.8452 161.63 cv
99.8374 165.007 116.964 176.38 143.904 161.911 cv
145.643 160.977 147.638 163.043 147.638 165.018 cv
147.638 197.708 li
147.638 199.577 145.841 200.034 144.161 200.852 cv
cp
.611765 .819608 .941176 rgb
f
91.6636 179.891 mo
75.0586 179.891 li
74.0815 179.891 73.2895 179.099 73.2895 178.122 cv
73.2895 177.144 74.0815 176.352 75.0586 176.352 cv
91.6636 176.352 li
92.6406 176.352 93.4326 177.144 93.4326 178.122 cv
93.4326 179.099 92.6406 179.891 91.6636 179.891 cv
cp
1 1 1 rgb
f
129.049 179.891 mo
99.0093 179.891 li
98.0322 179.891 97.2402 179.099 97.2402 178.122 cv
97.2402 177.144 98.0322 176.352 99.0093 176.352 cv
129.049 176.352 li
130.026 176.352 130.818 177.144 130.818 178.122 cv
130.818 179.099 130.026 179.891 129.049 179.891 cv
cp
f
140.879 179.891 mo
135.905 179.891 li
134.928 179.891 134.136 179.099 134.136 178.122 cv
134.136 177.144 134.928 176.352 135.905 176.352 cv
140.879 176.352 li
141.856 176.352 142.648 177.144 142.648 178.122 cv
142.648 179.099 141.856 179.891 140.879 179.891 cv
cp
f
124.274 186.298 mo
140.879 186.298 li
141.856 186.298 142.648 185.506 142.648 184.528 cv
142.648 183.552 141.856 182.76 140.879 182.76 cv
124.274 182.76 li
123.297 182.76 122.505 183.552 122.505 184.528 cv
122.505 185.506 123.297 186.298 124.274 186.298 cv
cp
f
86.8886 186.298 mo
116.928 186.298 li
117.906 186.298 118.698 185.506 118.698 184.528 cv
118.698 183.552 117.906 182.76 116.928 182.76 cv
86.8886 182.76 li
85.9116 182.76 85.1196 183.552 85.1196 184.528 cv
85.1196 185.506 85.9116 186.298 86.8886 186.298 cv
cp
f
75.0586 186.298 mo
80.0322 186.298 li
81.0093 186.298 81.8012 185.506 81.8012 184.528 cv
81.8012 183.552 81.0093 182.76 80.0322 182.76 cv
75.0586 182.76 li
74.0815 182.76 73.2895 183.552 73.2895 184.528 cv
73.2895 185.506 74.0815 186.298 75.0586 186.298 cv
cp
f
91.6636 192.705 mo
75.0586 192.705 li
74.0815 192.705 73.2895 191.913 73.2895 190.935 cv
73.2895 189.959 74.0815 189.167 75.0586 189.167 cv
91.6636 189.167 li
92.6406 189.167 93.4326 189.959 93.4326 190.935 cv
93.4326 191.913 92.6406 192.705 91.6636 192.705 cv
cp
f
129.049 192.705 mo
99.0093 192.705 li
98.0322 192.705 97.2402 191.913 97.2402 190.935 cv
97.2402 189.959 98.0322 189.167 99.0093 189.167 cv
129.049 189.167 li
130.026 189.167 130.818 189.959 130.818 190.935 cv
130.818 191.913 130.026 192.705 129.049 192.705 cv
cp
f
140.879 192.705 mo
135.905 192.705 li
134.928 192.705 134.136 191.913 134.136 190.935 cv
134.136 189.959 134.928 189.167 135.905 189.167 cv
140.879 189.167 li
141.856 189.167 142.648 189.959 142.648 190.935 cv
142.648 191.913 141.856 192.705 140.879 192.705 cv
cp
f
345.658 244.909 mo
332.903 245.515 319.289 233.689 301.856 245.213 cv
300.035 246.417 297.809 243.766 298.156 241.61 cv
300.008 230.092 298.568 220.098 297.517 204.707 cv
297.384 202.758 299.037 201.149 300.981 201.339 cv
318.092 203.006 328.337 209.005 345.912 201.767 cv
347.737 201.015 349.645 202.898 349.645 204.873 cv
349.645 241.862 li
349.645 243.944 347.738 244.81 345.658 244.909 cv
cp
.94902 .94902 .94902 rgb
f
347.495 246.824 mo
334.74 247.429 321.125 235.603 303.693 247.128 cv
301.872 248.331 299.646 245.68 299.993 243.524 cv
301.845 232.006 300.405 222.012 299.354 206.621 cv
299.221 204.672 300.874 203.064 302.818 203.254 cv
319.928 204.92 330.173 210.919 347.749 203.681 cv
349.574 202.929 351.481 204.812 351.481 206.787 cv
351.481 243.776 li
351.481 245.858 349.574 246.726 347.495 246.824 cv
cp
1 1 1 rgb
f
306.556 223.602 mo
306.827 223.674 307.169 223.702 307.582 223.702 cv
309.081 223.702 309.993 222.975 309.993 221.648 cv
309.993 220.38 309.094 219.766 307.725 219.766 cv
307.183 219.766 306.77 219.809 306.556 219.866 cv
306.556 223.602 li
cp
305.315 218.968 mo
305.915 218.867 306.699 218.782 307.697 218.782 cv
308.923 218.782 309.822 219.067 310.392 219.581 cv
310.919 220.037 311.234 220.736 311.234 221.592 cv
311.234 222.461 310.977 223.145 310.492 223.645 cv
309.836 224.344 308.766 224.7 307.554 224.7 cv
307.183 224.7 306.841 224.686 306.556 224.615 cv
306.556 228.465 li
305.315 228.465 li
305.315 218.968 li
cp
.266667 .258824 .266667 rgb
f
313.374 221.562 mo
314.886 225.642 li
315.042 226.098 315.213 226.64 315.328 227.054 cv
315.356 227.054 li
315.485 226.64 315.627 226.112 315.798 225.613 cv
317.167 221.562 li
318.494 221.562 li
316.611 226.483 li
315.712 228.851 315.099 230.062 314.244 230.804 cv
313.63 231.346 313.018 231.559 312.704 231.616 cv
312.39 230.561 li
312.704 230.462 313.118 230.262 313.488 229.948 cv
313.831 229.678 314.258 229.192 314.543 228.551 cv
314.6 228.423 314.643 228.323 314.643 228.252 cv
314.643 228.18 314.615 228.08 314.558 227.923 cv
312.005 221.562 li
313.374 221.562 li
cp
f
321.148 219.581 mo
321.148 221.562 li
322.945 221.562 li
322.945 222.518 li
321.148 222.518 li
321.148 226.241 li
321.148 227.096 321.39 227.581 322.088 227.581 cv
322.416 227.581 322.66 227.538 322.816 227.495 cv
322.874 228.436 li
322.63 228.536 322.246 228.607 321.761 228.607 cv
321.176 228.607 320.706 228.423 320.406 228.08 cv
320.049 227.709 319.921 227.096 319.921 226.283 cv
319.921 222.518 li
318.852 222.518 li
318.852 221.562 li
319.921 221.562 li
319.921 219.909 li
321.148 219.581 li
cp
f
324.357 218.34 mo
325.612 218.34 li
325.612 222.647 li
325.64 222.647 li
325.84 222.29 326.154 221.976 326.539 221.763 cv
326.91 221.549 327.352 221.406 327.823 221.406 cv
328.749 221.406 330.232 221.976 330.232 224.358 cv
330.232 228.465 li
328.977 228.465 li
328.977 224.501 li
328.977 223.389 328.564 222.447 327.38 222.447 cv
326.567 222.447 325.925 223.018 325.698 223.702 cv
325.626 223.873 325.612 224.059 325.612 224.301 cv
325.612 228.465 li
324.357 228.465 li
324.357 218.34 li
cp
f
333.043 225.028 mo
333.043 226.54 333.914 227.681 335.139 227.681 cv
336.337 227.681 337.236 226.555 337.236 225 cv
337.236 223.831 336.651 222.348 335.168 222.348 cv
333.685 222.348 333.043 223.717 333.043 225.028 cv
cp
338.519 224.957 mo
338.519 227.51 336.75 228.622 335.082 228.622 cv
333.214 228.622 331.774 227.253 331.774 225.071 cv
331.774 222.761 333.286 221.406 335.197 221.406 cv
337.179 221.406 338.519 222.847 338.519 224.957 cv
cp
f
340.104 223.431 mo
340.104 222.719 340.089 222.134 340.046 221.562 cv
341.159 221.562 li
341.23 222.704 li
341.259 222.704 li
341.601 222.048 342.4 221.406 343.54 221.406 cv
344.496 221.406 345.979 221.976 345.979 224.344 cv
345.979 228.465 li
344.724 228.465 li
344.724 224.486 li
344.724 223.374 344.311 222.447 343.127 222.447 cv
342.3 222.447 341.659 223.032 341.444 223.73 cv
341.387 223.888 341.359 224.101 341.359 224.315 cv
341.359 228.465 li
340.104 228.465 li
340.104 223.431 li
cp
f
158.415 187.867 mo
145.66 188.473 132.045 176.647 114.613 188.171 cv
112.791 189.375 110.566 186.724 110.913 184.568 cv
112.765 173.05 111.325 163.055 110.274 147.664 cv
110.141 145.715 111.793 144.107 113.738 144.297 cv
130.849 145.963 141.094 151.962 158.668 144.724 cv
160.494 143.972 162.401 145.856 162.401 147.83 cv
162.401 184.82 li
162.401 186.902 160.494 187.768 158.415 187.867 cv
cp
.929412 .94902 .94902 rgb
f
156.117 191.035 mo
143.362 191.641 129.748 179.815 112.315 191.339 cv
110.494 192.543 108.269 189.892 108.615 187.736 cv
110.467 176.218 109.027 166.223 107.977 150.833 cv
107.843 148.883 109.496 147.276 111.44 147.465 cv
128.551 149.131 138.796 155.131 156.371 147.892 cv
158.196 147.14 160.104 149.024 160.104 150.998 cv
160.104 187.988 li
160.104 190.07 158.196 190.936 156.117 191.035 cv
cp
1 1 1 rgb
f
121.578 168.688 mo
121.881 168.768 122.263 168.8 122.725 168.8 cv
124.398 168.8 125.417 167.988 125.417 166.506 cv
125.417 165.088 124.414 164.403 122.884 164.403 cv
122.279 164.403 121.817 164.451 121.578 164.515 cv
121.578 168.688 li
cp
120.192 163.511 mo
120.861 163.399 121.737 163.304 122.853 163.304 cv
124.223 163.304 125.227 163.622 125.864 164.196 cv
126.453 164.706 126.803 165.486 126.803 166.442 cv
126.803 167.414 126.517 168.179 125.975 168.736 cv
125.242 169.517 124.047 169.915 122.693 169.915 cv
122.279 169.915 121.896 169.899 121.578 169.82 cv
121.578 174.121 li
120.192 174.121 li
120.192 163.511 li
cp
.266667 .258824 .266667 rgb
f
130.053 163.384 mo
130.053 167.876 li
135.247 167.876 li
135.247 163.384 li
136.649 163.384 li
136.649 174.121 li
135.247 174.121 li
135.247 169.087 li
130.053 169.087 li
130.053 174.121 li
128.667 174.121 li
128.667 163.384 li
130.053 163.384 li
cp
f
140.441 168.688 mo
140.744 168.768 141.126 168.8 141.588 168.8 cv
143.261 168.8 144.28 167.988 144.28 166.506 cv
144.28 165.088 143.277 164.403 141.747 164.403 cv
141.142 164.403 140.68 164.451 140.441 164.515 cv
140.441 168.688 li
cp
139.055 163.511 mo
139.724 163.399 140.6 163.304 141.715 163.304 cv
143.085 163.304 144.089 163.622 144.726 164.196 cv
145.316 164.706 145.666 165.486 145.666 166.442 cv
145.666 167.414 145.379 168.179 144.838 168.736 cv
144.105 169.517 142.91 169.915 141.556 169.915 cv
141.142 169.915 140.76 169.899 140.441 169.82 cv
140.441 174.121 li
139.055 174.121 li
139.055 163.511 li
cp
f
291.024 224.735 mo
291.024 231.776 285.315 237.485 278.273 237.485 cv
271.231 237.485 265.523 231.776 265.523 224.735 cv
265.523 217.693 271.231 211.984 278.273 211.984 cv
285.315 211.984 291.024 217.693 291.024 224.735 cv
cp
.92549 .976471 1 rgb
f
278.273 208.165 mo
269.136 208.165 261.704 215.599 261.704 224.735 cv
261.704 233.872 269.136 241.305 278.273 241.305 cv
287.41 241.305 294.843 233.872 294.843 224.735 cv
294.843 215.599 287.41 208.165 278.273 208.165 cv
cp
278.273 241.71 mo
268.913 241.71 261.297 234.095 261.297 224.735 cv
261.297 215.375 268.913 207.76 278.273 207.76 cv
287.633 207.76 295.249 215.375 295.249 224.735 cv
295.249 234.095 287.633 241.71 278.273 241.71 cv
cp
f
383.114 244.42 mo
383.114 251.504 371.263 257.247 356.644 257.247 cv
342.025 257.247 330.173 251.504 330.173 244.42 cv
330.173 237.336 342.025 231.594 356.644 231.594 cv
371.263 231.594 383.114 237.336 383.114 244.42 cv
cp
f
356.644 230.642 mo
340.846 230.642 327.995 236.823 327.995 244.42 cv
327.995 252.018 340.846 258.198 356.644 258.198 cv
372.441 258.198 385.293 252.018 385.293 244.42 cv
385.293 236.823 372.441 230.642 356.644 230.642 cv
cp
356.644 258.603 mo
340.623 258.603 327.588 252.241 327.588 244.42 cv
327.588 236.6 340.623 230.236 356.644 230.236 cv
372.665 230.236 385.699 236.6 385.699 244.42 cv
385.699 252.241 372.665 258.603 356.644 258.603 cv
cp
f
269.878 58.1352 mo
269.878 62.0844 266.677 65.2861 262.728 65.2861 cv
258.779 65.2861 255.577 62.0844 255.577 58.1352 cv
255.577 54.186 258.779 50.9848 262.728 50.9848 cv
266.677 50.9848 269.878 54.186 269.878 58.1352 cv
cp
f
262.728 49.1518 mo
257.774 49.1518 253.744 53.1816 253.744 58.1352 cv
253.744 63.0893 257.774 67.1191 262.728 67.1191 cv
267.681 67.1191 271.711 63.0893 271.711 58.1352 cv
271.711 53.1816 267.681 49.1518 262.728 49.1518 cv
cp
262.728 67.5248 mo
257.55 67.5248 253.338 63.3124 253.338 58.1352 cv
253.338 52.9579 257.55 48.746 262.728 48.746 cv
267.905 48.746 272.117 52.9579 272.117 58.1352 cv
272.117 63.3124 267.905 67.5248 262.728 67.5248 cv
cp
f
262.728 47.9267 mo
257.098 47.9267 252.519 52.5063 252.519 58.1352 cv
252.519 63.7646 257.098 68.3442 262.728 68.3442 cv
268.357 68.3442 272.936 63.7646 272.936 58.1352 cv
272.936 52.5063 268.357 47.9267 262.728 47.9267 cv
cp
262.728 68.7494 mo
256.875 68.7494 252.114 63.9877 252.114 58.1352 cv
252.114 52.2826 256.875 47.5209 262.728 47.5209 cv
268.581 47.5209 273.342 52.2826 273.342 58.1352 cv
273.342 63.9877 268.581 68.7494 262.728 68.7494 cv
cp
f
97.6704 223.419 mo
97.6704 227.368 94.4692 230.57 90.52 230.57 cv
86.5708 230.57 83.3691 227.368 83.3691 223.419 cv
83.3691 219.47 86.5708 216.268 90.52 216.268 cv
94.4692 216.268 97.6704 219.47 97.6704 223.419 cv
cp
f
90.52 214.435 mo
85.5659 214.435 81.5361 218.466 81.5361 223.419 cv
81.5361 228.373 85.5659 232.403 90.52 232.403 cv
95.4736 232.403 99.5034 228.373 99.5034 223.419 cv
99.5034 218.466 95.4736 214.435 90.52 214.435 cv
cp
90.52 232.809 mo
85.3423 232.809 81.1303 228.597 81.1303 223.419 cv
81.1303 218.242 85.3423 214.03 90.52 214.03 cv
95.6972 214.03 99.9092 218.242 99.9092 223.419 cv
99.9092 228.597 95.6972 232.809 90.52 232.809 cv
cp
f
90.52 213.21 mo
84.8906 213.21 80.311 217.79 80.311 223.419 cv
80.311 229.049 84.8906 233.628 90.52 233.628 cv
96.1489 233.628 100.728 229.049 100.728 223.419 cv
100.728 217.79 96.1489 213.21 90.52 213.21 cv
cp
90.52 234.033 mo
84.667 234.033 79.9057 229.271 79.9057 223.419 cv
79.9057 217.566 84.667 212.805 90.52 212.805 cv
96.3725 212.805 101.134 217.566 101.134 223.419 cv
101.134 229.271 96.3725 234.033 90.52 234.033 cv
cp
f
151.392 106.781 mo
104.419 106.781 li
102.673 106.781 101.257 105.366 101.257 103.62 cv
101.257 88.2782 li
101.257 86.5317 102.673 85.1166 104.419 85.1166 cv
151.392 85.1166 li
153.138 85.1166 154.553 86.5317 154.553 88.2782 cv
154.553 103.62 li
154.553 105.366 153.138 106.781 151.392 106.781 cv
cp
f
150.372 108.53 mo
103.399 108.53 li
101.653 108.53 100.237 107.115 100.237 105.369 cv
100.237 90.0273 li
100.237 88.2812 101.653 86.8656 103.399 86.8656 cv
150.372 86.8656 li
152.118 86.8656 153.534 88.2812 153.534 90.0273 cv
153.534 105.369 li
153.534 107.115 152.118 108.53 150.372 108.53 cv
cp
.827451 .905882 .945098 rgb
f
117.834 97.6982 mo
117.834 101.647 114.633 104.849 110.684 104.849 cv
106.734 104.849 103.533 101.647 103.533 97.6982 cv
103.533 93.7489 106.734 90.5473 110.684 90.5473 cv
114.633 90.5473 117.834 93.7489 117.834 97.6982 cv
cp
.92549 .976471 1 rgb
f
134.036 97.6982 mo
134.036 101.647 130.835 104.849 126.886 104.849 cv
122.937 104.849 119.735 101.647 119.735 97.6982 cv
119.735 93.7489 122.937 90.5473 126.886 90.5473 cv
130.835 90.5473 134.036 93.7489 134.036 97.6982 cv
cp
f
150.238 97.6982 mo
150.238 101.647 147.037 104.849 143.087 104.849 cv
139.138 104.849 135.937 101.647 135.937 97.6982 cv
135.937 93.7489 139.138 90.5473 143.087 90.5473 cv
147.037 90.5473 150.238 93.7489 150.238 97.6982 cv
cp
f
181.606 290.931 mo
89.3311 290.931 88.5987 271.447 181.606 271.447 cv
184.642 271.447 187.575 271.468 190.413 271.509 cv
193.526 274.353 196.661 276.518 200.06 276.518 cv
202.221 276.519 204.488 275.644 206.925 273.512 cv
207.422 273.076 207.892 272.598 208.334 272.082 cv
225.933 272.995 238.112 274.808 244.848 276.965 cv
246.552 278.711 248.557 280.378 250.908 281.959 cv
248.68 286.56 225.658 290.931 181.606 290.931 cv
.843137 .858823 .952941 rgb
f
250.908 281.959 mo
248.557 280.378 246.552 278.711 244.848 276.965 cv
249.708 278.521 251.733 280.256 250.908 281.959 cv
.72549 .733333 .85098 rgb
f
200.06 276.518 mo
196.661 276.518 193.526 274.353 190.413 271.509 cv
196.903 271.602 202.882 271.799 208.334 272.082 cv
207.892 272.598 207.422 273.076 206.925 273.512 cv
204.488 275.644 202.221 276.519 200.06 276.518 cv
f
183.997 243.38 mo
203.416 249.49 194.559 274.176 176.103 272.018 cv
165.802 270.815 115.606 253.066 110.211 245.551 cv
108.357 242.969 108.031 239.276 109.692 236.566 cv
112.184 232.501 116.259 233.286 120.151 233.885 cv
120.732 233.974 168.333 238.451 183.997 243.38 cv
cp
.317647 .262745 .258824 rgb
f
115.712 233.604 mo
113.438 233.604 111.351 234.248 109.865 236.673 cv
108.298 239.228 108.508 242.831 110.376 245.433 cv
115.676 252.815 165.51 270.576 176.126 271.817 cv
186.031 272.975 192.94 266.286 194.411 259.405 cv
195.624 253.726 193.51 246.586 183.936 243.573 cv
171.511 239.664 139.358 236.027 121.299 234.207 cv
120.5 234.126 120.174 234.094 120.12 234.085 cv
119.731 234.025 li
118.382 233.815 117.016 233.604 115.712 233.604 cv
cp
178.353 272.354 mo
177.614 272.354 176.856 272.31 176.079 272.22 cv
165.425 270.975 115.384 253.104 110.046 245.669 cv
108.086 242.938 107.87 239.151 109.52 236.461 cv
111.999 232.415 115.961 233.03 119.793 233.624 cv
120.182 233.684 li
120.228 233.691 120.67 233.736 121.34 233.804 cv
139.415 235.625 171.598 239.267 184.057 243.186 cv
193.902 246.284 196.001 253.905 194.808 259.49 cv
193.415 266.006 187.273 272.354 178.353 272.354 cv
cp
.27451 .235294 .227451 rgb
f
179.379 242.235 mo
159.96 248.346 168.816 273.031 187.273 270.874 cv
197.573 269.67 247.769 251.921 253.165 244.406 cv
255.018 241.824 255.345 238.132 253.683 235.422 cv
251.192 231.356 247.117 232.142 243.225 232.74 cv
242.643 232.829 195.042 237.307 179.379 242.235 cv
cp
.317647 .262745 .258824 rgb
f
179.379 242.235 mo
179.44 242.429 li
169.865 245.441 167.75 252.582 168.964 258.261 cv
170.436 265.142 177.346 271.834 187.249 270.673 cv
197.866 269.432 247.7 251.67 252.999 244.288 cv
254.868 241.686 255.078 238.084 253.511 235.528 cv
251.172 231.713 247.346 232.307 243.645 232.88 cv
243.255 232.94 li
243.202 232.948 242.875 232.981 242.077 233.062 cv
224.017 234.882 191.865 238.519 179.44 242.429 cv
179.379 242.235 li
cp
185.022 271.21 mo
176.102 271.21 169.961 264.861 168.568 258.346 cv
167.374 252.761 169.473 245.14 179.318 242.042 cv
191.778 238.121 223.96 234.48 242.036 232.659 cv
242.706 232.591 243.147 232.547 243.194 232.54 cv
243.583 232.479 li
247.415 231.885 251.376 231.271 253.857 235.315 cv
255.506 238.007 255.29 241.794 253.329 244.524 cv
247.992 251.96 197.95 269.83 187.296 271.075 cv
186.52 271.166 185.761 271.21 185.022 271.21 cv
cp
.27451 .235294 .227451 rgb
f
210.847 265.878 mo
187.636 271.861 174.055 271.944 151.509 265.878 cv
153.229 247.353 153.114 235.64 157.78 218.444 cv
203.984 220.524 li
209.469 238.027 209.535 248.649 210.847 265.878 cv
cp
.317647 .262745 .258824 rgb
f
151.727 265.726 mo
174.055 271.717 187.322 271.717 210.632 265.724 cv
210.458 263.423 210.305 261.24 210.158 259.142 cv
209.208 245.554 208.52 235.725 203.833 220.721 cv
157.934 218.654 li
154.39 231.768 153.641 241.566 152.694 253.959 cv
152.411 257.667 152.118 261.499 151.727 265.726 cv
cp
180.807 270.627 mo
171.709 270.627 162.738 269.109 151.457 266.073 cv
151.291 266.029 li
151.307 265.859 li
151.706 261.567 152.003 257.684 152.29 253.928 cv
153.242 241.465 153.995 231.62 157.585 218.391 cv
157.627 218.234 li
157.79 218.241 li
204.136 220.329 li
204.178 220.464 li
208.917 235.59 209.607 245.457 210.562 259.114 cv
210.713 261.263 210.869 263.5 211.049 265.862 cv
211.062 266.032 li
210.898 266.074 li
199.125 269.108 189.903 270.627 180.807 270.627 cv
cp
.27451 .235294 .227451 rgb
f
184.024 251.78 mo
183.927 251.78 183.842 251.711 183.824 251.612 cv
181.914 240.615 179.748 228.151 182.435 216.447 cv
182.46 216.339 182.569 216.27 182.678 216.296 cv
182.787 216.32 182.855 216.43 182.83 216.539 cv
180.161 228.162 182.32 240.584 184.224 251.543 cv
184.243 251.653 184.169 251.758 184.059 251.777 cv
184.024 251.78 li
cp
.196078 .239216 .305882 rgb
f
182.297 241.011 mo
182.166 240.963 li
175.403 235.24 175.592 233.347 177.4 215.231 cv
177.412 215.12 177.512 215.038 177.623 215.05 cv
177.734 215.061 177.815 215.16 177.804 215.272 cv
176.015 233.194 175.828 235.068 182.428 240.653 cv
182.452 240.939 li
182.297 241.011 li
cp
f
154.655 233.214 mo
154.463 233.075 li
154.428 232.97 154.485 232.854 154.591 232.819 cv
161.216 230.604 162.595 230.143 165.837 216.412 cv
165.862 216.304 165.972 216.234 166.081 216.262 cv
166.19 216.287 166.257 216.396 166.231 216.506 cv
162.937 230.457 161.521 230.93 154.72 233.204 cv
154.655 233.214 li
cp
f
154.655 233.214 mo
154.463 233.075 li
154.428 232.97 154.485 232.854 154.591 232.819 cv
161.216 230.604 162.595 230.143 165.837 216.412 cv
165.862 216.304 165.972 216.234 166.081 216.262 cv
166.19 216.287 166.257 216.396 166.231 216.506 cv
162.937 230.457 161.521 230.93 154.72 233.204 cv
154.655 233.214 li
cp
f
207.359 233.601 mo
207.294 233.591 li
207.034 233.504 li
200.46 231.308 199.092 230.851 195.85 217.119 cv
195.824 217.01 195.892 216.9 196 216.875 cv
196.108 216.848 196.219 216.916 196.245 217.025 cv
199.435 230.538 200.615 230.932 207.163 233.119 cv
207.423 233.206 li
207.529 233.241 207.586 233.356 207.551 233.462 cv
207.359 233.601 li
cp
f
191.278 269.325 mo
190.425 272.929 190.581 276.767 191.725 280.289 cv
177.768 281.098 145.991 287.893 145.135 282.426 cv
144.957 281.294 144.777 281.75 168.824 269.185 cv
172.907 267.052 175.176 268.175 175.767 272.32 cv
175.985 273.855 189.812 269.825 191.278 269.325 cv
cp
1 1 .964706 rgb
f
172.293 268.333 mo
171.362 268.333 170.233 268.678 168.918 269.365 cv
163.414 272.241 159.178 274.435 155.922 276.122 cv
145.419 281.562 145.221 281.679 145.33 282.362 cv
145.898 285.99 161.487 283.867 175.24 281.994 cv
181.381 281.158 187.188 280.367 191.453 280.101 cv
190.398 276.707 190.243 273.099 191.001 269.626 cv
188.695 270.343 177.332 273.625 175.805 272.691 cv
175.633 272.585 175.58 272.446 175.566 272.349 cv
175.289 270.402 174.631 269.149 173.611 268.627 cv
173.229 268.431 172.79 268.333 172.293 268.333 cv
cp
152.225 284.735 mo
147.991 284.735 145.195 284.125 144.934 282.457 cv
144.773 281.44 144.773 281.44 155.735 275.762 cv
158.991 274.075 163.226 271.882 168.73 269.006 cv
170.869 267.888 172.573 267.64 173.796 268.266 cv
174.94 268.852 175.67 270.207 175.967 272.292 cv
176.017 272.346 li
177.339 273.158 189.153 269.836 191.212 269.133 cv
191.56 269.015 li
191.475 269.372 li
190.625 272.963 190.778 276.716 191.917 280.225 cv
191.999 280.475 li
191.736 280.491 li
187.465 280.738 181.554 281.543 175.295 282.395 cv
166.79 283.554 158.115 284.735 152.225 284.735 cv
cp
.929412 .890196 .843137 rgb
f
155.247 282.702 mo
155.136 282.702 155.045 282.612 155.044 282.501 cv
155.044 282.389 155.134 282.297 155.246 282.297 cv
161.389 282.267 167.547 281.594 173.55 280.297 cv
173.66 280.272 173.767 280.342 173.791 280.452 cv
173.814 280.56 173.745 280.669 173.635 280.692 cv
167.605 281.996 161.418 282.672 155.248 282.702 cv
155.247 282.702 li
cp
f
254.744 261.467 mo
274.254 252.575 261.814 227.913 242.799 232.548 cv
232.187 235.135 182.004 260.16 177.334 268.712 cv
175.729 271.65 175.864 275.552 177.95 278.171 cv
181.079 282.099 185.237 280.752 189.228 279.625 cv
189.825 279.457 239.005 268.639 254.744 261.467 cv
cp
.317647 .262745 .258824 rgb
f
247.448 232.178 mo
245.974 232.178 244.437 232.357 242.847 232.745 cv
231.908 235.411 182.101 260.407 177.512 268.809 cv
175.893 271.773 176.138 275.57 178.108 278.044 cv
181.049 281.736 184.977 280.621 188.773 279.543 cv
189.173 279.43 li
189.228 279.415 189.57 279.337 190.405 279.147 cv
209.047 274.916 242.183 266.968 254.66 261.282 cv
254.744 261.467 li
254.66 261.282 li
264.287 256.895 265.577 249.152 263.574 243.369 cv
261.525 237.452 255.439 232.178 247.448 232.178 cv
cp
183.313 281.001 mo
181.315 281.001 179.422 280.345 177.791 278.297 cv
175.722 275.699 175.461 271.718 177.156 268.615 cv
181.776 260.156 231.776 235.025 242.751 232.351 cv
253.196 229.804 261.472 236.059 263.957 243.235 cv
265.923 248.916 264.712 257.146 254.828 261.651 cv
242.318 267.351 209.152 275.308 190.495 279.543 cv
189.794 279.702 189.332 279.807 189.284 279.82 cv
188.884 279.934 li
187.019 280.463 185.123 281.001 183.313 281.001 cv
cp
.27451 .235294 .227451 rgb
f
173.582 268.727 mo
174.45 272.328 174.31 276.166 173.181 279.693 cv
187.142 280.442 218.947 287.104 219.78 281.634 cv
219.953 280.5 220.134 280.956 196.035 268.492 cv
191.943 266.377 189.679 267.509 189.106 271.657 cv
188.894 273.193 175.05 269.221 173.582 268.727 cv
cp
1 1 .964706 rgb
f
173.453 279.505 mo
177.719 279.753 183.53 280.518 189.675 281.329 cv
203.436 283.143 219.032 285.2 219.58 281.602 cv
219.69 280.887 219.492 280.771 208.966 275.375 cv
205.703 273.702 201.458 271.525 195.942 268.673 cv
193.922 267.628 192.342 267.387 191.246 267.954 cv
190.228 268.481 189.576 269.736 189.307 271.684 cv
189.293 271.782 189.241 271.921 189.068 272.028 cv
187.547 272.97 176.169 269.734 173.859 269.027 cv
174.633 272.496 174.493 276.105 173.453 279.505 cv
cp
212.463 283.967 mo
206.578 283.967 198.019 282.838 189.622 281.731 cv
183.359 280.905 177.443 280.125 173.17 279.895 cv
172.908 279.882 li
172.988 279.631 li
174.113 276.116 174.25 272.362 173.385 268.775 cv
173.298 268.418 li
173.646 268.535 li
175.709 269.228 187.54 272.497 188.855 271.684 cv
188.905 271.629 li
189.193 269.544 189.918 268.185 191.059 267.595 cv
192.279 266.962 193.985 267.204 196.128 268.312 cv
201.644 271.165 205.888 273.341 209.151 275.014 cv
220.138 280.646 220.138 280.646 219.985 281.632 cv
219.725 283.346 216.831 283.967 212.463 283.967 cv
cp
.929412 .890196 .843137 rgb
f
209.668 281.953 mo
203.498 281.948 197.309 281.298 191.272 280.02 cv
191.163 279.997 191.092 279.89 191.116 279.78 cv
191.139 279.671 191.246 279.601 191.356 279.624 cv
197.365 280.895 203.526 281.543 209.668 281.548 cv
209.78 281.548 209.871 281.639 209.871 281.75 cv
209.871 281.862 209.78 281.953 209.668 281.953 cv
cp
f
110.119 262.806 mo
90.5771 253.982 102.932 229.277 121.962 233.845 cv
132.583 236.394 182.853 261.245 187.554 269.78 cv
189.169 272.713 189.048 276.614 186.971 279.24 cv
183.856 283.18 179.692 281.848 175.698 280.734 cv
175.1 280.568 125.882 269.922 110.119 262.806 cv
cp
.317647 .262745 .258824 rgb
f
117.376 233.491 mo
109.353 233.491 103.259 238.799 101.226 244.739 cv
99.2436 250.529 100.561 258.267 110.203 262.62 cv
122.704 268.265 155.87 276.097 174.528 280.263 cv
175.358 280.448 175.697 280.524 175.752 280.54 cv
176.152 280.651 li
179.953 281.716 183.884 282.816 186.812 279.114 cv
188.773 276.635 189.005 272.836 187.376 269.878 cv
182.758 261.491 132.863 236.67 121.915 234.042 cv
120.347 233.666 118.83 233.491 117.376 233.491 cv
cp
181.585 282.09 mo
179.785 282.09 177.899 281.561 176.042 281.042 cv
175.643 280.93 li
175.595 280.917 175.136 280.814 174.439 280.659 cv
155.767 276.489 122.57 268.649 110.036 262.99 cv
100.135 258.52 98.8955 250.294 100.842 244.607 cv
103.302 237.422 111.557 231.14 122.01 233.648 cv
132.994 236.284 183.082 261.239 187.731 269.682 cv
189.437 272.779 189.19 276.762 187.13 279.366 cv
185.498 281.431 183.595 282.09 181.585 282.09 cv
cp
.27451 .235294 .227451 rgb
f
172.958 149.079 mo
173.043 155.979 175.329 161.096 162.638 167.068 cv
170.192 177.46 177.632 181.301 177.632 181.301 cv
177.632 181.301 193.548 174.136 199.017 169.395 cv
196.171 167.325 193.2 165.778 190.576 163.934 cv
185.391 160.29 188.45 152.195 187.437 149.206 cv
172.958 149.079 li
cp
.976471 .647059 .529412 rgb
f
188.888 162.226 mo
187.491 160.174 187.404 157.816 187.491 154.547 cv
180.827 159.256 177.625 157.094 173.421 154.005 cv
179.45 162.71 182.999 159.506 188.888 162.226 cv
cp
.917647 .47451 .360784 rgb
f
185.463 156.492 mo
189.095 155.334 194.993 144.781 192.778 131.782 cv
190.545 118.678 175.968 117.109 170.184 125.95 cv
164.617 134.459 168.218 161.994 185.463 156.492 cv
cp
.976471 .647059 .529412 rgb
f
175.33 129.784 mo
177.723 129.299 180.559 126.071 183.084 127.677 cv
187.52 130.498 192.208 132.608 192.431 144.867 cv
195.078 134.434 194.469 136.849 196.674 134.931 cv
200.146 131.91 195.207 126.531 194.388 123.876 cv
193.597 121.31 194.313 117.918 188.802 116.107 cv
187.055 115.533 186.645 115.91 185.424 116.251 cv
179.02 118.043 172.03 108.956 167.174 119.066 cv
166.104 121.293 166.634 121.507 166.988 123.142 cv
167.768 126.747 164.282 129.898 163.821 133.558 cv
163.624 135.123 168.72 144.572 168.72 144.572 cv
168.72 144.572 168.692 140.258 168.813 139.371 cv
170.281 128.583 173.268 130.201 175.33 129.784 cv
cp
.188235 .196078 .243137 rgb
f
194.513 137.56 mo
191.986 136.93 192.045 142.164 192.147 144.759 cv
192.346 149.874 198.493 138.554 194.513 137.56 cv
cp
.976471 .647059 .529412 rgb
f
166.642 138.644 mo
169.107 137.807 169.482 143.028 169.596 145.622 cv
169.82 150.737 162.758 139.963 166.642 138.644 cv
cp
f
183.448 135.515 mo
183.638 135.613 189.944 136.08 190.044 136.046 cv
191.57 135.541 186.183 133.388 183.532 134.546 cv
183.194 134.694 183.103 135.335 183.448 135.515 cv
cp
.188235 .196078 .243137 rgb
f
177.356 134.355 mo
174.665 133.296 169.646 135.726 170.922 136.161 cv
172.608 136.161 179.744 135.294 177.356 134.355 cv
cp
f
180.57 146.063 mo
180.4 146.063 180.207 146.032 179.974 145.948 cv
179.12 145.639 179.37 144.445 179.686 142.934 cv
179.892 141.95 180.124 140.835 180.076 139.823 cv
180.07 139.711 180.157 139.616 180.269 139.611 cv
180.372 139.6 180.475 139.692 180.48 139.804 cv
180.532 140.868 180.293 142.009 180.083 143.017 cv
179.818 144.284 179.589 145.377 180.112 145.567 cv
180.555 145.727 180.775 145.65 181.082 145.544 cv
181.3 145.468 181.549 145.381 181.9 145.381 cv
182.012 145.381 182.103 145.472 182.103 145.584 cv
182.103 145.696 182.012 145.787 181.9 145.787 cv
181.617 145.787 181.421 145.855 181.214 145.927 cv
181.02 145.995 180.821 146.063 180.57 146.063 cv
cp
.917647 .47451 .360784 rgb
f
183.257 149.433 mo
183.423 149.337 183.704 149.407 183.685 149.597 cv
183.541 151.011 182.601 152.556 181.9 152.977 cv
179.824 154.227 177.588 149.934 179.096 149.949 cv
179.875 149.957 181.694 150.337 183.257 149.433 cv
cp
1 1 1 rgb
f
193.355 143.79 mo
193.246 143.758 li
193.152 143.697 193.124 143.572 193.185 143.477 cv
193.868 142.417 194.028 141.02 193.605 139.832 cv
193.567 139.726 193.622 139.61 193.728 139.573 cv
193.833 139.535 193.949 139.59 193.987 139.696 cv
194.452 140.999 194.275 142.533 193.526 143.697 cv
193.355 143.79 li
cp
.917647 .47451 .360784 rgb
f
168.348 144.759 mo
168.197 144.692 li
167.272 143.662 166.854 142.176 167.107 140.815 cv
167.127 140.704 167.232 140.63 167.343 140.652 cv
167.453 140.673 167.526 140.778 167.505 140.889 cv
167.276 142.129 167.656 143.482 168.499 144.421 cv
168.483 144.707 li
168.348 144.759 li
cp
f
181.902 125.999 mo
181.813 125.978 li
181.713 125.929 181.671 125.808 181.721 125.707 cv
182.77 123.567 183.105 120.869 182.716 117.686 cv
182.703 117.575 182.782 117.474 182.893 117.46 cv
183.003 117.443 183.105 117.525 183.119 117.637 cv
183.517 120.899 183.169 123.674 182.084 125.886 cv
181.902 125.999 li
cp
.207843 .231373 .290196 rgb
f
189.844 118.561 mo
189.719 118.518 li
187.438 116.721 185.351 117.738 184.311 118.504 cv
184.22 118.571 184.093 118.551 184.027 118.461 cv
183.96 118.371 183.979 118.244 184.07 118.178 cv
185.999 116.757 188.149 116.765 189.97 118.199 cv
190.004 118.484 li
189.844 118.561 li
cp
f
188.229 122.385 mo
187.562 122.385 185.431 122.284 184.276 121.042 cv
184.286 120.756 li
184.573 120.766 li
185.795 122.08 188.385 121.977 188.411 121.976 cv
188.533 121.972 188.618 122.058 188.623 122.169 cv
188.628 122.281 188.541 122.376 188.43 122.381 cv
188.413 122.382 188.342 122.385 188.229 122.385 cv
cp
f
188.448 129.706 mo
188.33 129.668 li
186.77 128.546 186.195 127.46 185.733 126.588 cv
185.216 125.61 184.874 124.965 183.454 124.713 cv
183.343 124.694 183.27 124.589 183.289 124.479 cv
183.308 124.369 183.413 124.294 183.524 124.314 cv
185.14 124.6 185.56 125.393 186.092 126.398 cv
186.534 127.233 187.083 128.272 188.566 129.339 cv
188.658 129.404 188.678 129.531 188.613 129.622 cv
188.448 129.706 li
cp
f
180.688 117.872 mo
179.461 117.872 178.211 117.448 177.071 117.06 cv
175.379 116.487 173.919 115.991 173.046 116.977 cv
172.76 116.995 li
172.742 116.709 li
173.792 115.519 175.449 116.081 177.202 116.677 cv
178.722 117.192 180.445 117.777 181.964 117.27 cv
182.071 117.234 182.185 117.292 182.22 117.398 cv
182.256 117.504 182.199 117.619 182.092 117.655 cv
181.633 117.808 181.162 117.872 180.688 117.872 cv
cp
f
178.343 121.698 mo
178.227 121.661 li
178.135 121.597 178.113 121.471 178.177 121.379 cv
178.99 120.215 180.521 120.61 181.604 121.01 cv
181.708 121.048 181.762 121.165 181.724 121.27 cv
181.685 121.375 181.568 121.43 181.463 121.39 cv
179.924 120.822 179.013 120.89 178.509 121.611 cv
178.343 121.698 li
cp
f
174.809 127.786 mo
174.642 127.698 li
174.579 127.605 174.602 127.479 174.694 127.416 cv
176.083 126.464 176.78 126.402 177.395 126.347 cv
178.142 126.28 178.788 126.222 180.695 124.391 cv
180.981 124.397 li
180.976 124.684 li
178.966 126.613 178.22 126.68 177.431 126.75 cv
176.838 126.804 176.225 126.859 174.923 127.751 cv
174.809 127.786 li
cp
f
168.334 138.379 mo
168.142 138.242 li
167.874 137.455 167.175 136.84 166.36 136.675 cv
166.25 136.652 166.18 136.545 166.202 136.436 cv
166.224 136.326 166.33 136.254 166.441 136.277 cv
167.394 136.471 168.212 137.19 168.526 138.111 cv
168.562 138.217 168.505 138.332 168.399 138.368 cv
168.334 138.379 li
cp
f
192.29 137.385 mo
192.263 137.383 li
192.152 137.368 192.074 137.267 192.089 137.156 cv
192.232 136.066 193.446 135.669 194.098 135.456 cv
194.205 135.421 194.319 135.479 194.354 135.586 cv
194.388 135.692 194.331 135.807 194.224 135.841 cv
193.439 136.098 192.593 136.437 192.491 137.208 cv
192.478 137.31 192.39 137.385 192.29 137.385 cv
cp
f
166.519 131.762 mo
166.473 131.757 li
166.363 131.731 166.296 131.622 166.321 131.513 cv
166.662 130.066 167.273 129.242 167.812 128.516 cv
168.741 127.264 169.475 126.275 168.626 122.668 cv
168.317 121.353 168.155 120.075 169.55 118.895 cv
169.835 118.919 li
169.812 119.205 li
168.695 120.149 168.669 121.081 169.021 122.576 cv
169.913 126.365 169.09 127.474 168.138 128.757 cv
167.597 129.486 167.038 130.24 166.716 131.606 cv
166.694 131.699 166.611 131.762 166.519 131.762 cv
cp
f
195.999 132.61 mo
195.915 132.591 li
195.813 132.545 195.769 132.425 195.815 132.323 cv
196.389 131.065 196.153 129.462 195.241 128.423 cv
194.846 127.973 194.409 127.65 193.987 127.338 cv
192.901 126.535 191.875 125.776 192.028 123.157 cv
192.035 123.045 192.125 122.959 192.242 122.966 cv
192.354 122.973 192.439 123.069 192.433 123.181 cv
192.292 125.58 193.146 126.212 194.228 127.012 cv
194.667 127.337 195.122 127.673 195.545 128.156 cv
196.56 129.31 196.823 131.093 196.184 132.491 cv
195.999 132.61 li
cp
f
174.122 141.472 mo
173.356 141.417 172.965 138.463 174.823 138.596 cv
175.814 138.666 175.375 141.561 174.122 141.472 cv
cp
.219608 .156863 .137255 rgb
f
186.15 141.472 mo
185.384 141.417 184.993 138.463 186.851 138.596 cv
187.842 138.666 187.403 141.561 186.15 141.472 cv
cp
f
169.588 163.662 mo
174.469 169.142 183.763 172.866 190.158 164.502 cv
190.665 163.84 190.101 163.646 204.255 168.812 cv
210.554 222.524 213.176 236.345 208.019 236.85 cv
188.888 238.723 166.034 247.054 153.982 237.806 cv
147.001 232.448 152.427 173.435 154.499 168.772 cv
169.434 163.012 168.938 162.932 169.588 163.662 cv
cp
.541176 .564706 .466667 rgb
f
154.653 168.931 mo
153.616 171.506 151.766 187.562 151.048 203.038 cv
150.129 222.835 151.244 235.449 154.105 237.644 cv
162.83 244.339 177.633 241.681 191.947 239.108 cv
197.294 238.148 202.822 237.155 207.999 236.648 cv
208.587 236.591 209.047 236.346 209.405 235.899 cv
211.757 232.971 210.277 220.689 206.7 191.016 cv
205.921 184.551 205.038 177.226 204.068 168.96 cv
203.61 168.793 li
191.439 164.35 190.711 164.084 190.376 164.548 cv
190.319 164.625 li
187.892 167.801 184.916 169.476 181.476 169.604 cv
176.57 169.784 172.044 166.725 169.437 163.796 cv
169.396 163.751 li
169.034 163.338 168.9 163.378 162.307 165.955 cv
160.363 166.715 157.867 167.69 154.653 168.931 cv
cp
169.705 242.271 mo
163.541 242.271 158.032 241.169 153.859 237.966 cv
149.794 234.848 150.1 214.732 150.643 203.019 cv
151.392 186.894 153.263 171.054 154.314 168.69 cv
154.348 168.613 li
154.426 168.583 li
157.679 167.329 160.199 166.344 162.159 165.578 cv
169.144 162.848 169.144 162.848 169.701 163.483 cv
169.739 163.527 li
172.286 166.386 176.708 169.38 181.461 169.199 cv
184.774 169.075 187.646 167.454 189.998 164.379 cv
190.048 164.31 li
190.562 163.6 190.562 163.598 203.749 168.412 cv
204.442 168.665 li
204.457 168.789 li
205.432 177.105 206.32 184.47 207.103 190.968 cv
210.798 221.622 212.18 233.092 209.721 236.153 cv
209.291 236.689 208.74 236.983 208.039 237.052 cv
202.878 237.557 197.357 238.549 192.019 239.508 cv
184.396 240.877 176.636 242.271 169.705 242.271 cv
cp
.470588 .443137 .376471 rgb
f
177.315 234.152 mo
176.58 233.39 178.193 232.305 178.733 233.579 cv
178.911 233.998 178.795 234.503 178.517 234.863 cv
179.513 235.064 179.811 233.213 180.794 233.306 cv
182.656 233.48 181.204 242.71 175.735 241.694 cv
174.566 241.477 175.26 240.536 175.498 239.742 cv
177.103 234.403 173.749 231.403 177.315 234.152 cv
cp
.917647 .47451 .360784 rgb
f
153.534 236.915 mo
155.269 230.883 li
167.744 235.061 li
172.956 234.549 175.886 232.268 179.474 235.174 cv
179.746 235.394 179.74 235.832 179.436 236.007 cv
178.145 236.751 176.896 236.162 176.343 236.081 cv
174.039 235.742 170.868 239.389 175.092 240.746 cv
181.046 242.659 181.303 235.413 183.074 234.745 cv
184.675 234.143 184.169 237.226 181.503 241.603 cv
179.996 244.078 179.642 242.771 176.204 244.053 cv
175.209 244.424 174.969 244.469 174.037 244.026 cv
165.117 239.796 168.017 240.926 153.534 236.915 cv
cp
.976471 .647059 .529412 rgb
f
119.365 219.041 mo
113.14 228.491 120.324 232.348 126.12 234.09 cv
133.767 236.389 165.616 244.186 166.864 240.827 cv
169.115 234.768 169.431 233.688 168.144 232.97 cv
136.736 215.425 132.575 226.337 150.965 207.947 cv
153.039 205.873 154.388 203.188 154.824 200.288 cv
156.487 189.229 157.795 167.501 154.499 168.772 cv
146.238 171.958 136.469 193.077 119.365 219.041 cv
cp
.541176 .564706 .466667 rgb
f
119.534 219.152 mo
117.345 222.476 116.671 225.362 117.531 227.732 cv
118.494 230.387 121.403 232.461 126.178 233.895 cv
136.132 236.889 165.596 243.659 166.674 240.757 cv
168.895 234.78 169.169 233.775 168.045 233.146 cv
157.65 227.34 150.141 224.617 145.655 222.99 cv
141.945 221.645 140.083 220.97 139.84 219.8 cv
139.581 218.545 141.231 216.988 144.847 213.575 cv
146.453 212.059 148.453 210.173 150.822 207.804 cv
152.875 205.75 154.19 203.141 154.624 200.258 cv
156.291 189.175 157.228 170.773 155.058 169.034 cv
154.909 168.914 154.754 168.891 154.572 168.961 cv
149.026 171.101 142.694 181.579 133.929 196.082 cv
129.755 202.99 125.024 210.818 119.534 219.152 cv
cp
163.676 241.823 mo
154.702 241.823 130.846 235.723 126.062 234.284 cv
121.157 232.809 118.159 230.652 117.15 227.871 cv
116.244 225.374 116.932 222.365 119.196 218.929 cv
124.682 210.602 129.411 202.776 133.583 195.873 cv
142.389 181.301 148.751 170.772 154.427 168.583 cv
154.744 168.46 155.05 168.508 155.312 168.717 cv
157.89 170.785 156.475 190.677 155.025 200.318 cv
154.579 203.287 153.224 205.975 151.108 208.09 cv
148.735 210.464 146.733 212.352 145.125 213.87 cv
141.729 217.076 140.023 218.685 140.237 219.718 cv
140.434 220.666 142.337 221.356 145.793 222.609 cv
150.291 224.24 157.819 226.97 168.242 232.793 cv
169.702 233.608 169.281 234.904 167.054 240.898 cv
166.812 241.549 165.578 241.823 163.676 241.823 cv
cp
.470588 .443137 .376471 rgb
f
180.973 233.722 mo
181.668 232.923 180.003 231.92 179.527 233.221 cv
179.37 233.648 179.512 234.146 179.808 234.492 cv
178.823 234.743 178.433 232.909 177.456 233.051 cv
175.604 233.319 177.52 242.465 182.93 241.174 cv
184.086 240.898 183.347 239.994 183.068 239.213 cv
181.197 233.962 184.396 230.797 180.973 233.722 cv
cp
.917647 .47451 .360784 rgb
f
204.863 235.284 mo
202.826 229.346 li
190.577 234.148 li
185.346 233.898 182.305 231.767 178.868 234.851 cv
178.607 235.084 178.636 235.521 178.947 235.681 cv
180.273 236.358 181.492 235.708 182.04 235.599 cv
184.324 235.144 187.675 238.626 183.524 240.194 cv
177.674 242.405 177.053 235.181 175.25 234.603 cv
173.622 234.082 174.282 237.137 177.165 241.374 cv
178.794 243.769 179.083 242.446 182.581 243.554 cv
183.593 243.874 183.835 243.906 184.744 243.418 cv
193.439 238.743 190.6 240.018 204.863 235.284 cv
cp
.976471 .647059 .529412 rgb
f
215.946 220.229 mo
200.834 226.011 192.721 230.12 189.971 231.596 cv
188.241 232.524 189.623 234.257 191.106 239.617 cv
191.323 240.4 192.098 240.899 192.901 240.773 cv
241.487 233.158 243.844 229.22 239.488 219.631 cv
236.492 213.037 211.297 171.362 204.255 168.812 cv
201.703 167.889 201.289 189.055 202.938 197.802 cv
204.471 205.928 219.8 218.756 215.946 220.229 cv
cp
.541176 .564706 .466667 rgb
f
216.018 220.419 mo
200.949 226.184 192.85 230.281 190.067 231.774 cv
189.021 232.336 189.235 233.136 190.136 235.823 cv
190.468 236.814 190.882 238.048 191.301 239.562 cv
191.491 240.249 192.165 240.684 192.87 240.573 cv
225.222 235.502 237.609 231.998 240.205 227.183 cv
241.331 225.094 240.695 222.777 239.303 219.715 cv
235.89 212.204 211.036 171.483 204.186 169.003 cv
204.119 168.979 204.024 168.965 203.895 169.075 cv
202.008 170.681 201.519 189.182 203.138 197.764 cv
203.893 201.769 208.166 207.085 211.599 211.356 cv
214.684 215.194 217.12 218.226 216.725 219.685 cv
216.632 220.028 216.394 220.275 216.018 220.419 cv
cp
192.65 240.995 mo
191.85 240.996 191.13 240.464 190.911 239.671 cv
190.494 238.167 190.083 236.938 189.752 235.952 cv
188.88 233.351 188.482 232.165 189.875 231.418 cv
192.665 229.92 200.783 225.814 215.873 220.04 cv
216.125 219.944 216.275 219.794 216.333 219.579 cv
216.674 218.319 214.056 215.06 211.283 211.61 cv
207.641 207.079 203.513 201.943 202.74 197.839 cv
201.195 189.65 201.477 170.6 203.632 168.766 cv
203.9 168.538 204.156 168.561 204.324 168.622 cv
211.533 171.232 236.88 213.403 239.672 219.547 cv
241.075 222.634 241.763 225.146 240.562 227.375 cv
237.895 232.321 225.432 235.88 192.933 240.974 cv
192.838 240.988 192.744 240.995 192.65 240.995 cv
cp
.470588 .443137 .376471 rgb
f
171.212 224.593 mo
171.048 224.51 li
167.173 219.234 162.35 212.668 161.609 205.173 cv
161.167 200.705 162.203 196.199 163.204 191.841 cv
164.329 186.939 165.494 181.871 164.496 176.942 cv
163.95 174.243 162.776 171.698 161.641 169.236 cv
160.38 166.503 li
160.333 166.401 160.378 166.281 160.479 166.234 cv
160.582 166.187 160.702 166.232 160.749 166.333 cv
162.009 169.066 li
163.154 171.549 164.338 174.116 164.894 176.861 cv
165.908 181.877 164.734 186.988 163.599 191.932 cv
162.605 196.258 161.578 200.73 162.013 205.134 cv
162.742 212.518 167.529 219.034 171.375 224.27 cv
171.332 224.554 li
171.212 224.593 li
cp
1 .729412 .45098 rgb
f
201.279 224.12 mo
201.152 224.111 201.069 224.015 201.077 223.902 cv
201.53 217.844 201.999 211.578 200.722 205.526 cv
200.147 202.807 199.21 200.118 198.304 197.518 cv
197.045 193.907 195.744 190.174 195.395 186.302 cv
194.787 179.562 197.039 173.086 199.562 167.09 cv
199.606 166.987 199.726 166.939 199.828 166.982 cv
199.931 167.025 199.979 167.144 199.936 167.247 cv
197.433 173.194 195.199 179.615 195.799 186.266 cv
196.143 190.088 197.436 193.798 198.687 197.385 cv
199.597 199.997 200.539 202.698 201.118 205.442 cv
202.408 211.551 201.937 217.846 201.481 223.933 cv
201.473 224.039 201.384 224.12 201.279 224.12 cv
cp
f
187.101 199.388 mo
177.826 199.389 168.407 196.908 159.859 194.658 cv
153.059 192.868 146.636 191.177 141.573 191.164 cv
139.901 191.166 138.198 191.325 136.532 191.657 cv
136.423 191.68 136.315 191.608 136.293 191.498 cv
136.271 191.389 136.343 191.282 136.453 191.26 cv
138.145 190.923 139.865 190.764 141.574 190.758 cv
146.689 190.771 153.136 192.469 159.962 194.266 cv
171.083 197.193 183.686 200.513 195.467 198.216 cv
199.302 197.469 203.02 196.148 206.617 194.871 cv
211.601 193.101 216.755 191.27 222.333 190.915 cv
222.443 190.904 222.541 190.992 222.548 191.104 cv
222.555 191.217 222.471 191.312 222.359 191.319 cv
216.837 191.672 211.71 193.492 206.752 195.253 cv
203.142 196.535 199.409 197.861 195.545 198.614 cv
192.764 199.156 189.938 199.388 187.101 199.388 cv
cp
1 1 1 rgb
f
120.216 231.579 mo
120.091 231.535 li
120.057 231.251 li
122.499 228.147 125.343 225.272 128.093 222.492 cv
132.69 217.846 137.444 213.04 140.334 207.115 cv
142.094 203.506 143.13 199.534 144.131 195.693 cv
145.021 192.281 145.941 188.753 147.368 185.469 cv
148.34 183.229 149.562 181.073 150.744 178.988 cv
151.749 177.215 152.788 175.38 153.666 173.508 cv
154.521 171.685 155.157 169.913 155.557 168.241 cv
155.583 168.132 155.693 168.065 155.802 168.09 cv
155.911 168.117 155.978 168.226 155.952 168.335 cv
155.545 170.034 154.9 171.832 154.033 173.68 cv
153.148 175.566 152.105 177.408 151.096 179.188 cv
149.92 181.264 148.704 183.411 147.739 185.63 cv
146.325 188.886 145.409 192.398 144.523 195.796 cv
143.517 199.656 142.477 203.647 140.698 207.293 cv
137.779 213.278 133.001 218.107 128.381 222.777 cv
125.639 225.55 122.803 228.416 120.375 231.502 cv
120.216 231.579 li
cp
1 .729412 .45098 rgb
f
232.721 232.584 mo
232.578 232.524 li
230.679 230.616 229.129 227.976 228.096 224.889 cv
227.267 222.411 226.761 219.808 226.272 217.29 cv
225.883 215.291 225.482 213.224 224.921 211.237 cv
223.405 205.865 220.65 200.69 216.732 195.855 cv
216.21 195.212 215.662 194.567 215.132 193.944 cv
213.736 192.303 212.293 190.605 211.165 188.723 cv
209.245 185.522 208.254 181.814 207.47 178.284 cv
206.865 175.562 206.341 172.786 205.913 170.034 cv
205.896 169.923 205.972 169.819 206.083 169.802 cv
206.194 169.786 206.297 169.861 206.314 169.971 cv
206.741 172.716 207.263 175.482 207.866 178.196 cv
208.643 181.693 209.623 185.363 211.512 188.515 cv
212.624 190.369 214.056 192.053 215.441 193.682 cv
215.973 194.307 216.522 194.952 217.047 195.601 cv
220.999 200.478 223.781 205.702 225.312 211.127 cv
225.876 213.13 226.28 215.205 226.67 217.213 cv
227.157 219.718 227.66 222.308 228.481 224.76 cv
229.495 227.788 231.01 230.374 232.865 232.238 cv
232.864 232.525 li
232.721 232.584 li
cp
f
184.302 215.946 mo
179.549 215.946 174.434 215.472 168.857 214.327 cv
164.367 213.404 159.874 212.052 155.53 210.742 cv
146.597 208.053 137.359 205.268 127.723 206.123 cv
127.615 206.13 127.513 206.05 127.503 205.938 cv
127.493 205.827 127.576 205.728 127.687 205.719 cv
137.403 204.861 146.678 207.653 155.647 210.354 cv
159.983 211.66 164.466 213.011 168.939 213.93 cv
189.148 218.081 203.34 213.371 215.86 209.216 cv
221.084 207.482 226.019 205.845 231.144 204.867 cv
231.253 204.846 231.36 204.918 231.381 205.028 cv
231.402 205.139 231.33 205.244 231.22 205.266 cv
226.121 206.238 221.199 207.871 215.988 209.601 cv
206.869 212.627 196.864 215.946 184.302 215.946 cv
cp
1 1 1 rgb
f
193.708 186.216 mo
186.491 186.216 179.368 184.263 172.453 182.367 cv
163.345 179.869 153.927 177.287 144.421 179.26 cv
144.311 179.284 144.204 179.213 144.181 179.102 cv
144.158 178.993 144.229 178.886 144.339 178.863 cv
153.939 176.87 163.406 179.467 172.56 181.976 cv
180.298 184.098 188.298 186.293 196.368 185.718 cv
201.364 185.362 206.283 183.936 211.04 182.558 cv
212.55 182.12 214.112 181.667 215.654 181.255 cv
215.761 181.228 215.874 181.291 215.902 181.398 cv
215.931 181.507 215.867 181.618 215.759 181.646 cv
214.221 182.058 212.661 182.51 211.153 182.947 cv
206.375 184.331 201.436 185.764 196.396 186.122 cv
195.499 186.186 194.603 186.216 193.708 186.216 cv
cp
f
187.116 232.961 mo
187.06 232.953 li
186.952 232.922 186.89 232.81 186.92 232.702 cv
188.619 226.745 188.475 220.228 186.515 214.352 cv
185.741 212.032 184.676 209.767 183.646 207.576 cv
182.228 204.558 180.761 201.436 180.03 198.123 cv
178.893 192.967 179.561 187.535 180.207 182.281 cv
180.733 178.009 181.276 173.59 180.812 169.432 cv
180.8 169.321 180.88 169.22 180.992 169.208 cv
181.101 169.198 181.203 169.275 181.216 169.387 cv
181.685 173.593 181.138 178.034 180.61 182.331 cv
179.968 187.55 179.304 192.947 180.426 198.035 cv
181.147 201.306 182.604 204.406 184.013 207.403 cv
185.048 209.605 186.118 211.882 186.899 214.224 cv
188.885 220.177 189.031 226.778 187.311 232.813 cv
187.116 232.961 li
cp
1 .729412 .45098 rgb
f
176.519 175.109 mo
171.239 175.109 165.931 173.949 160.746 172.815 cv
157.646 172.138 154.442 171.437 151.282 170.991 cv
151.171 170.975 151.094 170.872 151.11 170.762 cv
151.125 170.65 151.23 170.574 151.339 170.589 cv
154.514 171.038 157.726 171.74 160.832 172.42 cv
168.125 174.014 175.666 175.662 182.976 174.029 cv
185.33 173.504 187.443 172.704 189.681 171.858 cv
193.093 170.568 196.96 169.106 202.854 168.113 cv
202.964 168.095 203.069 168.169 203.087 168.28 cv
203.106 168.39 203.032 168.495 202.921 168.513 cv
197.067 169.499 193.219 170.954 189.825 172.237 cv
187.573 173.09 185.446 173.893 183.064 174.426 cv
180.895 174.91 178.709 175.109 176.519 175.109 cv
cp
1 1 1 rgb
f
117.042 224.733 mo
116.874 224.643 li
116.811 224.55 116.836 224.424 116.929 224.362 cv
123.561 219.92 131.403 220.17 137.129 220.352 cv
138.412 220.394 139.624 220.433 140.645 220.407 cv
140.756 220.418 140.85 220.493 140.853 220.605 cv
140.855 220.717 140.767 220.81 140.655 220.812 cv
139.623 220.838 138.404 220.8 137.116 220.759 cv
131.444 220.577 123.678 220.329 117.155 224.698 cv
117.042 224.733 li
cp
f
137.815 237.339 mo
137.721 237.315 li
137.622 237.264 137.583 237.141 137.636 237.042 cv
140.684 231.243 145.779 226.968 151.982 225.004 cv
152.089 224.971 152.203 225.028 152.236 225.136 cv
152.27 225.242 152.211 225.356 152.104 225.39 cv
146.004 227.322 140.993 231.527 137.995 237.23 cv
137.815 237.339 li
cp
f
240.98 224.971 mo
240.956 224.97 li
235.934 224.372 231.429 222.434 227.073 220.559 cv
223.034 218.821 218.856 217.024 214.367 216.374 cv
214.256 216.357 214.179 216.255 214.195 216.144 cv
214.211 216.033 214.313 215.957 214.425 215.973 cv
218.968 216.631 223.169 218.438 227.233 220.186 cv
231.563 222.05 236.04 223.976 241.003 224.567 cv
241.115 224.58 241.195 224.682 241.181 224.792 cv
241.168 224.895 241.082 224.971 240.98 224.971 cv
cp
f
183.777 237.843 mo
183.681 237.818 li
183.583 237.766 183.545 237.643 183.598 237.544 cv
185.033 234.867 191.562 233.686 199.829 232.19 cv
206.701 230.948 214.491 229.539 220.788 226.94 cv
222.446 226.256 224.096 225.462 225.692 224.694 cv
228.625 223.283 231.659 221.824 234.863 220.984 cv
235.751 220.751 236.722 220.56 237.749 220.358 cv
238.381 220.233 239.03 220.106 239.681 219.964 cv
239.79 219.939 239.899 220.009 239.922 220.119 cv
239.947 220.228 239.877 220.336 239.768 220.36 cv
239.114 220.503 238.462 220.631 237.828 220.756 cv
236.807 220.957 235.842 221.146 234.966 221.377 cv
231.799 222.207 228.784 223.657 225.868 225.059 cv
224.266 225.83 222.611 226.627 220.943 227.314 cv
214.606 229.93 206.793 231.343 199.9 232.59 cv
192.065 234.008 185.297 235.231 183.956 237.735 cv
183.777 237.843 li
cp
1 .729412 .45098 rgb
f
220.884 235.9 mo
220.793 235.878 li
216.875 233.91 213.854 230.648 211.189 227.771 cv
208.86 225.257 206.66 222.882 204.187 221.65 cv
204.086 221.601 204.046 221.478 204.096 221.379 cv
204.145 221.278 204.268 221.237 204.368 221.288 cv
206.907 222.552 209.131 224.953 211.486 227.495 cv
214.257 230.487 217.123 233.581 220.976 235.516 cv
221.075 235.566 221.116 235.688 221.065 235.788 cv
220.884 235.9 li
cp
1 1 1 rgb
f
173.034 237.31 mo
173.001 237.309 li
169.183 236.694 165.771 234.673 162.473 232.719 cv
159.232 230.799 155.882 228.813 152.175 228.192 cv
150.298 227.878 148.348 227.919 146.464 227.961 cv
145.609 227.979 144.725 227.998 143.857 227.985 cv
133.112 227.812 127.175 223.522 122.404 220.074 cv
121.514 219.432 120.673 218.823 119.859 218.288 cv
119.766 218.226 119.74 218.101 119.802 218.008 cv
119.863 217.914 119.988 217.889 120.082 217.949 cv
120.903 218.489 121.748 219.1 122.642 219.746 cv
127.366 223.16 133.246 227.409 143.863 227.579 cv
144.726 227.593 145.604 227.574 146.455 227.556 cv
148.359 227.514 150.327 227.472 152.243 227.793 cv
156.024 228.427 159.407 230.431 162.679 232.369 cv
165.946 234.305 169.324 236.306 173.066 236.908 cv
173.176 236.925 173.251 237.029 173.234 237.14 cv
173.218 237.239 173.132 237.31 173.034 237.31 cv
cp
1 .729412 .45098 rgb
f
223.137 220.974 mo
221.501 220.974 219.871 220.54 218.453 219.702 cv
218.356 219.645 218.324 219.52 218.381 219.425 cv
218.438 219.328 218.562 219.297 218.659 219.353 cv
220.643 220.525 223.06 220.87 225.292 220.299 cv
225.4 220.271 225.511 220.337 225.539 220.445 cv
225.567 220.554 225.501 220.664 225.393 220.691 cv
224.654 220.881 223.895 220.974 223.137 220.974 cv
cp
.470588 .443137 .376471 rgb
f
138.53 220.283 mo
136.17 220.283 133.889 218.964 132.714 216.917 cv
132.658 216.82 132.691 216.696 132.789 216.641 cv
132.886 216.585 133.01 216.618 133.065 216.715 cv
134.169 218.638 136.313 219.877 138.53 219.877 cv
138.551 219.877 li
138.663 219.877 138.753 219.968 138.754 220.079 cv
138.754 220.198 138.646 220.282 138.53 220.283 cv
cp
f
178.066 225.758 mo
177.968 225.758 177.882 225.686 177.866 225.586 cv
177.85 225.475 177.925 225.372 178.036 225.354 cv
188.937 223.69 194.665 212.24 198.455 204.663 cv
198.505 204.563 198.627 204.521 198.728 204.572 cv
198.828 204.623 198.868 204.744 198.818 204.845 cv
194.99 212.496 189.206 224.059 178.098 225.756 cv
178.066 225.758 li
cp
f
178.976 172.916 mo
173.532 172.916 167.768 169.932 166.547 166.444 cv
166.51 166.338 166.565 166.223 166.671 166.185 cv
166.778 166.149 166.893 166.205 166.93 166.31 cv
168.118 169.704 173.863 172.621 179.222 172.509 cv
179.336 172.516 179.427 172.596 179.429 172.708 cv
179.431 172.819 179.341 172.912 179.229 172.914 cv
178.976 172.916 li
cp
f
152.633 209.955 mo
152.491 209.896 li
152.489 209.61 li
155.023 207.037 156.639 203.643 157.039 200.054 cv
157.051 199.942 157.153 199.865 157.263 199.874 cv
157.374 199.887 157.454 199.987 157.442 200.099 cv
157.032 203.777 155.375 207.257 152.778 209.894 cv
152.633 209.955 li
cp
f
208.868 251.475 mo
152.045 251.475 li
148.992 251.475 146.517 249 146.517 245.946 cv
146.517 205.163 li
146.517 202.11 148.992 199.635 152.045 199.635 cv
208.868 199.635 li
211.921 199.635 214.396 202.11 214.396 205.163 cv
214.396 245.946 li
214.396 249 211.921 251.475 208.868 251.475 cv
cp
.521569 .529412 .537255 rgb
f
152.045 199.838 mo
149.108 199.838 146.719 202.226 146.719 205.163 cv
146.719 245.946 li
146.719 248.883 149.108 251.272 152.045 251.272 cv
208.868 251.272 li
211.804 251.272 214.193 248.883 214.193 245.946 cv
214.193 205.163 li
214.193 202.226 211.804 199.838 208.868 199.838 cv
152.045 199.838 li
cp
208.868 251.678 mo
152.045 251.678 li
148.885 251.678 146.314 249.106 146.314 245.946 cv
146.314 205.163 li
146.314 202.004 148.885 199.433 152.045 199.433 cv
208.868 199.433 li
212.028 199.433 214.599 202.004 214.599 205.163 cv
214.599 245.946 li
214.599 249.106 212.028 251.678 208.868 251.678 cv
cp
.823529 .831373 .835294 rgb
f
185.164 225.555 mo
185.164 228.154 183.056 230.263 180.457 230.263 cv
177.856 230.263 175.749 228.154 175.749 225.555 cv
175.749 222.955 177.856 220.848 180.457 220.848 cv
183.056 220.848 185.164 222.955 185.164 225.555 cv
cp
f
180.456 221.05 mo
177.973 221.05 175.952 223.071 175.952 225.555 cv
175.952 228.039 177.973 230.059 180.456 230.059 cv
182.94 230.059 184.961 228.039 184.961 225.555 cv
184.961 223.071 182.94 221.05 180.456 221.05 cv
cp
180.456 230.465 mo
177.749 230.465 175.546 228.263 175.546 225.555 cv
175.546 222.848 177.749 220.644 180.456 220.644 cv
183.164 220.644 185.367 222.848 185.367 225.555 cv
185.367 228.263 183.164 230.465 180.456 230.465 cv
cp
.521569 .529412 .537255 rgb
f
163.606 218.784 mo
163.239 218.612 li
163.275 218.534 li
163.645 218.7 li
163.606 218.784 li
cp
1 1 1 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 25.0.0
%%For: (Tom) ()
%%Title: (People in programming_01ung-03.eps)
%%CreationDate: 4/25/2021 12:06 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3Q<Jcg^i-^97&LC^>\,bk;*PoT7FO.I"e'"rrTh\0NHtnGMu]d`h,m?$C?\Cl%Q8-aDc=NS6plVO<lVXgT^5;WVr,qX7>)
%FoBgAY1Z9:2[hjWi+h+5s-oI';*$6dg)nO`2Eh1<lPW'6?$o)akSBnCpG/maR/$5u2;bto<gj9dC;/>6XB!HoH=JD3p*3X1mH-%[
%QX&fmZ!=G\:T]q(q.k4fA_TE'/<u-_ebW"CR;t&$!R3EHq7$HD!<W0mE;+2G#!gjNZO-7)DL?isE,1^t#uLISoDYt==_]eZ\RqgE
%q)F:nY&$0$FgbDqM&u`N;G)^/1[nmh]m,ZTQ(+MmP^3[#2J5sE@Qq2,6V)jdEhFSHrb1k`pniB]+S`9n11ZGgI_sE#b"Ps4SV)Q;
%Cr6ep3*OJ1iFbNlTQ`5CO;T5T-$WD%WKhPL,&'p+1bE48(-E--M0o[P#;+;t[dO9g]'\O1V?_3)RX.Zl\G31*r4\DA;9Tc4FfENK
%H8Ae%#qE8=TN9MepomaNerM>X-HOCRQnPhN>:gQ45b34LZ^`8R1)B+mq8?.5IT^K=NE44S<5MPU$X;;"h<a3O'[bu`fuSWE=?3CQ
%&>9U)jg\@6ba=-gK,*.,&#(b[5Zt5pQ6!>(.[?A5%3c,*];V>(0Z<p9l*=8kEdS7@K'u5Lh5ZeKb!]M[jb^_XFiIqkq8%QD?JrQN
%/62fVFQ71SQPmE$g!+!T)jS9Do`isn^oseHjq[(\jm&]?<ILRu!(Eq8Gp0uV?56cp<=n[bs4\4%H"RBD(At[BYI83#Q&Fols-m.?
%<6pK%P@D7/Xb1'jWVuEAn7=L86QIn(<6sY,#CI&SalH(%f`;A0c[%;lIYE"1C[c84pS!q*_b^UAFJJE/=K^3l@e!\CN!H$.)R*'7
%(;-65LI1'M*ah4OC'o)gYG=&`-'25if(qRorLRfeYBEP$NEGS5F-U"DXaqMP,6oQgUkK<pRr@<E>g&DUV9=1fG#c\_<pQm-<U-Md
%/ViQ%r#Rc6J"rY*c2N]S33Fl+'lZ"/Coc&:WckC$22kS8lrC3C@.e&R!$@24X'*Ya*ZT*l6u0=qQt<7U/:_LcQOlNu?91lVdesM2
%hb>/C52/I+%Ss_N;\$]Y/UXU'9CUtIC*f>sa`M;CqGZ%,"HQq@6<N>YV9fLqMm!I@p2U1l7JDk4o4khc\5D<Ba?cuc/EP'om#OWB
%35DGL@$'*FOC(B\<j/CO>)d.e#*g'\MnVu'+.Rc.4RHrrgT]!&Ff[Adf*oo"I@(&5Sm#>Si*5JnWT%#%B&iOVdf\"L:J1kQ>dg'4
%W<M25Hb+V06'MVrKnY*:;qJsKfon#W,>HC=(;nIt-2@1GG@qF!*rN+;(:V-QcMW#fXoN,9s(_Nu&,$8M>cH=r5CW-fAbAIjW`1V#
%M\Yd#H7=mm;m+u.fsk&+lnL2/O=Q.$5nD7?=uZ?SB'pUe?d-B*Q-3jAQ/%@4FiNY8`4'!^,p%V\35.mMiorSW-uRUo?X(KArl7:4
%[#AV;iN*LSYaB2_99<iFcsX)t.b-(5*J_<6hI/-?0/d462it4TX*u+FVZ>PWfF^Ya0EZs49"roP&XGaEq_WXs4;rl/Cjp>eO7&Rb
%KCMJq#6A_8C+s$+<f'.%/3>@^HMQ^aI>2\MO-,!@A?2hY^:5K/.e+>ogg=a=d\'I]/Td=V[f([\a2=l9;Z1fa7e.SK_guXf>!,8"
%[UCm(,<q%(`Xjqh$VI=2/o`!i<LTstZe9>CM_m+=0!C//bH&IY8R/S0cje7K('_(MZ@0/ZY$L/7oN6">0[S(-)ZRF)?!K$hUmB%g
%\c4@JZgR-U/s`Js7rmXPh!Z*%?.<rB?cm`G;I_hT)is+#A%D,3m^Gf54I-qIji1f@nQ7Ec=>!Y:59@uWgU/u/L%XH7'('bPS^C[V
%j+n3RcHE=r`\gZ3K%N'nFhZVQE40eh7\c3KXS.t.?Tf`lBk5bPMaju)7u/C$C5'LW?7\<;(h0pT(n;bgj'd`];N*4Mf6bL$lhb4g
%_s6@XbV9Oo64:6!Bd5fR)Vg/bE&W%n2MTkHIL]u-Ls*fa_&_d5>,jE'ioL&^IU3$Kn$U<KqHC;TB]^d!#!0"%a:>;hZCHH.NIP`o
%8hgg*Z&GUpmEc\deLtt=@Q'i/&"[p([<X?]EQ#25<5a6df5i1%Pr5!p@]65aD?mYPk34SLpT*/WPAOg<+2_(0+&6saZN';_BoRm+
%j5l;.)aY'Te`6Y>\/8Np!B5LW"m9gs!4dETH$*&%``lTX)kJ17TafBW>ka],?qWe*Qp<bYm`EVJ-Cn;P$a/iBY_C%7$=+1k[!GT:
%e?nk1%Oo0(2./C)0lP1:bW?@Umo_c4@>i5C$K>SU]>aVX&Qp,e35;8O,XLV>lf/bh@0hbYrCgd]$$kRFls[3faW@=h)B%P_6JVN&
%0i`6Qp@kX(^D4rFX'D@pI=,MaDFD(gA,/Ftb=:<IEI>uMA#uZB@1O4@\O*8QGUK;YM,bK<^c'&Y,i/Z>i=68:Dfs+NDREf__YRO?
%_rKXAYlDsclqX'WqWlp=][JU1mDd/kCS^fPXH\%`*BhCHbD"@$@2Yhi-Q1j$C'TfFKPtf7+7:2t;=<3GNl8ul7WfN.`5dc"j!4)h
%'5?GP@JBU`r5cmK=LoCC\.^N?`X"]edKFt72qG-PPtJ<O/XEB-l9N<.``hTi^cF#FqiR,XPuu36,K!lY%7r8p_B%9kGi!3H_aoKP
%3'KA=,PT;M%jtA8FZ:P1/fN]JKYGiG^!s!GF87"dZETh!NC2!pp[qX0!5n6jYu8f8*;geWo#0`>QUtpJN3)&skC&-L\;66__b5--
%:TEHM*r-Y.iLnRa5#,A!e'Fo3qtlPU4'*hpn/@[F$Ek6p]#<!n_Ds.lL5;8<S!mgQPcGL>Z1]b!Pf$r[r4Y\^%lt(P\3rqgBi44a
%@ksZph6d$[KCTn_8j%0*.#5cB@;mZY)7u6eN@mB$L,e>-T^.=::2:T&5@\CsTGq&9<P=r+Do=F_*mT\10sV9@Q=WWm6aNn@p#^GC
%#ma3lS5<n]l7mI,Q+uL2`)99bZ%%(aX-@L2prtn8.lpPtYB[GomSr_[=AES_UXM1)\laoMqLC3TW,u:Qlq_bbr4Ud?in]6X..OZ!
%l@"&m'BOFR+i-p<Gh%]>i`;<67=05p01p]+(M.\5c[FH(&i4oqpS.RU<K-[H[./>NpS,TJ#^9Z09)cQk7>](+IIbc1]GDmFE-&Z.
%j\PXDnQqGWFBnQK01nq,HO';>k^U]\PYq-mJ,(Qgrk>J^`+*?-?/<1tV7C61,*)Z^).B&ahW*%)s%*kY(N%3]q!FN[]`JK"l@,L3
%h9V[M2:"7pfGh0,T71.)qo(+C2nl$Y2fndrQ7uRE<m.PK2qO)U(Co39hp9/HnVUns>G;sXWN<p=eo/*OrK^)ONH-+skLnFc".UZ?
%%N>5PZ!SH%?ZX59D=#l;qR'Ep1\PV%enJs8<ifALcBd6[[l."5`bmBB>MDF?+(oA!Y;YBHD4I\e]in=;2U9k@KNCgR]d21oJ&h8G
%5J%G6P_C-]s)=*j-.sD"mRDDq)nG!HoV];u/<Q"*dBGK40@l#kk'Dt15G^uGGYtL5^7_iMIpe(V=R#'W?6H=H_\-BtR(@&:_Lt]E
%m('lW>TIXVWe9R+ME$TEH*DVbVV9LiN)4f(HW40!juEc3V(Wck9"3bt/Hu/+_e8ag)1G+&4?>2L^%JEDloe"$rkJeLPg=oNa1N2d
%%\*ZYbK>X5"o/W%?]N!sOAY]PZ'QSZWc,i,+6(chpk;<:4&C6rH;gk&@._%flLjX[\[<8%>2m-$(lhuU&C8u:r!+m:X-]8V2oTCA
%DKD/W6%Z$k6sjohC\"&+Hf?`1Gj^YX]+]lCY6UP#/3^4lBj\P%9PRr28-bHVZ#Z3f"P:=Fo-?1Do*toFHPTZrRc:H7PT-56*Td[C
%h@oYMq>r6[a7?#7jfgkohf3Ngh@f<Dl/,tGTUbn!QDAp!Gl;j!rqdY#h#?a7htqade9Lq9]`*9T0mpY5gPqE/Z2RD\,-Cnbg2cQ0
%EP1EqT'79!q,VuV7:FhiM;pJNs"O=)$>[BMb\`;/;<(O'>oQ4tZ#CET^6$BU^uM-<SJXuTQ^`0=6`E;q9$F!YO(,Y)rP!Y^0,?(]
%O@0hM+_6ijX39BmeT.q*>V?kYX7]_okAnOdN&;YdobYm!dS25em7f7b0Kql`//p+*JY6*I7OJs=%,[^WI_>m(=D@3A.4KQ*<tE9C
%1E5XPQioK[ZJibV_[64:Mi1W2\5o_n.W:*K%]%#%Y0j7V^n;gAdUEsTNa`tD?a5dWp7N=Z]lq=]%%M;aN230'P<#B@gl2$8d;<b1
%?5HMmOd8#!1)`q+NMh`T;b#drU[aSrGfj\^AOHP+-]#^*OdnY1RA9;:d<NfI4D"0*Vi4)fGZF/f9pKg)nD?+reYj5SODEA+cP"2P
%Rng?.ZCZT0NIP`*J&PhMhIKIgg7^6gA0NQOF*DUN%!$oG3"6YUg%]B/2clQ8dM_`edO9J;^UVY/h)JU;f6W%%*0#kNr$bE\+,`i=
%=b.G,ReS*KX^#T^j@VR6nr[s*0ksD#;p/k+R#"hj@'j]Cr9DN<UKV1PSmC0++qs"p3245DE@*RROFK#NNiOjn:5$7j<LApp?6^L2
%`tat21nH$J_f>@G42-M-Y.jQ&<+"o*ji>o<7]K*..Q7o3VrMe"j)b(+R-ooRkD<n`eVf>TZ&(fK(CRJ_1i/@+oSQA#YuheW,+bLu
%0^sPBQot9`l)oN*9BH%]XQ..AT@2Q!3JTg`b5(oko6YA8*Y1ESK='NKeZf<mfrJAOqL)TjpMP5U6mK'@2mA?5B]B]Y?P;N$p(<a;
%%n:7&GSlLg`Zqk\#jq*/b]neaO%*f8K@tio:W:`P&B!2q;Ba=/;+lhdLr;2&Ad4%Q\/H5oE;hp'r`@&uVbh#J1S3P/kjHAO`d"?U
%^*[LQ$:Wt^7<bk#d<VllgoM=,[Yg>tY5gU9:c)&RMT5=Gr[]kMlJULIR93O[+Jtj3UgC`k_+1Rn$3Jh`34TjuL.41aWO-R:o?H("
%(`QiBPtg3CLLi>_!aXfGd"ZXE]JZ.SB)_(o<0!ZW8i97;a'3h!G_ar-@pSOECKra`2%Y=\!%SlY*;#Qf?F:L9@(2kP6jLKsF>Mnk
%K(HHpT&ZbL5Auh'AW/"b]?"VifHlQC%Il8`SA#W>_uK8L-_kMPJ&fcObc0$&0'5Il^LO![PjLBFBHbsXLq>WKd)Mi7]/<c*64.mS
%`XC$Wq.06I_Dk%+kGWlMNZ-LQN3h#EgKrkkfoQ-0([[f1HAT\^Gg"9Kjtc@jQ^DB/2n$At/E3a4c("6:DP[2WK$di)UW@Y!1`)(T
%nR-5sR/7nV\R/\@)%YoM_n#;VDEOF.&*LsM\aaWV4Il;^_mrkW*ol57Yl/pCC(.Ae4l^8c_s)WTO(==F/umfL#'O6Pi`:BK]e(`h
%0)RXH5-3JA'Z=;J@eZca`]\9FrU/&Q.8SK-rePQ\ks`-d/Vn1)Qd3dbr:P)&J?$"^^=<(c'Q\k0[Pl"j+L^:h>]7931)fn]n`8h^
%87h5+I@5:88W2O:)H7bd/YPrWeI3V8Du8SddGnAlgs=DC/'arq)/GZk6oQZD/=(j[GQg$9S_%EI7bD.rQ05VV9r5@+C,C!sk"_F\
%h)iC<,Jl`)T8Shm-FfmH+ro;b>24hD<iqH5DhkY/UdH(a[-AI<Hnh5@@em,S`aSC;QC$A[oF%(EZgUsMX6-eL*V$cp_*uXn+IPlC
%/bNd)Ejn'ZZS&&Z,;!u,c&K'?EAkkD\T'D!.uAhijnO#jSkc@S97/!2)unKhQ!ta4@WdT([,]AJSD!jqbV%j+j?q8]rbP>oQ-pOn
%;DcN;ri_j/^J"Hfs&r3[OJ=llfmPM96*=O/?JQ<*<`-CH*[/Y$_D&[>Fg(I`[Ym3W'8U;>4^)gVrEXATf7PY+Sm$k_>.qpn#tK2q
%B8"1FYO3#DN_Xm@D,+hIju>>\KB'->a2FCu3'`K+AE!S,0=ZsaJ;e,EUE(J@R+7#5`crhQ(LlDf$`E$s#4Jd.I_e>J6%/ZT&_uM+
%KD3SN`n*/nN!lr>.c;>IiA7]'bt)Egp[K/W\?ds")Wo(_M/K$UCdE]55+;fF?Iua0_9]BDJW+uS8`nZ[3E@@k@cRqH:&aDN.>5Xu
%2J@+"aKAdMn+O)E^Y2E[j[DB$gf_.\7+uX?N*A$FrB#<&1.I7^L&4[l@j0F-Dl?Yk#'^((0qC3T1=8`QJ*#Ou?h7`N@>c-Y![(i?
%GGHR)%"F@PGW4JfpEu/=4l/'$G:K0G4m5YrW>_N>-1qUh-)&%cIBT&#0,IFD9g]bs=DJ]bPf'fR=E@e:Bqd&[^?2uZWoO]2%fX3\
%=iO0MWNhj#0XImdRJfW3e&TaMTTuYYadi[3StNd-.+U=MofKG<1UJ;8T'AJ=k:2ILgF+e*s'4&\3VDnM7gnb)XG:3M*]\qMIdTs)
%IG?Up&lXe3Cia.],EB&;+G$VYb6^91?m4ES!QS:]e*kI38G53W"Y$TD`qLVSAhN-#K+uf(m`%C\Vq#P@ZCZu@(B=2'OJZ'eFmX"?
%;@"pC,++@_Zb:,8!74R@S-94+/RF_mr0Mp4[o]?^4Rq/l\HRKOPEhjJ$J"`WC:2o5>buUbQ/#rUT%^@aJ;6ETVSoZR\T56&.<9D'
%kY\`k?A-'tq5Z,40@$FMOs"-V9$V?_XTs9q5q`RXjjlE/9'Md6s5>%em"`3$npU&_9"gY36N7M!nlM+ApBl=9/"]tD<%BD'G9!ig
%4g6-X=.gdc.u"Qd;F1e07pVQ@ZZZM<SJ%!"9%-0T(?I?5]"aPJk47-G?]3CeC9CFV8"-GZYD`?d1?_AV^FgUGG68tOC@eZsYC^I(
%kZ@;I'FigHpu]U]s3jk!iR8TnI0\<"G#RioC8o'7nDb\k#lbYO5PDi+FO_7`/*reQ3;1YIi^'a(m)mpp\QC9hO@=X?#Xag[,7Y*?
%FG6GJjo*k7X&]S0;R7/Id?edn,Z*+m7<7n].eN5[b]0DfnZ>pH0?CGpM"l.0,/eTl/ReuJ`DT<KT&?0!IuF+<&gMi6/fO*AC^o2@
%457$H*BW#\ZQ2-^hs>/r_t1poG3j%ccLt;/m63Y#d4Ng&m1arp?/'GYK4_ZkDe"\Cch/hfV[o)Qs8'=m=DmCu%N@uI;u5-Lrt1i!
%8+uE3.^ls<&+Ei)h#,7LFgcBj.k>fq$nrD9-cA6dY0^W5Nbd9.Z/[p;mG\B*naTu,Z:tl/20@RrK/GJB;t]+o8g<TN"7)cJ)%j;j
%dUf1O?rJ\1kACcMj^PQ!'YGHV,;VN*/n2inJ7JbMd!aZe&&)g^Sh"NGH%-):)U1>1)u_fiJpHr$"WI?uTDoqm]*WE<PU^FkTDt)d
%F(CgQ"sp^G[3m(Wq!Tg4pZdU<Bjif`B::IL&C^/sa.s67m:*uEj-g7XYp#`'pm-r!gEmJEMfthn*JGAeZ$^q&2ZXF4Zom.l2l/eu
%J/CGe"Jkh/`2Df$[aGVm&YM<i<N6HBQ>HP;#P8T_ohKiGO8S!ZT<="mZTi?QX(=]ls7f!#)miZSP3DRR^3*AU1tQeCONQ)+@K=38
%LgMCUjT&[enPa(L^WC_F31Q"IJ$JHgpRQ`;f:kVK3VHb]Qo^`4QE-?kfA+0lU8bIb9**\nUHc^s[#MdM28;Y#pe)$hbtM1WBDGT'
%=hRrZ\8Ds<)72.;>V:G_aX7p(,70]mpsEI_?#&FSC89\-('h$Y-Eu"3A8iYri-p`s*2nkg'!:C.Y(o9%En$jmGNET=\i=Y/'HVo^
%q;C'le6%5VL;?HRQlUQtoq'l@''GRfdjNY\8-Gf`LZq:=PTRs0`+D,6@'8g.4;\s3((Z>6Ee!Bq($?ELf@AB=A\m<D\%NW[WL[*8
%^tukT=Ari?\n:7^E-0nQbl&@n`m1VZ8-='n(X;o)l#Q8?<pH#\(9J*oSQJC7gN\(PVTqlYaB5<V`R#mbV\R6ZMZ(;s^[5r6)Nt<p
%`l7],NoPY13.gTleP3<:/&5P%"A,(6a>oC;ToJ(WO=!\@AR!bbiVX(Z=fkkB-WdipjXuIjK5.MgC\L*d`^.;j.+Z-J;b+fVS#MB6
%WL5h$PtT@D*AhnS@'^7M(G!J9^sbu^&VjlNVB$<4VfMImGr8YVV!,8#Pb,If(IOT#I/$qQ@GnKbE)9p]QJqLceDP#JLg1!1VlhO(
%b,Db;5]/HDiBY&G2_FNOpuHn)=T`2i\ONo-0E%]7f@466;(]8oWX_1+.D]N)AeCsodU4a]2+eu'>'>g`X$Mse$uZg*^t!IJXE"[g
%Q3sT\l";sFBrR$;0L0aA;Pfaqd!B&oM\3P"Co^S=qe;j>U,fX]X]VdW9;.3s?:acUZ&TW"i!Sie&9*@iEoZ%hUcX6c*C`N$dO_58
%j\d_tR"h0Z1AnZKoucu?X'?-.quiGi3P_hNaZ.3e(88WTEg+0>)gU8^@HU8M'YbC+0dYG)T%V0WKTiY0dir*b>,O`o.h1^'NE=)l
%,O:BSR3>GD95D)\[p1/YeC`0#)d#A!<m%dJI$8>N#=75RKN$&/$LJ?*f,^l0e>hoa!e[U*=1>K+>%ojpTo!qI2*Y*aeNd/pdS6d4
%@s4pIljrJH@C9>k(=8(:R%s&-qsAnO/RqtEj8+f!g)@FFk#5l2XhrJ-gG.V(rXa8bn<BdHQ>,'e$+SVdF[!LDEk(,t>DLc9r,L>:
%rP3o2Y]d=\^:rSg^8"oKGP4M&;JhRr)XD=JH=4bok?I'5H*2NsXL631M!nc(3NC[,b9`V:A;fOc\L(G1:,SXo@l.lG"5OWbn7b^!
%Z+dmmH'\JZKGKPAhn"+B?2&J7,Q778O0-%&lfme/]KPqXABh::-ca(=&H-m>7LF"I#O-bYQA$A,C7\H6[r9rSDKrlRaKf+/OGJ@L
%kdL4Pb@\t>7p7;?Z1&2B2M=FOq&ED^m0H,XSQ_*k<J+]/kk%'$2tH'.%6P'EC]=bSpC_0J$!u\nlYSEG=FL4'Us?CD)]K#bkqj2P
%"OjDKVJVV(aQL%t\O$U,a]/['1MG)<U7!7?["^]H8Y-G;4O:[t/J^s\)i!M8Cg/fS./Kd%VT.jW;@jC_0I![L"dtU]G*6Q`]_+qA
%mE>9om?tKrmQNDa>+oU+.4*-<+<^ruKB5cYpCjmYj(Y?i9KlIVO@@?VcLc(;B^PjN.l+>HYBT4Me8-8FUE2Eh(Y`#u0<3FLig8qU
%-A^]DL0f%`RG+:9iJA`OA<7CF4GTHhb2kN'df*>h1:DM(=JZ[%r?#l]QYP]Vg?Y+X#CJB5i.^e,dsmr3d0L4>os/nX?+Ho2=HMmR
%eF!M]c'U6K_Gkda;e7i)d+\tS^RnSdFs!UXBN+]QJ@6`#p;Z+':G0F\jgs5\JdbkKAt&q4/(Z6*o?^K^mAYQCP,i`2PKeM+m^C9_
%&pStm2K]M(G38aH\_Nor38bM'*iEnANAaTYFO:TR_(ThPYeGAu%.IC=36DKECUolNl^,,&l\<JI6kG)$k@dXZ\htDge9rkd9aRFT
%Won-)&8_pbkfIWSg`Qk\#1o+4XB3/<`'X'r;C-]`lTkrmQYi:GF53itRYR89`9(&F@_nGbG5=%H2/;V5Q#'trdp%=[`is(\mf)DW
%oEdl'(`-Kn;[$S].3KO/g.6Y,.TTH,gc%'[>U>)-T;D8`qmq<T;n3,3.*a5-,N0%u-?\)d`:.t<]GEm3UY8>j^pBl;PuLU_&Wn5u
%?K.j3;FS6b@KuQT"V$4m.Nko/%-mmj^6gBIPf]cE3Utr:S8/.`.$sL68tpn",_=n@b'L<i\u[;jU1N"!W2Beu="b7RV+.Ib\]-dc
%R3'$jYUmS[YEs!0`fFC_LiF+Kn^1A&k.Hj-PoG.(&ShLPQ>>fu4`oS*m\7JXhp>U8GbGu*-.@Gj2R='T(V+PTa'^:EcMBgA2#AL%
%,Jo5#_C4-!%3T:B=2,7+1T:0S1'2K`B,KFI@5&ZHCBHBnX@B'aqt=t;D8eOkE2;%pqRK;`V">;0&J[5$2*pYL2-975@>#s.M;;n9
%r1m<i*m589N$dt+0?*<CTRs>\H*@J_fl@[`5ja"R*7[\@.+D20`mg'Pp3F]-;@8KrOQ_5j]`+%F[+6!B_BD@?LAHmR#7MFFp^$Y#
%$m#*_Im<aeio$=!l4*N_n(%7l9*ba-h7\`PTj@<8Ga$fDPTOr\Dt_EqG,pmCrX,#E.asDN!:*-7'38fge>jG&:sr3jC%ihqg92,H
%/nJAb-76DNNEU`L7D;csgGb4sXIR061-oZdP-7s5F3U92O(.=HqK(AVhK?%@a('6_3X3RZPg%CYO+_(3gQams77lKHHZtQE#_<48
%H8pRqEpD"HZMke;Er.a728qsad2&CMlm<tPE3S@E]MrI]ZA7lIMTtCmql=rLJ][[eq+7<B]j6/K:qA%ig"Hfr-G9:\38b3idOhl:
%V&O/q;He;pgO2rGAl"`l/XBgQI8Ns"qQ$H#J@q%NgYVYjFVlA?k`!he3h>,@q$/QScdHa(4uLq.pL!^=S%5NpPL]$=mc9D=]U)CF
%:UTi%p#>K:df/j8?eX<6nC--AgUc+/hV+t-r:r.>T)H<n:<u(n8>g*,:&nJDhV$Q]WW!.IUlFR1f@r?6GYlGa7k=#Jb;+I4H4>?u
%G[%5pMd(e-kpq.sIX^kXlR[F.plN4-I*QZF`37AVFk-,MTAeCMnaOr<r"=J'e(5?'[98+m1D>TBnVVP[jT7Wj5/FEmd*1(YbfV1*
%15AY"*,\JVn!W\0d2p$9YuYTZ/`KhUeR$QA/i;M(Jkj'uXqg80n`qoY?.erMo]lp7aMD5t]kUfCfBK?o`Wt3;qaN`Q\T[N5a\V)j
%;nLaC5LLl:+0W.S1?Qlg3HK=_iF(d2CL_+#@s-&sH-^ln3.J1)If89bMlHAN/b9WINT=dTHIBV,b%1@k=Pl#\NV*PFQaG'dqVfbm
%e$TGRkDo/>FQjbs]R=F/U_d&JYATrW#<IFfnK1XcWpodMWc7D&SH,s&+4NS;P7oA1q(i*3lMuD@X?M%)$/jF3i8KM=<71[_r3CaL
%#^4='<aTL3H00mqN4u^rp>+]M@H#o3lGhhZ724!W0#)k(?[mD#A7N4IAo;DWKCaB]HE$Dtq:E*P<G#)8m695C@V-f49OE9T\Z&oD
%2BQjTmlSgqr5i.,ac!"kNSPWRq:B8)GCF%7F3cQ_[.6G2/mc;?Q(EKZXLhA&Q'Y,ofgj@=CSf2U*XHe)5!7**8F)\Una9k-p%d%m
%Qg;Ul(\<r>o3OY!UM"dr]CB?[j'6r\>']dancJIZAU\d<J,OhE]<M5Fd&iV+Qd+'d4a$2(MiA*cV4QSqkHFiFfMNu%^P'%>W[lb'
%qJ(J%_mn?&dH_23cds50YBUGCM=ld\&*E`RmdAPI`Cc-h,\-hASt+=IdZ]UbS+K,-`Kt[mrR:o/XfnSMcX&MldKunWft!.Wl.Na/
%?dj'hrYuffcn7F)Hgf0Kr&2)G;t[MicKRZ@rcr#Id_h[md)a\bl&"Yc9BjPgl[.k$`r(+.b(X.arFFg*?LVo*gIfdS/&+m+DIfg4
%\Q?tBo_e$3eb#W#:FGC\%i\m(RIc-co\sHH8Qr_dGb*D)DD?!'2BSa>f!1FIV]WZI4-(^QV-X&$T(\cERV@9#HBDMp:4GkhkG_-R
%qT8B/Rst5+jaR'Zacjp?o85`(?<s"(:TqI(4A0Tdf,peI&&(5'^R2$L88mtK-I].6=tAj.gsfJQn(IVTqI&%1:;8u".AaB*]2nc1
%HZP]@BmlC?^SsEN8A@65EeVbcG]W5K5J8\!8:Nh/+/R:Z%^YE:S(`Me7H*K+qPp!"VQZo*([7Ec[pRV7rQJ==C]<sA](sEl0p1><
%[3d59X1K%oX-;!G1KSLT-g'$PBbLl6WQu73DJja:e9>i(R0ic6d`Vr8n);L/nl"Se`7'LP`tQebDnf&K>odN)2F"m\-FQ-VQR?r?
%]\&k/0C2jULZR-QM<!a?dDT5u&:IY0:J@9idq9?W2ph39o!U8M3X,^GPI6Gb[0(=dRqY&KFs\TBo`p]0f!DF!g!]]\j?hFC0r^X\
%]h*S)S=fFkEfJ2]T9h2XT-&N-2n?ZsEe!XK<nj/"3PBksH19e#20niUahm,nak;H5+8sp3AF:RAT.F;\D^N49YJ*7XPEj%nX3&BR
%b2n84rFZoW*^3c>HnbS7lfs&0r9DH-4+2MJ_#JBIotf*Y[If*ZFoC9O(ZrlWKAH?%qn_6d`fgY*RAI"j*u7W^*orV6h`nX'I<G5@
%qK&G)T[qo@9Vn([:S=,Tkr3rN;tI,H+/\\D>\2&lY09[)hOAsT[AmMCVm`a7?VTq%H87RIFYh@AhG,ob9RSBtJ"8':.61=6c9<=D
%eLpDOe*03ERXTKeGWhUc^8Xh2m_n\gdXhCHqKZdd#+Ct:E_]q8n%Q?89HQtnH8>Hep"&q\:+KJrQUUfMFCkD-1Yl6%4af<G3*gd=
%:gAD>coUuiH+<cuq8:,#=&nSFp3sI>nDM45B+Id21UW"1>$&<H0:]NC%rZX"cQ5!JT0G\]q!dO3oM"DaIl$-[cI0q#04&^3@rqIj
%bV&\3RA3AtHKN,#>^iR>ZF2Pf?IbR6k3B"(fnZWIr9WFsr5#JHZh&;4fr%;OG3eI?A+h$d?'p'3Ep[uBF#Eo2[e01tS!j4Yp?]>h
%ormt.RHaI0F3_i!YB/#r=P%UIbQl+tf@/:*gtQT6e(f4/pL3L$o^VlbZ[2=oIWkGUj1O>NcfUR$9UsG4J(?77pE$H'k>-<ZeE:ld
%NN)_,]3]*`3H=7L1QQ.n-<D9,S(i:N*\ULM5MBdeQ6,GV)j??>IQT;+jZf4RO)E7H:DY?-8(S+V;buQmgnf^iKpB?TV[K]N(Y+3Q
%qh)HKq8;Ib_KG#1C8#eG:<Ukb^>I0pe*#i:o;`cfPBh:+F.,,BH2JeKHZf61;gqju02B/:+"o5d*hG$2Kh6W2XnC]&ir2j)>^Ubn
%o$\eMUV6Hqi7#4p1UHXS1QNoe[:aZ#;g[1[R++k`f2&gGf;>ZMTOE7`HY*MOdIk3+7K#f$p.F5fBtO4]eMZu?IBBMN?6#IP;dW0J
%L@O?`]^`A?;)Va_I<o\AREKCaKjrUj^@"ZY1hYFH("9F"5FZH^k@=,!?%$F9oH-1S^[,3Of#6ge#0g8.c*_i_a^]PKHMM`5_Kn$4
%TP5.u5%n%-o0L9c^Rf5pri%tfDlp-9fuK$JZZ^fV;R=,%RWG%1\^b>QVgj0SCp#C&SYO*hR<)]+.6Co8\'sd##Kq,cfto(*\?/Q1
%hRFq/NGH""YKj\<!X>.MrDW1TM\e8>e_7%b]mI?'kET@:s5HiB5<!tbq!,Y%SNa%KY;`U*qk&cWT]^Z_+"ba&hS*<"g71]dqg,]Y
%oX9!E>:LXV=bgUT+1s()Q`[Ztc/nWkLQ1DjooD2XL!uA!Q^^#&oW^;1Bg7'\p8.EVi$uM?39P^WIJicth<--ncebffGrf#oIBo3O
%b!.mJH1:)jmA4Y`IC/[Irq+>/q8]C[YNE9cT"WlI'6m\2eY\rj/?E,AHb*;Yph[^RF7:`iq.T_0]pA8^0CEa15$r<SLX3:_;sEJ!
%S*Sd#qU<LN'f5Tu['EPRHb"0CH$Zadj^IRlp#4rs0<>*<f$3K\RT<eo[(8-*>-$iLTp`=4hOM-b@dH3_b;PhCf.P@X:=^N"Bbf4T
%rOp5IbPb+HrT!.mb'NIHDK]N0qIsYReXN&a3<#"GfdP,$]\Rs[qPCI-]QiOVmM2pd2p_5fNNMj$m#s#J_>CUI4hHKoCjhhrmr!QE
%T<5lTr)[Yeedq&t0A]rN4FM3*=2*I=FS+k_p<)agQgNi-q6fTCr`9!ZCs1IXq6W+As"\qCp$q.o8b)&GRJll>=&7\$3dCnh*Zpnb
%WOXhFe_fdW3A^/HohP5>b1t:manma'Z[2IYpM">aD>38(AF+bJ>u'k5]9cTG/'c03]i08uDsuiYL\:VimcO*>qBsP?Im;>,[/Y:/
%qVd!FQ('ngIeKIXE7Xs:I%C7]d<b1s<[V5Bq_M0tbj114BD-:VnN]0`Aq"_1:V=YZLGsS#0=-SUl/V-]io,1Ve,F1N-p@*/rl@0I
%pA!iZBkID/Z?^G=4I8:#4C3I9C?bM!pA+%7qU+m,M>c[qI^4=nFSFj*HK335ltY+'AklD[09/icGuGBSoo#^eDk%Uc^V&6lT36Va
%H+f\s49,,-qf_qunbLq#mg\_k3`in;[rf%Lm+p'aV<Y[^NS0lsqF+o^r@@L1e,."[o;<[BTB+HCetu(.5(#>n4oLcIR$i\@4tc:U
%SUWbNS_a*D4Y"(9XIM*BBg;Rai`!si4$Lh-+)dZdcfje"rls!kk?2T4om*[6?[r(I^7!;1fKT=sHhRBu2#$G65rR?K5'VLiI!BUL
%ISr-c33UZ!+6L8Mjp<l.cSkFiq<G$J>et]-q5*RAYLO">-gt]+ek=7?*^"_W=tHj/+'t<f^?.*B:Z&N3XtQB9Q_n2/?g_R)cRuC?
%eb#.&]!?^+Y]t50<PGWf9@emOjjNJTV>$h/h@:m0?^ucHp6Y-$q3s%FbO$\/rcG\iIBpTH?8oUJEok=\YJ'M]Q<q4lG]WKKk5"'(
%c-7VGo4@%BN;p,fnPK6^aY.C)WfPq/Zhj6HH!7mBJ,6ZeB`""$KC%:S>'3%-&t8X]I=>p\4l+CXeC/$,=FZq<GZ$bqF13'o;]#H5
%4]O#R?,j\GZl)"^1Yf^+/F!WaP]N,`=V7/FB\W/XK;X;A$GWnCSZ`hb(ZeQ^W`oE?9]3Fo*j!q4Y70;_g%EI-4VR5t3N&;UI:i$@
%[9>_7<L)0kp>+jr#YBsW*\>Za?uFo8?_^cLL]cD>=u]OFFe]S+/E(,>VQAp[HR#YLPoG2=ir-'^htNGhpP?b(FZQNaeb&qV?:_G.
%101.5X+ss?][XU9oq,;0=k!d;eO$ObK]-WkIr`m2K]4,#KrbC:m76cY4<N(>42Ft2A!24i>r9GJ2SK"C*d/[;JgU)ks!2!SO_J(^
%$H7=rs710C:iAnr%?.B.\@%dZhH4i@hf0EjN8Db1DEo>W-ZrY%"?O]Qh<8,ddIX`Hg&J%!'mabo?bcQKQDrI+iGODFX&8@qV>mQ@
%mIKC#PHPLa"%D#V63Q#&#eZX@!^4%o1t_!]e]47lT<k(G!tFRr%lS0d%VkX0*UMcTm0N-ZVFH(87$6Ia2"No^S&='nK3Be4qGBr1
%k:;Ml:"OMa^_:#@lkR"(h"UBQlj.HP8(Pc>i^'En#WKGKpFfMh&>/tnXk+`/f6^UUib)<Ec(0EKd,Xe+NWp+G`QK65')bo:kr&9C
%!RENI\[dO0g4%Wgp+FeXg52Wk*^EjQ?Rt=:D3Q.^\nG+7rL.MP8&pjmcSHB&Au8BG@/9RoUNPE1fOZ"1@C#tTUi1G\A'EE-CD2cH
%oF"jdE5[sbaH"D\&)rVC>]a%Y:QHO!>7D-9Tj4X*<7N>>?;=@<6Yg@`(N\QobDuAPK1s@;g:CJ^eTel4n%dVO$W=JW2pW[YT4]<f
%1eZ*-=XcLh)imX,a'N]=!'-<c[EsI7Hn[CQ*ZJIbFm*nVLrm8A:J-N[4BL!UpPk&*OGQHtbH=L%o_8m`Mo!HWOUWCbSlVgjn*#et
%g#m)l;cca+Tt&W$"rgV_nbH.[`1X^`-c">:V7lYG,SOQ2SW87anpIokMT//Us82Odo$:0;l5%a>D`6ZBcgQ,(ZWc[i77pk)p5o3s
%&%7\9P:7(bj=5VRT*o4$X3I\SjJZLsPC=g&So4jH$e^9cG9K''30"rs:TqR?lrJ*bmMR:r<um&e_M>FYfgW?bG=U(0?=LfX%\n.%
%J\G#7B8\b+A>cOj-Oa*Ob-m1V;cj\E-QrCsFTlKONi6orbCZ,V\*Kr6_b4G674i'qFQ`Ros38p>.2\cF<+th(B^8\tiHT]4[?M;"
%T>AuC-e]G#IN0C^5sio%67(1AI.R</s0_(j6.K,onN72[34bPjqP'!]`q)@i&sSf<&&+gL?IF/+^1Ut->B`sQ\n:1Eh_^kQ%>[=A
%4_W1h\F!lZa"]jkQC[OcgIj-nQ@n9Jm?FdNDT4M,,IQI?5aJ0*WB@hs"(#?@9`SC(`q4)/UMa9R;g0dCR=<.5&S0T5;hO&nJnH26
%L*b^-h2LfJ3e0(Diu<^\O(s-`2A%1b_D+1_?IsQLUDZ*LmQ*fAf^S-Jc*cJP$a@3-Vlh!6W9$tR97WF:`WcVIAcNXo!^6kM!fQ]Z
%V?=TEKhs_g!3I[lX7'^+,'<11AiiK)#A,O)`hsdfQ#BOK^&`.3"qp"^)$=uDno`mEZEOoG&'i$BSnl6U)UdVkTL"WLk2G"\OD3'&
%4K/,ph$*@8@Lg%[&B&[q=jK#_*f-%e"fSIfB4(-k@+[?A%4gIApn2P.)$=+7*&D)LL5n;P]Stt<7'hZCZV1nG-K&u3g7G'P4B*e\
%:fX00c`o58#b3FLG_]qNg\<j4+<$-*dD-`#*[opa$H]%ANJI5hJZ?Lf`9X'f#<n<dXGh#s.KkAZ4]&AD^[!d8mUgth:d>gQKsr^E
%F?]K,]maQQBDoFaFLX@+&*0@&>i-pW[>YQr@XmlP'TDH/0F@qnkh>YWfJmsd!8/5/jbFu*U$Fb5KWtdoEWf0A+B_Zu"boW'4_*6\
%&@$*i,RcA$e(.&ZfWd7T3nj^n_=^'tT'_(:!5U5]0$%5&!?lP[0L'rBm*'J6?-ju"9f)t9LEJKN#Epr\Zk_',5"ZC<5uKfU3jWN-
%ZN)D@1(`i(")prt>M)FT_a4_7[(bpq!:hnVBApI1kFbOXO'o("1#i%1`jL2u7iMWt?l/AjE!'dsXohrN%3E+mFAnpdf>(W3#GKM`
%Hl"4(Yo>[DRVN"h(9g98A"d`>3VX;rl[oK]d,tuJ:.s:RfT[[)^'.+/\hb`pI*m"@nKLNOp/&NVJmm;FEhl?K"463b!W]JC?+;$(
%Y+l@<#)@bX'%KXX"o//sku;gB@A!Xb0"q[8iL8]kKF*ih[1+s0(No.ji)DQEcl4TX#CM+R+TD[a#uDh&i*)4Ei@;5D3I]pn/GMX$
%e+3IQ$Y_6gDB1g-A!6b`")1*Si.0d/PIqQN:]l#"3b<Et[dZX&3.1e#+4\_4lT2UFi@30J)]EuQd#`lc)PRrYN"-k-jW`[1GG%GL
%aFkW&8gg`nXT:Wr7L5Xf%8f(*oo_2+%fi`iXYDdjd*W?NJ"boBf*r-#i#aZ@TZ/ZJJ]r7pbgV3IWVJ0\%Jog\).5I7_%6*RYQ53N
%S$1QhC("D#60L5<,2_n;;'J0]7'S+*mf?:16$NGYCRaPFI#tPp&=;>QFOL;Zq`\.5_>kgf7/`]$RXAIpE2%\?3F^>goQ:R3d"2Ya
%6$bk:aCm=ODU!Ba&-uT-QlNK1Rm)U[LB(-.)53+EGijA:5UDAP"VIWIa=XJFN<D3Y4;8;h$GDDYa[^1VhB);q`tFEU_Hm<b%_K1T
%52Xmbl-$o4JBLHAQG`Z52da-c:0UMrU[&02KmL_0ks0UZBRO.oH:%]*0Z26hlEO`.d.P1q@%Ta:$eBtX-peO@,#(QlksB49*)-Q4
%(OR$f,J#7q+$mVr*C4p3nKrE"h\A?&`"3.Q)H_J/1_4\A(]^6?:u2-T+6YC`)7;d!L?#&ZJFb^*%!D'GV>J+jFMmW:jOM<Y_>3o(
%0>+(_4[Ac2<?KEjHDsE6KLo(k0E@bQ8$n!V'UZ)f[W(RMNj8A9N#sC[%OU7N:(TEKN(Dl`F\e?Y@bXWh;&g=0%1gDd7d8[1.CB>.
%fd?ZeXsRrt_uP:FTT,"YQ:qet:k"9q8i),lJ`h-*9XI!><dKis5fZ.m5XP]>'c<c_!a&R3YNaJ]U"b\)CZr)B:ip&8PJB(Ea$McJ
%T3+#n'oULn*W]"Fq_*V>$gG^Q?l?]Fr!o/Sp2^?50fg?Xq[']kGma=e*FB$%$s,J2+#=OU>6>6ZbOB>LkH:Mr"c#@WeH9QZ_\g8V
%JP!sc$"V2k(rO(?BsE4t9/D7aJ=\!,@#&c.LujANh:pC53V2@U-3XZNG\5Pp#7&@&2!mp@m\9mcL;!pL.$-3smMI]Y+Q&1f$U2(G
%O]>oU.1nakSQrZo`U>6f6IKHN1<2RIW@]Iad/,86R91+E65QI(L'Vf8H$^@?4igg<4RgVB3IDFd_!bclKXO%kYt_"q8B1uDK#C,$
%a+Ssk;?Ceicp]A8K?.>;>Ss\r"%.`]91P)'M2ar,Jqobi/lD`Z!0/SB#EGWYPU4tN0-54?9r&HLd3M9WA9&#0d7(5bOp<":.n"7D
%#!kF=ri+A-#q%ZUr6PD'j!UenJ-7a>D8o/lbbj6e-Go-Z_!M@dC"Ts;N]dim/6j0"l7eCKEO_tc-B9m$#jSuTr:0$K"q1>b%8&Lj
%DubZdOQo2VAUE(Q^ca\9G_$e?2FNp#Y6D,,aqR_#'ZdbXbgD2CVh39LO+KM^%R_=s#(`/S63PofN6&:Z0f-lW6cTa$+)KHC]EZ&3
%GXBOV^`D_tfED(q2:DieJ``Z^@%rS2:5DDWO8;&-(Us]B#/FN.IGp:=[q,2fD*)9bf[4!i<=k98lUCj7JHphkN*-m?4^4gZ$#dVc
%[X9)$p+[53-k%05_d(GV)2LOij&f;8%W9Q.YmljnRJhCHNbYg<TF2*5#$K<?(q@M%"3q1:@3RieL3Cb'GmoMFU4`i#0LSE)_4\D-
%Cnj,?^qg6:NYoG=e0Vhhh-R`(?QcUr`TZ&8F@m8;:'m`Ea8DHj+=,@2g^uXSN3oECd4d:"s+j[!:h^iX4m6.Bi5TfZa+-tXaH)Kq
%?qiV,?,rnB;:rj]]8`s`UTfI$'0,8r+R27mjasj-UqgNdp1<rS+j:WF>gTm6;Zm<c%uu_,*ASP[WJtre1uh!a:4#gH`mAX]C]T=d
%3g_Iq6"p/,a@.7bL0QWjab25Y%BqH,F%.m!6/066%7<ZB(s@FH0R2N[9#Kh.0f&p_CdYr@YsIT)IRrE(KFV$Q&]Vlh6c6_P"u<sp
%%M/.>_]n]lTF:;m=+E:7p+;Ai@6)c`3l0#Ck.3Mu5TEX#FjWsh=UI*j+\%$E,a1,@k1VYT`q^0b\3B"]Q:H3CVR7c35DV\:D&c_]
%N^G)P)_bkk7LU9VRONoWPT8[:eAgnYr';tm4>GF&H^_0=0Gb#`a9LdGkXuHjWYci_VL^u;KH])>4/:TTdRE_\,=7lS1a$TN.lZH,
%SkBR6`U7T$6+UWB1p/_jXGO"hP[Rb6#$@i*j0B@/9jF-f5s=MsQnT$T\"O30V&LUgKFih5dD`_d%DVcY%b;WjLlcKL4pi/IRVS'B
%"cm1%+i=9fk9ql9H07FJMTUIH&V:pT-HOi\nR++Fj(f!S+:JrC5^f0r!tt[>J01Fc/KAlC@RA;Il!;BUFZCTLq57q9EeF($iY&B^
%>'T9@F]6@[O<cZ,)F3<c#Oj50(qZC'ifHgd)H[G\Ng+ce<c2%ClKCHh3iJhHlC]pm*\tr1l+5EqQ$g;gF'+E<,R_1=AkNhFB\8;I
%'m=0P8Z#3G&HWD`(*&TR,,ndslp=Cc5iMtp87;M*ids&0E?=`bO&?^3GT+hS?j,"cR3L<$GplIC%u-Iccu%MESYSR#;4.5o'\P/P
%o>ME#6\0hs38&(,_N>eOaLZ%%TK@`I*$=,ZXp4/L.56Y+KJ"$ZgGhH%^aUL4pLWAMM/A-l+r=lHYot*>)O_g1(qbiL*@Acu<s3*U
%`he/DER][fi@*.*M0+!j_Vl$@^oe\mgQ\\MKCb\NKFB[H]T_I8/1jVh?u3*HgS+8]FpT<['jj'.eB?H`c@mT1cq?]1_hKRG32Wot
%_l)++'%OlK#bP^_4^Fqr)GV%*lXUPJ.0r#<7fuHOV'\Yid#KaM)iV/_C_F6\_pjC\!Af:e$A/ORk7-D15c3J*4)HR;g$=(1*l`h5
%I'ZV1L\aRTd2("@XOLnm"<=q3H)QI3#^q5CQXtuL&<N#DpOcoJflm$0j;F>.Gng.KYJE3W7[c6RI<<?aUeS3\;CB_#iLg0L2KV_K
%0FM2E%H.b9XDX33gR)QFZhAAKcEfqbYqY/mLlOKlE8MfQdP;fJgR.mo-mX(uJT#$OUd5k,F>4<BKLY]MnrKZVj=Ck$\f`-L@dN::
%e-Bu*R5?!V0O"@Hkj/'(D<PGLR06GXhj7a7h_aq\iXh.P0t:E)@7[h8L1>0',o/5e0"6BdZ_`LS$t1u]7>Xmnl-N$HlZIPXD_P8p
%f8\7NR_8S-05s:rO<YM_m3B+H%Yhb;7P7u*k^>H)Ke<En+O5!MNL"Oj(f2g)(,-!"FW@]USf,3.M?P^+dP*pA"k82(:Vk3i_Zq:4
%DOX#/.2XgL#!g8C+Y.SdM1dQR9HAEo]T>_`ha>l./-=uT%3"I4aKjk,"1!al:!B;o_7!;'*l6p>!(:NZ:?eGULmMNQ+C58+_mnQd
%c-Vu>:X7%E`1T@?0GcMn)$3,Y0o4<;jYj?()3Q@Knm'obncI9/>O9j4Z8E_Rn=!.RgXUi4RN[<Xf]Dt.)8d.(!@a7MfH(,.5<,kY
%;s4id+@D1I5Z'N,&:rfOUR_<r:`F&SN>+m=\Y;l@-)tYcbI8'5_.<prEA`tjJ.Q8$R#SD+(lXTqTHWh6A&r2YPS33c$upfL-k3Bh
%_eN6U:7g^4QHKnWi62l_'#k88cJZo#(h9%$6NJp#TcdLu>SW2sXpPi_?l6Kn"uDX\A1]MQUPV9(l5@U'b>(&D<5kO';.pQZUZT"c
%!gaWZ_e`BX9c$`cX,$nG-<BgS1CV:UB$a@>$tC\Vei6_7,F,;2kN.-@NaQhi(>hYM$H+>j^lWYm/nD4c8."rCBYK!D:3>B3<s+E*
%*+*d@eGru3TP$+@]!ZBD]/P@^VA3'%7q#@`</krV-q_#cB];O+,7#F4LNmAu)IbBi&qbqW1Q3K@*E#M.LI%>Cr2`u/H4D[AAA-3f
%H8s6G)/Z&pJ4:_Y!+b$k6)I)OaUEpY;rmQk#<T;5_XZU/%HWeT@0t,d;(9?/^r%jZiC()k5b'#&%Z+g8"!0NLPYAQt&O5VMF:^M4
%L^q95Ta2&O$0-ZS36M^M#_sQ3A]U>&>$uGm/VF^f@0e*7C5@F#8IQS:cS,PsG/u)*('`mibaCr-&Gl<\(;f:.#Rl=kj+G0-b7#?r
%LER(;aI;6p@!$E@K^jV%#f;C47mT+#$6#)QcikD4#UlAR#!"$l7O&fWh0hZn@:2q(L%0f#_-dk0'f_G:6E&tCRcYMbA9%j,EIf8=
%j+hB)JN-(,*"pRO#!B=e-t/V`1e(%JB?VX-/)6'B[P"I&c:DV*c:B&g*jk[G/^=>)4Bk=Gd8?!f32=)pV2I8P^tRdA!,d]N$A43W
%@64n9.>iX%nHrdI@u#^MG-A_B[IU"r#Kk_@*N61R&u^D;iZeM'/2M5f*/.52:c09@Jtb&q"Vhad"r0;<L)>`1'ELkl'ul?W%N-SB
%_Vd_WEhckIb1UhfW3?gGW.Kfa,6Cdp1N4HVKi#lf2'((rU,/MI'c7X>0Re]B-jV2V6RCt(?-$H0J.eltMB?K@#*cIW)GjicUe_.)
%`C:!M(foQk1*Jt2^TcsY#!t'i$;aSc+]-Q2CkmR$71laL?==7fCmRsb'puHIB*RJD^#G!MMf"MlJL1@e,>A1"n\_1$;,.7K$T"+1
%[tbmW_W_muO#=F2XEdPdec`4c=;-5>@ZA6t,)Bt^!`Lp)YTdGJ<,?a#.@H'Q_$RMiV%H]UV]SciM@YS8'h/ln$5VS^!gY$>0e="b
%Mfr>CbjBI_YQ,8E:k;$B'S.^-'Nibd:b"Xj-'b^L%Ee"H;iN1mq>Q1*<1$KMWbA,o;6U>`&[2r]$Y?"[=jZ3O?ibd.K8#0o6Pr["
%6QDmm$DE?%KhjGV.Ahce(mGakf,@M>$3:`-W+_l<<'`tCU0pj$3B3+]MJ,V@.e[jNW$oIS^qrNr5_Ts':^!Y/;IDr-6E/W(OAeJ?
%%%>pE&;(1imIZ9%\Dc)l]_30VJ>4hIJF^L-\!>uclUY9th,fou*eV85d%MU(eY%EV@]E/A57)+`5lnJI"t9s3Y_3H?(oKrV(&835
%@^B!.$"Hep+\tK@.LJRCT`Trm;?[iT%#[cKD[$\?`55\+8eqH<10>7Kb$Y5p`4uFIfFigVU(g_WY>?]44!g.g)+d:]&S7mh&5e/h
%(lCj!=;3PB/oeTC3"ur4CS<.Z"Q[^5JUf8'`Jb@\$8#[R$H,LCTo+)K:GLNOVM(BTP^P@F)Gu0F!YIl"J>$XUJOT+Gi_kGF"]k1k
%@82SU76n!]'aD/h=MP1SYeUl0`*f)^"]j\7P`!]q3@31nTWq.Q(c62MDt:%,i.PtiWLIG6L3ou>VLK&$Th?cZD&_"JG0p#/D@DTf
%aA#b.YLrE,7o:\Wq7%g(PG<A`%V).Hq03Y]GI(d,dk!O#Nb<oj0j!OrX_m^A@r!Q9fc$F>6EE?kQ.,9%/"M=/ZXJ*%3<HP+$'\g*
%U]a%9E#h_L+u$6Xe$cuHS[R2.Dr?a=f8rDB1sE`[Xhij`4R?I0=D@Z"LYMRf>``B*CtrPQ,pH5o4F\&]S;7$aZ?8Nb:",h(Qai%2
%G6LE[/2[K\AAOI6h\k(erUM-cj\S'?7`U[j*=D[-D=fP\?'LRikLC\Nen$e"NX)3sg;4AGODaq]M#lC$NnkZK5AQ#C@^m'kceeO;
%MV+g)('^A8oYp-bXU!lZ*F>HrH\ds\Z%BD8glSlcG>oMY(i9innuMgbafH.nS-d"S-POi*Lk`k9H,CB;.#93WG@\]&_+IlM'a;rN
%XL(FHa.n])8-MSoX5fTRP__uqBb;Y_oG*h6"4+>!*RCM>G#LHnAbibS4mBIFMSnp+YpYT3-nql^gYV#E)@!&ZJS55:P%+mY)7C+g
%'ie0Vdhk%r,`gSnE`8lgr>p1CfoCiq([sb+e'[B3l/DV$SEP"_par';p@.]j#SGgu/9Fdsf?hp=T/se")U.'B3-_>1m,;[IFsrr:
%1$S2970fA][(G56NKYPPF2_W%(2d&oBT!dUeAW[3nkn4eBjMaf>+1b-JXP_H8;t>lQKW@&V_P]T*Jmej>XQl6ThggjU3/uAFI=q"
%%V7*k+p^NAFU[u2&e_Q[]<no)#nCtVa0u44SatPBO0[$<A.IeWN]d(:(?8#D]<^&l[>K=NG9kg0r]@rn'7a@YjG\2Vg5cLP[qqPp
%dNUHUYSI?.X_!RQna,1IQ_B8\5miAD6,PN9"9\+IWR8)."l5/9EnoIk9Wkld,t&"?ZWISp$DEmj6fjjsY_,"UAJT)d<'S4(@73Xj
%^9L.[6ZNNAJg<HJ6QE@$/W=00F^(W#\/&(MciqW\4fh58*0Wj^%dd1)`!eeu.P;jreq78tL8IP06.H$5oX\hj%$m64!*bt"@?8k,
%'V>sKJ[sbGYTPCuj&%&VGe2?)p2,\W#ST;"6$\J[kI0k^Z:Q2p0XS7Up:$elPRBWV^=4aQKYT\jXFObOYTq6/"%HnL"\dO)_WY+6
%gl\eU=Q7=-1^TJG97q:[>JRnUmh%*(>PBu3M`sbR=*0!kSt*d)O=T)*%E7]=k<n_NL97uXnT]l?%^VS5g>ik5d$bLbm84BnD$=.d
%Caun:hKA?Nn;`1UQ7!WWCs%oW4D&-qSjkD@S69gm)=KHY]'gJ""7O=HWRGR)NWIH4d6O81ADsD-P7]+F@[S=e;[`r-\:NACg7`bc
%bHR`g,e2AVUB?Ip9Ct\mZjWtk:HEa_gND6K,bA$.*PL8P,1uIF/mpb'Xt&3P*n9b.-fY#2&8V.]pP4#S0\5G-.!lX=GDafib"XW.
%GEWB8gn]pBWJ*S>2sF^j7N;06RuBUtRq1I(9`e!X7cjLe4K.T0m;C@G1N>nF;;2ms"n!`-TXQ7APe0Meqa-(!,&S"ur)>V1\OgUo
%8e<`7LETM/\r+!h#L=a_HLt(YW@U!f-5hcS8Hk-aaTu"[8V]o9fF^&6a0@\<A>f)h]Hir8a>tMOd\.o^HGiINGYQA<GY&,"?;c?>
%QZVGUC"2faSH7L8gV"l>mQ6jXI2!3K\R*3IU(%uDLS&+S(&CMABBU]fYg?0h8u/M[`*-6N-FJFC.`i,`Rr2%&%7eVB_?rG0d*J]B
%(hgc?*<dU`>q.kp8"RV+@n:\gQ,$f^TYT&O<TYh4j-5HkkFHTP)e:_,8P4*0GS\7J#>a@TnsgUZ@*OhIdC*=@%HL&)[kU6oUG2>g
%NZ8-WE):HTq:7C['FCRD:lRB+8<g=b@0,mZSU9O\=rH#.FY'YKNFSqEa-S6SMl3gN@BN>R'V]RXVg*D2;HN&`h2:AdJSKp!_2IJY
%4\:g\[ff5uUl.MsIh9YfPhomR(Ha2)#/^d<_92inMpG7K$gaa.OOdPe"Z7h=@f%oZ`%keQ0]_!i5[B;.<P#[R>.?(!cg/$UYjP4f
%:FH@@$0!sa6Ku"WN!b;XlG=*S9/@G:TH+]KaJ7CugqY[n?h>?\.sIB)!NgM3(%&iaURDV`Q=id%KCo74nmKg1lUs]:G^W#8LD=oI
%Vh8H#jh;C>cBT,k.'q:bUm$C=%gc$F19cbuB9F'3imS#(m[1i!FG$l^!1&tY"&3\*;*8qr'OaJhOuXcEXtFc#a,qDbl_rI5$uR]C
%K'c+)Y3lJh^24#TnI:n(e#Bna9bJdT_?*u)#>mr/X_D/P+=sT1JU-3?CC\>u^nhTu,nKCYK=S.$g([[c!"6`=]5HAu^l;q/n]MYG
%[htB@,;+0<[4]JH@6<,2,SQa]KIR/5A_d[p3O[G::*hh)VRr]tdmT*(SlfpSkRctD;UiGF3$HqYD5Rcod@?l=PN0W&Ap2pJ$-ts7
%&QiAbLl16Md753)9I$?-H(s#bJGHVnV)'fkW<dkn@^#n7fO>:,)U\\aCfetTTu(4l5nfOr0\RSe3WZha<KO6X!_+R2a=EZ<b8JCN
%o]6pOcMn34j3"=\HK>#AN2Fj9osOijEpliJh4]Bg[$qIFd+*!th$k>K"Oi@%WCsHG[U]E_U>tq1bB7gIgrGg"OcW0P#m_%db2En]
%<32KAN!r*k#;8^uB(C[$*jdIa-$:a6Z>\J%KB4E@!L;qI`M>iR_75lJ,K,[=niZFh$KbX1Q\A1\5pP+I`8%$r'._s3L&%#]-g;Hb
%HBrEhUSY[U[Xhuu*!t%Vem$7(I/)B;g.,^V*Q$7[G0`cL,7LIXfWtW;4cT@aT%XVW,'tY;_UT)ZAKm??r\9pK&W^CX7`,[_3$%4B
%^gpJ?F0u@6%aq/e"Xn66O3W=Pd!)E.:NUQR#\B'+PnufJ,!Eu.0F6@[2f#q\4cl<#"9VC#n$IXcJ/(b?.TQ-A#E"M"1))KOgrG9Y
%2f2rj_JgtZ^\'&M8!p:!M%?+#%OlV#S/9F^=u7eLo3nL;bf,B8X\Xj85(a#Be&;.bHW4_-a+C+9'IH>bm7In!.\[V-.N!LQ;`=%I
%(2!hoKlQq3E88Ne[Oe!hA:oJP;+hCSc@.H)MdY?NVB\OG![^MUX6"Tn0Lu3:G(g1DkVg5-/.da<3mrZ=7\ZA1Yj-*;7'I_rh]%I=
%E1/Ap$:PIZY"O$\?l\rUkZN&0?_]VIp46^""N`j'``,KZDMQ^#i]0.#@@>?p$"d+5?%QMG?B]:hN[[n;?'A2A#c:c0,2pJ_9[pX,
%qcf/8,0VgLp3`/#&J]KBUZaUXq'bX`d]qH4(<lYCCm?<`1b<\,"h*dnVKgU4Cca,?&4S2E1?%<PM!-R1e,"X+<Y^Y_:o`HLG:6Hp
%OYX?J9As4D4^JG\_?XpHO6dgtL%6Iu=Fl_HA\gE+DX>^jXOi$(Op:b+8#Pne2AWhJODRkJENJ\E3:^Wb3.J#aUerEVXKuIu<#Not
%b.Rek][X>6+Bp*poO\*"!?BZf/4Z?mF^e1L0b_U._HT:RlVe*E;pIaW=J8aF8scm#2!CZBS;n?FA0\N-FpXR=$<"H6a"d4*h#iD6
%1**_QZ1d<fKs4s67gg)f,ReD;K"NK7@uYUQVi&Z7?q3Tp=oHC+<O1\ATi3h*eiO,*B<i^,=<Q-_=ciK"#U^#a(UC#0OG3:bU'?oX
%b6^?JN7WKXj^utP+higI0mQX=c)8-q"qDKd^)S]?5o)u`M&Z`IYo:8&9>F+A`d/XuQ'NX[>SFnSIBbsaa))#`S0<Ue1gpqp]Q(nu
%Gep0N*`7"\X%)D1S^:%KW1,tX1W:d_Tj\Y%-(CS0S>(tE.olgJSG]ag0MM1lqH"i-35h5cEYOJ,^h.9ufYdjB,VLXgfM*[6(;pGp
%jlocp"A90fU=((LO`3`40q8TGjcBI5S_"LtaU1Z5s24sDDEYde=UaBeQro9(E"%U3[9e`!UY7sU0\'n<a[ZUFTL]HVn^C#:iS-QI
%8_6\f"G8C+'JuUg@1,*]PY33S(rkJ9Y<"[FZVC(6ab@6IJ]SsK'f\#nY:-2-Z4Str8;,e1(e>r@V*l-.aX#1=A>5tsAJp_k"CTsE
%A/dh2CY/<T+@QbF#BY$G!I*@qP>D97No!^^IlFA-g6cB;Xrl0omFh%S:pI4WV;T=;$"6]>'fZn(J<5UBCc\9r7;,($=JK"MK.%/<
%PLlW+`ipHfiY3iG,$n\W9Qj#WTd"CC4I?_1+(U;A%c!+V\KW1(]hA]jppLaVI2cM(?l0IeNmpe0c*uZ9$[94'=,A`7L<#fg!/WbG
%!#futiS2Rj"`5q),DJJdW^Clc[nb$je*4Ym_tn:>pn=UB83_2fN5ErRKkuDRc>Emr`M,J+-p6ThQ0]_:7L;<=N$LCBZt)61Qm*p[
%QBX1i+b/>/P>DF8"&.?g\I+^fiAsg'Lsr=#S)QlQ,&Ad6P#1?sPou?1jf2]PL9#p:UC[NK>@Bl-`bAo?OSfY9A$]*/#sI)2<E:dd
%'i=)l(cX?@eI:U!,d>P28Z6Z7=QUK)Fs8%G2EG;"MaOb:U?8@53\7Rt[=D8`&sA;R.%q4`Vqqn(QYM/((blF;:sI>j]QHgn@J:[f
%]SQ5g-@Ft7R.Qf%$Rq=CMm3j\34g=f'T9gC$;WOZA07LA#s[F0,ac-EYal%n&JP7=as/;\J)01L:^&Rgp8OXa<"SS=8dF.h.2i;t
%`Hb=b#ho]f,SX]eJlHT.<A7%U.[W:)0naG&28imm-3at%B.-,*46;]''nbYS&pUq]BDRf7r='!Br7L1B>5rI)%X%5u<EboI_\k&;
%#gU9WbqeVZE5e,dMmu6\L5hYB](iEWVM6\6Q6D<UU>`8$Z-$d;ZE&3nQ7o^hd?Q:Y"GCi3nch)X`=(;%2K1Y`"oGTA.\#mOih/2u
%0!n),#O7NVi-^Y5D[aS_0m%I\]n/`T4?Qe9ZciXA_n`SE3(8fc\Bq:f-`Tp<H$Q[j!pf=pL+#CWg9/*>L2I+P+KWU:Y+/lrghdQ/
%+@jYK\62@eYd`\qP.8YF$Y%i^Of5ne"#!bJ0O9Gs>IS:')l.*(*Xsq9&'^#'`8HE;mGVNc6d(g@AJNL:iDDS,Y2mI?9hXu,2:>4(
%.g1dJit<(V:A;]H9R62cK5^pi@>f=s.,Nj;7juMWVuc]q$C_%eQ)@).SCk\'G`H[aKBo\QhME"$WPUb=Z84)F#RYcicqYoK!b2N7
%9!^91EOL\qlf1G<H"^Ld-.>Qm5$b3YFO8MA"/0mjb7-cd0W3rg9K<I!*PZh:,[M[gMk-uWq\,sncpo;?YQmV)?;ku'9579>`;A:O
%SYdpQ_18IQKjtE@$`IL_dT?LgCGoFUG4Sg\3?W!jK+,u#`>t$PW.mKqUVjCmf[j9<&sSI*.%t2Q'aIpZ[p@eU6@0Ea2BnfU(^:GJ
%<nIK)3[KtD]F@QGl)%"rC6Leu1SS(],-o7IYiqN,7A,E0MUT<@(C\77NBi2&(qMtYXBd-!:8<t869Qur3_V%tO1$2:NC6&52&n*f
%k3+(3?"B-mqUY$SPVoO.]o0pI=q.<TB(;<9bnk0BS0&&SPG<eOn[N[b&r5BW:#0M",K<Ki8k!1+]cgKiSM_o`q'_(48f\6tkE(0&
%TX5_<ClnuAM1PeD3)i`!Yt<NX81($*HhOBU]W=l;I5C;f&)>V^/VtLQD+^O>otJ>;[(SuigaW:;$3pps0iW^[<Kg*BN&mgYjtMFs
%R9L-SLk%fq(fZ[BYQ\ic$72BtHKHW4'pPM@%N8>;]4^?YD'O]1(S^Fp!i+b@5UJl<Qh,="%:k8@2@e4l%M#O"1:iajkL'i*d9mbU
%,Jc![>K*hN%0f.&,V]n0+Bi3;N-,CPRGR<sZgl6M0r_40_kaFZ;a?i[?QfL`:`slb$m`]O"`e+4.]ILcPgl*g%A:r4#*!S`&pk<b
%<-*/5[8*tPPl%,iA<L8`U`pCljgG7Y7FPuZEWNOAMA"'cK1?mN;G.52WW6MW)2I4[=klund,@`B5E[Q#TP0PtT[>/(5[!R`)W;f-
%%>RQ]3BG8e(YL(`l>HuM9M[/#0K$,f'QOfjY`N,o@:E*L5^WuA+Cs"L;\:78WJLAmi,.URK/OR&dDDOWbm[mn=Jo76Wb<f3cMkdJ
%kKjE!Y:\0+d&=kb-kdktcbqni\SQ]LA+$cu*7+'=7RZ7PaIc%/K%bgIKLUT"n2?255oUD48;r.T</9*meiG+@9`)LV+6s>Z>kTZ>
%E7q9/'b[Gh=i^aSDN*BW<60cI]Kgcoj=/c'Vl=4Q]rQg,+"S@fJc][(1a&9]$^g6(RtT33ZppIZ8,ZoDUCGSAhA5_bBN0umP`#d5
%?VJ'@A6?G"/k904nskLUnaqPN&YjkE6_4EM,G#%D3#4?d6&LgRPXsrh,\(-@P#.o:(BXS/^gfE'_2#"G"f[TI0Tq.VE_%So"Ur>i
%E(LqJ-C&loECrC<pW?R*lOE>>&>LHO(%a7t!E5O58Z85Pg&:@JG#"3p?ehL<;/+d&%sAT>-?':QK(Li[DAD7U04X#Wb&%d397i^j
%^g43e^mgU^BWMT7O]WF6bsIe6JjC5&$l[KoO9LScasEbL#;1Q^5K"hn6627P$ZuK$/CXi.0G%`\6)@[#[Qo#;=XA>gU67W_WG\s&
%UE$INK0p>)*%Hg-fHb6<,a2'uK@7FY^$-?20QBU;-<>m=563Sj`W40"KDY0.\-`I<kO@3dLrW,(1GVFCWN/H#L&_nsFTF<;lN/Jm
%@6l,8:d>JF9!UH<a]oY8,h&dJqnhLq&F>dU<9.J&@K@t>,`H1U]*cEn_LY%$$s+Q^eL"3,,EJfp3R$u0j]02V,+t#5"q>6XkQ8ab
%`KIIcoumbmCVYkA8LjhiJN(jQaqf^W]?0R%D%6+aQDJ^C93op$"j\l>XHhs1Sq@8\A?A:j/FuOq%HP'kfNtN:kn.nJ*=!Q2eH!NF
%G-R'GTmrns-ZJ0IGNAs]YIQri'"mNlR&)MGWo8fb8$$*Ea:tIZ(_!UT%ViU(Y`=F'IBh%O6*]h_m>6Ce/<4B.-Jfn!8eu*C\6Qq)
%!L9f_q3b]a-m%Tgd`K(\f4nF(F]4l$9]F=%ipIs'96SJLGX.g<:k,7X..eYMS.HgUbT"adEL86`Ru"O@0QN"s'$>'!$P,m=9gu.L
%-#/=s,R`HUgeC4o\l\@W'lIP9YbJO$-!Ulq'SG.IBYg;l#8jpaZ\sQ,'rcp<*@R'TABR'2BhB+MZS3L4YW?gEdAF8<TEK7o$*BF/
%^*`0c4-gc>n/e15Fn'?Y6V^Y10mp8ahmMS,Z7eiD-lCU4kll:,-nsA/U!(,Z%'5)4d`%9W,sW/V"7gQiO]P,s3^PmYe<+l9F=f%V
%"]bU)6KK&/2MdAXi_`HjXqE7>)%r_+40mQeaMG/rmt?][4Bl>a-m`jJ%j%(8_l!o4Rj9T]H3cu8Z-HE2$:^^c=]=PV5ljk&S[Cph
%44KM]CsntJJDPJpA"<pi,\5hA4F'-.F7Cl&6U=.,>g&9QEO_Ef83&t%Pn:$,5%r,$_^.W1];<W-aCWg$9Y?Aj`-!a(W"4d:*A<"B
%_'6!;E(FVt;/t(1Fs;4t"4u#djK3,p>/1;721Ah#$<b(r2f18NnMn7VgRJ]WMD-$%R;>3C9SR!)>hk:`!*khFJIPJ>.E$`aJMg:,
%1Mhoa3)LYHa_)Fm-9Ge':^[@5Z0Sp4CK$,/ZiDg?W8Yh)TUT$n^p?"O-9=2OCOq*t_[<JUUC\mmWhq"E:io16@)3Z*O(n]2C!mac
%X<e%.&B2Ecq$LWQA;?*VC16$YDQH9C),?Y6^sC/UUKe,8jil\`!K`)YK,:d="c?Df#\F8Z,#fac9h1EZOr;Yu$/o6-B2f.1(^9-_
%8iNU6&/I,3"V+6T`2F*H9gT.dE-lqep"nFq]&(EC*2s<kUMY)U&.+AM$bQOECP,JRjgU!V89H(_F<VmHTW4b^e;[+'>6n)eZFCI?
%A2)k$""Q\Q9#XU3n&a';E1^UX6ZV_&0I"@#E?lfm7?*BH#)huQ^e.!%V%TV>SOoC$.`#ta,fIL96dQI$0qpWeTV%tfq!93(KZY,O
%d[?k@b2C[#.>*D>O@U-L6=q'no?G(EL`"92PcT#1$q;aK#'9eOK8L:M9+8gs@c3>sL,.hr;c3pe1%=ZWo9`c!/?!MnYc+9)7`>pM
%=:,hK5m:<OW_eG5A?BoY-rRT*=;2#QY[F/hY$_k=:gdj,$DfMgFu^ku`9jZ[lA7FLE;++qSInnLBF2I:?3![N%6Fnq(S!q0TIl(^
%DmRfBpB=]+e@A4SHY<^-<UiDLA2)k$""Q]*P`2:GhNOpUi$C,5@7J29S9k6R$S@6,'e^7W$l7f+JX)$jBMkL'TnQ(/4*M!K%kRed
%(,*Oj3/eHg_#aKCA]SL#8L7?U?uMn^-<CCmmT^V\%O`N$]MQg+)!@B>6P6TM&rMj+(9S).gpo1B*)IKhGbJ;M0MW;aL\**]MU,$h
%,u_h!M.Pg),J$^s4e`<!#FN>\nU_XEJjjKPJX*dGck8s6Kbgg!jk[Hs=<%SYW-H.CY$_k=:gdj,+\H?em;bgtM-IVYZM,-A6(nI?
%])$;7BT_4D]Ptj_:D"FM]4b@gT`n*B)3N!L@c]4DO8=#+CPsb/;&1bcN"!YZAme')_Pl,Oi&m\d)r,k/]B$h?JOP1F"%u01M\[Hl
%$l7f+JO9_mN(T23E@,a%WW]fMPn4$.(:#(n@O,r45X!.)E7mZT#ur_$js/07WIfm?V@"AF66]R6#ao*Tc8Ph1&n2\F6*eM@.N#-i
%'eBJ9$n>3Z%5ADAM1J%Z)9.c]:,sV"7=mP(LaH5#iL4.?7@B'k'[!Kk/7O/;*87F0(s7suc8D:DjbdFH+@O!H7At20MV*Xb.l1'?
%Q+=:q.A7dec);ln.0D6DlP3=e?72gsgD3Zg0TQlL8J*Hp7plPRXR3BM'J*sr;c.:a&k`E)dIiFueeV36UFK.iPRPQ9B4+0,6E(ge
%i'!L^]YWDo3Qm5'Q!Y';D*^T&W?R%*L;>']/$KYK6E*AP>%^arZq>:A<!b:`=:r![@>lTE%d<(("$X=f.\SU%9dXq*ad'\)4')Uo
%!fBM`.hjcJ`qa6):db_'-q`&O<sGFb.ml`+L*;KkW[.l06nrXO5=6=ZfdWnRb"+2u(=@j,m1EX&0Ye)DN#'XA'J*^G$EVHOTaW6h
%>3EInUiKJ631ph]GeoWI?kN94?tDq;V)#T)3@31n/P^u0^S)FKmeqk\;n]['Fkth`)*1.iXMX8eU-+@fie3Z93d;%2Vu'Rc(cSH;
%88_CHnV/,8o8BrKo(50=+8!KNBucmYe8S1g(1&p+KV_j?q/<W!bn5YPEDMVej,cZ*JTh59U(BIo1Z>k'D:eC'-k(<-L#q7q0\1OA
%E5PYc%I@U^9rtHqf;CBq(07X5"\n"I+oo/s0Pua0;]JYue\c_HK*>B'Q:4bi$`al54=j>5hnub2^+:>nJml9g`(C(u)1lCt;gNQ[
%UE5+d/IgBZ#Y%QPduceTJaoTRXPo'hfsJ;O7#Ekg].#2^2O/jF%>/IRbqnEE'g,BOgRDl/S:e;^"oI:uUTpRm.;c`Na:@6kM9!!&
%/@81(XFXm&BQRr;((D%g5\!YQ`(E@hX6&n-BCPEg%=nu+PClV/fTkk.UItc2n1HXU9GmsMG?oR0(/12I0\0*uH[pJpDf*X[0t(Kq
%AnfYH!!%*-@-%AVmtpnDTEBfJ$5S>jj:CUo2JGr"(5JdRbJX3g9t@$UmVR#V%3!:)m<>?kEAK*#c=D9!(g[L1bGIW\o'$=4U4=:3
%Tf=hrG@aWW1)-XG>3aU5,!-Z%a3\lh'DsM9S)f);bh''tM(9*Y]TpBFi3EK$i]ci39\n:JBHn@+J\Ds`EL7ePB$S5;D208f#RO=:
%.9G7u79Z%^HlK1#9LS,IZJRPb(j)9U'D5/=Q5GPo'`gu()9S&e:.ZaiL]5*KR-<iuO"M-&-j+DLp76A4TKu_FdP2YG/-KlZH/UHs
%[K7rc.?mGf@H1T-N)Hec_oLfAH3AeU@?,65;%55sV^V\5j>3#DS"4RlW/;Ebf1s>k9XA">Ge(46.]IGo^sLmK=5PJO9e;Ol7sNu8
%`cVPenko1H**(Hm'9#bj#mcZJYA/dGEmhsOl0]tM&qb1m,%*u*6Q%Z4.Ahce(d',-i$Nib>nM/lY27PTn1%`lg*ZlrM+_Uu.hS0.
%RXmg,.?'r?=kd0pMGUG]4BcBCD?L!+75O>0ar-/%'ELkl)9S&a%Oi\cZ_6,`.0qNQ4HT-75.Z/(=?R"$5R<B>T`<?p]Cej`-.cSo
%!r*l&Ktr3=Mu.r@5LDn#P0oS+b-WT7#19SfLgtZ'#f@MdqY/]ZXb_DNaiprh195`@"G[-4`VB#Zp+:/4<c%:tX\?0g$Mc0hTs>h#
%LB^qJ@kTbZ#j7)SZ>pCbZ<IcKi`cl!mr2/Tqak"8IArET^]2%0kr\?(lFBKHT8%j`PP$sSXotnKZ.6hh*F5e;^ZCP_55W\l`s<\(
%kSVFDJ^.26dK/O132qgaK9KKl&)+>T4.X=ep%L%6T6WXr:JSkB)X'3s>7Fj#@V^qO9=eRmIENeFI.c&Ua7pVmkSV?-".a)aU]\mu
%EDdVM%O\ZiT<r1]G<1TTg[A@<54X/iSt(X5#E8Rs]hZMs!nW9JI;sSPX]A2hEg!!.qP8]9!$)tkO5ie6SS-qY!p>D"WJc1WP?QYc
%fs9ooS](EmpFT0JGrJ>kcGN`EAI))jVU"Ai7!VkIdm,7oeNbIqBH&ce9fEsrq1mC:1_<fR97M/r@oIa8bJR'Jn`EhGHrWG04.N[8
%5Nj@R^X>]dhu7`<rK[-;o]-^93Yd*)=3jfbkb%H?SFk.tNeabt^?(G^55Po[!BTXnN8oB\Gp6!:HCfqVY1PZmknJWm8T]EVPBak?
%l&PWcmmlWaM>3#tpi3C,-fUqMc80Ig55QW:<O9I%&7*"r9D@oq[l[(LGk-,$:@EJ"LQeUfG;s:NJ'^c/I\W*O^\d8Uq\/E'l,e5G
%F;jU-<R9-5dQQc-3-<Jq`KQnHT5p*c^\T5LnMtKs8+H68o/n#]H(KbST%Gt]knAQj8T]ETPBak>l&PW[n&FS5=nm;'n.\+!_;[70
%rAco)5,0;d1X+&[3AZ`W@5,pF@)MDMfn,)V_^MVT?kH[/A4Jf03KNnpHW,c_ZOs(AFZ-$JB`o%A.#8(#>HQEna:<BL,4_6nUZk[<
%D[b\d^;!9;N(s9O,Y4s.@P0M`^.hV%)GS4u2Zgbe2Xe`-&O;lgQb4WqCCcrjlX0S.f"@,k'tlU@0?=c&MPe/0&QkQmI;YC`Iho;e
%Y5"$d']7J=;u?MnMK_;j6Bpo4@$cKfa=;3p+&D9_q5KAD"UQ`-5sU*p]=-fNVPUiIT$BfjagtW-%=PP&-;K,R_:r;4)I6&Fp#bkZ
%rZ+Z;X[P0.MfJ'UJi8^'d@0`1N:tSo+GQg#^3kEq7M/JW)'cG[]q\juD1%a0e^n2g#8ShV$L=pUC'#muXarH$9LQf'L?l5G<7R"S
%%G.ud;.qI6X0mRdgB:0E^\;?c,Lq&PJ/#f1ZC$Tq"%9;t-#7F!oW:MI`+1>/'EPIQ+l:G\;etHXUk3M`a%(5rZ]&*eUH?m[`c)Q"
%*\-a,C-!L],dBb`1kMRh,[&mUR/Bas[2HdeE5'qm"gl?75LW"BYHMTemmS0o-L!kjjld"3auhoL,W]8o,d_bZh9<V!DG6YNA=kD^
%^pMG'R*03jq`lZmHl_j>QRqt1E]C!q3e+pg3IU'6guED0CQI3>b[]#GYBLC9pN%G>hkD\hlQMlAEYe&/3=GN*kF:_Jm`4D162tK*
%Eui0S;U^!>d?qFF2.,-kN^ga2K_*AUjGh4U"&>$.G94Ua*lktfW#a2H%Jo>^:4o.bJpX#adP)i9+*%u7067c[4.gD&hfUk):Cd5&
%D#X#t%-47u=[6HLg:o3k.h]n_CKu0+6C49uAsW0:/j;ktqeQt,-fM?N13e^Q2a_)F36u*uU5tWW1a0=>:;V:j=K&]SI`+g"]ZNfZ
%Dg^?`^Zo]1St+$.8!jFSY*X)`5L@)Z0@]=cN6/dqkMIIM<d1^3oY2cq*gF"X#4Hpq)rgHfO81fNiA!X&$[^'`b8V@1`Hm!S8T_Vh
%8SIR?\s\'#rO=sM7phBYqG=]b3NB=;b3^1V!'O14T)rLR?bZ8rS;-,:mbp6Fk(A&-l=l8RDg7_G_fe!lh\O4\a@UKdbXlL:I(G_q
%f_r<B3CeQ5>3SgLq6/S(DW/C%.Hlk81&JEO1>Z5]N$Df]%9E%FBU?7La6e+)n$BsUGgi@r(k+*K)La<P)LhSS_k?U6S0Z.UCuOp,
%qe!m(h2fa#F$DkE6c%$;bK+T`ln\.d?ou&pRrtXTfTtCiEt=t*b-q;0U"e/UC#i'EfP0DB#+J7]<h2D6/D74I#kohk2qoGJ?sK9C
%q+hpb>>Lk]r\2@;,C`g4`sZe>meDaYgcL#R+nSXb-K$V#gB9X"r5k*]NVpoZnB4U^M*9lE3F68)O&t0s4$N"[>b2r2Y6\>,,[1#/
%^tg@g"(%ZsI-.pJmmB`UG!gp0!T4D>]\)OLF$FRCH24XoJZ3tqg3%GE)3%3B-3U#]FKO"JJ`&\G2=ZfGGKW&!3m$anB3Q1u=e,g1
%b*KMA/d3_FaC3\bKE5L&9A2[WaOo7K^o)KCAmF-$1\*Ri\re5'"Brj&N(BR1X-Xb,0A$fR)!gJd537Nc"BV2"m3.HE/<)E+&qAf[
%bg(c'01@O_`;7eY=8*k%MkPT^^s;X>'Rc_320<t0,"]<h^m1go$2SI<Bq8g#%c+B!OsHT/)=]%D3c$Ns``P0tMg3K<_G&UGMT3@#
%P9*EY;nMC[)rhO1'\""SM$#WeE3^'0^G:!5*_gg?76Yg:7YaV;jWUTKf#siLNL*GjW,NNVW"SKK$D(#0dlU$mgNkEq3=sm#MBe>&
%Xqt]C%M&mVA4O*sp*?2B!'/_XHX30DZORQ]Lq2p7(OEC/.@%\Z5`\i<R`'af?F'3paS6%Xl0;+0M1`>&i_Jd$boR20DheDRYdG%B
%Y$N2k=obPTimXjf#]$d1L=HX^%iO)=:9RFJ@dL<[]ZB:JQaNi<=$7sHghS#fq0jfcK<Tjj#ZQ3@0,Pr3li2P]Wtk%["O`VEKd3Y<
%N1I`_OZB[^f%TsB`1%E24Nem&P"%iA40eR"bN*).g`+!3,@.1s&_<sSLp_M31%Ic(EA#]9=W1'bn^B-=Jeq^uTfZ#r"n4Wbm=OBS
%f37DI4QEN#P6WJ(KJJV#7_Zl>0!^F^M!UpkLH)HkB4Ks?M+>pUZ)O`Q&G>P*Q;Hjind\RQ6CR/=Wrt0Jn3`bm84MoCcjAlsl/I`"
%I.PgA89-Ff)b(rKUuI_W*O4kbLHkZ;(\'P>bBg"'Y&j5ifVe-VY.+2oDf0I$p@]oPAel["dm(G_rE3Nd?]%<-=imc"E1,&=''/@S
%EJW7l08h8b6p\4-5.$KMWNa,)='F'XZRA4WWjAkFAN++GqC1u4aVN5a0X"uULf(*p@r&uUdJAd9o0)b*<`P9hZ*C7MAjoqt@A]pH
%k`oI2"/tOQ/0W/D;\)>&&/n?F>h)iFZIn?)Cu?Q58kYZU0bc8>`l'mH]0!5]PFaUhQ\\\6JZ).ELQgP:NDlA?oEDhl_#H4Y`+rIW
%0nP1WV+UJD<0cjDW#C)3<ErG$P@.FU@RN;/OH7&_j_+m?!Z+'986j^nI[S^]S?cC!2iD13$:OPEe%Pf>Gb!<,f3HnHrl2nMl\lIu
%Cj27@+)@Cl.Z>forq%2MI]8&(OQ'/P!_no$0b]iRA11B^4LKr1CR+:Xf!O%>dM2W>bH/-*A#Ql2OS>/bL`;MW2OnRE&'75a9c4=5
%+mWPiPbg1DUb5Si[oBO]=r,$:R+qH5_c;#s*K#3sL?NJo<$q:-S"%&67f##-O:J=l_r7-XV'P7?P,f-Rij+X=#-#ue55fT*Kc"Yl
%F!B*'P-q/-^2,.W<^6?a0PAXu>O0R!bEaPg)9Ha<f'_cLRj%'fQI.ijZB#K4@rLf,:JkTTgNeX[HEd6-EK]/#=k?W0$Of1$52CFW
%#3dTF.'!.%7ZrU(K9%UuSG:i!3K#Q6kIAWD0ojRk1u1p#/Z$(e#(H2QVEdhsTn*sAb?=bf<P2YGUmVb`e/l:82ap]m/A-o(&J^IX
%T#"-r-jt9aiD`dW<a4S?U47ZY/WCXjG4h=&,$F6.S7K3Y%7AK?gHUB`Wi46mpdp-p>3K.<-h0cPj/+'KrHLto=BJ=B@Xno?3E8LV
%0UOk2g?2P*FuGa!^cHDWor$!KP;<6A4b]]50]pML\UX*?l,1_t<bm&+RD3mIb9fEpo(qR?Nlt.Eq:*)ah@Q=1b@RBPfJ;/GGP%a-
%iC469H'YJMAKCsnH_Y7E#D$.&8LB,NHK3RoIN!c?d1'f8S4.^oaNd%k8.k46>TdekjPI%tV?6\CDq>dd#39`/MPlNO]uPNpkds'N
%bWS9k-Ts#ngR@^SKlHQ;.oN[>l`Jmo]B1Ho\B*WNR9m&4FYD@=Xqr.bKkRHmWsg,2'T[/gERHki>Lq_ff5d[U%8@1BREnLMD-h^<
%Hk9c)A%[0\m2mG&G/1".`GTUX@QoYR>oXH8CP&k;'$Z6$Z!):hR,`RSEd`Re3QBfpPi@hL/2!^Z/WL8#h+C>bG+OXd[l8lT5PE:3
%8FRDCh%Be/WJl*#.83?`/KI\9OaNW/(;=hRGpBJ=/nO`TiXE4Wn&4OF!`FfZ\G([t46rZ=Gou2_.OE+RSUQGUJ$;'i,24Fq=dmUj
%O6,]I4U!91'=Z!!$o0,$E'fQ>Y;307hNs`,r2HT:nV5[sd;_MOh.uoqT8Lo<B_;&6qQk\%r8)r&&&60bq$[2ZnF#3*5@5HAq"&u[
%,9UBDGW@%blb=PjJEsru/AN3P8RR'Un9SbuQ[_SGJ2_]e*k9MKRt!DO#la`D(mLcO\@Lu=.'PqK*%J01Il1>9_u4Vci&]^J":Q=^
%bV=EnnTX.*BI!=,GecO+#ToH3o`,&3n0irtIs=,4^`,BC,Oc5)!X\eBUJQQUbKI^))qNWY$,"*LJ:daYooOd=g<2bc>6$=3(&[op
%!t09#hLu^d0BL5is)F.Z._jj:EM2:Q%u:12F/q8"Yepoong=MLp*Qtu*;i`QK+95X4m]s'HqE7I'Dj)L#J7g#nA,Thqs_MJ+)VkI
%UCbB:&#UPg_o;?3WdGM@i#a!D,d)VV`?+pfG<lQ4_olHp?N2=&$/XSJ65-m.@;s)$Hlnriq83f;\G=&6+UT0If7Oc$9eV8NDAL%4
%7m@>\4C2Q:/]WW4Mjlpn*Oao!Y6Q\)q%n]:Gl<s305_3Ga!$D25<L%+i!mCGN8`[iEZi9^l1Ilm:Y;1uK,Q[uGWr3[)a"OFp`Joj
%)to'!i.f?\%r^qAY6R%3q4eLVh=j+SEV"r1b]360k5ua;_3]g9CbT3,G5)O7_AtQck06+1+cjg@r;9sCp`p2#Y.sr1RibM1g7AbM
%HkPXdiA2%(!oXe@6>.9Z64HL?Yk>tNI1lLdVC=]`If[e=<6sJ%GPlsjbPKij]4CqYR8EAOf6@8HruKtplHe$'s)pPO\Ho0kT;!K\
%dSpg0U2D\bXAQ1eO=*MP(*UgjBQ4G!p$Bgb_$qek'i=0rZ@R3s1,gO0lakUd<*1=Uoi<((?$2t4;AFRJC_$A\mG>#:4GZhT1kV&D
%TSKM(NBngMV`M3%q,j\NHqcRBe?jA3$O]/a,hS6udPEo/[&\.e?/&"(KJq,m@_]ANLkfB.C19%#YZV1+Oe:7"*n%lb38'Hu4\uO=
%"4K\lW^Td+S>:,Vi$`u&PqG^I@-!B(9SBk6]*FPn'WU>["D[\(0^,9g,DSP3[0DE;aZ>4\*d#gBeffcUoiP3m!V43Ii+%Q(%>M6[
%o-OQq7Ij1t!jQjo@0;\@Ck^DQXi8E2c1\E;ngC3=R\Ns:\I`mOd&^YtMm@4*M8[rM(U-?0bQ6=bMgEX,(+,'OA950(S)W)_j_@:k
%\kN.sSKaQ=GG>$rC+s?ROdW[:)93i,_#iUTC.\q^$pOTj9fF!lAXnO/:c#q,[h+fQ>ue!SiVI@%BA*HV6[74_IP=o#XcN<K5^d'T
%"Auq/%K)I8!9l8d9H$Dh!E1h>,Xc(OOXtqGJb7GEqP[;lcnA94Vi+(b+T?nN%=;E8]cHB8TfQ03k.iHQoU8kG@=na0io)(Wr%+j`
%l4mkm9:(Jo0u%Q"NA)qPZUI'$,TU\A.pGHXGe^4D=Bg0u_Kr==oso$'f7(U"<ZQ$0qP[;q-kuIH_r[R+4a)>h[8TIIJ#AdUB[i?-
%2#om8IWLp;a&8P*'>3Y@pTjXH+9"R3jYV2Y:)rnRdAYY%i&,(o;;\,LO\Hr[pRH_h.%Wm1S)PWj.*]jtN\4VT\(1baget1RFj1u)
%>W*iZfV4jTgcpbd`<q-1&C@s-T1T0<E>_7Gr!-=V6C!2SL,%-UE0Xo"$k=e,TOG,Dp`!,C"/W7!h\;Z[n@8J&'_NMa-;F7)?4Wm!
%V#dakg#&$c?gN4UY%*1'FbY?d(.<+I[I[8"o^piBl+FoB[^LWK*NYuDfoPgs_u-)1eEJBS*R,4Uo21U:YF+LJJEDuCkXWH\F?0b(
%;EkN(N0%aWq,+@;X2T3B#k3!uPl)L$<HUst9oj3m0&Ua[^j)8m?@E`]E,;-K+FR9ZeG1@LUmK'ZZgglekTi.DrH&g*>slbMT*9IB
%;9J8XNj$THSjYIZ1%'*N56QIWb/[Y(&tI7!PLRn[ganRdD/XEqS*>kBq^a^djo-D[)B4:p_r10pVrQ]a%)+\Kq`/'`T?>:TNW/PB
%;R;Fl[cFXWD-[%Nk/PrTlY^#,U@uUGYNp+3rMg(B[J)`[1-KQt:V6?>qKes^-%/dcCLUZ"kSi2WFo$5sT@3!8#3%!DY)bI<<ISWQ
%-%DlTYOY%N6N07!T>fE=I]2Y;G<[q]oe#'_h^kQn>5oe]^?.f-s'RZ*=o],KC]gbs^VC2leZ[^.])!^G!11E9$fL$rXT;^UD\&@N
%k7-t9VohBM5k7un!tEXnecDq%h*/?/n$<eH_pN]lLq367k6<Y>lq\G#5",is6-R)(,+34PAB$2g8EfT;&10YFR,s(J*V%h@AIN8K
%d2fr#A%,(86`_%rldCODb?RPOCTF0h/l[LnQk4HZJaaDR"D.juT9f=;pG1$<4@K0b?@@W.>>klTpX:-[1^tGCq;Esdji;]h5<V3n
%\E3[U58E0,DoSUQlLrq=I/E5:rpjEGs8B/$b<LE!,+sJYRpZ3In,D?3If!KdqrKL2c*oq:lML%!qsV8tiOcR:KEtd5n,DTj^\da%
%GNZU;ns<*]n^g#)kO8BGq!P?bm>o#oq;K*en^kPQos`iYDnl>G=24_-a5>QG_o%uCLL5Q*YCHK#q3GsumQ^^=gY`"ur6&[;:<h+[
%.mA@Tj6s_ZmGHZ:=e`M<X@L&'5C`X4hu2STc_@Cbqk!iPEmO:FQiH3[?iT;=r7s)"s7:/XF*FtZJ+N41qes7K-i]_:l#+67_mdDZ
%p4n-Dj3Mqs^*D.j$hk\-REIW@[H5Or5_#<B9,9fN6p+FPX-LK36`,!qCtEJXNoS8nJ(t[V9d//,5MS]]2!aXA8#arjf-)59NI0IN
%OBioVLl_9mDL$WUh3WUNf/B4-D3gde\/>0sMtsX$_ao*]4G]jqA@LT.iW9)\_-k;8.oJd5e)VeFECjtQH2;)*U3&BPnW7%sAW)WD
%4DoFlceXq;3'4^DRjIqG1W#](qo$1?C7"l&b%mDF5jDA0:.W2oNXg&5.Xs.W?]gc=qJPV4<7[?0-Xtt<p<h7FbDb\PT,o<Ba"7gi
%5Q.>nr(+IW=p-h[HqWOeHL7&s]8W'u07*Qgpn6Z5pYYt?:3n]Jp%.FD`u<q:J*JGG%!7L,Vq"X=!"_=p108VJMIu+ZeBp<,*^BUa
%X,bIeVQWA0aXZ3aG!c169Uo/r['B_;R+k',2=$fF[M\]XI&-?c!Q'hk?$;1MZss)sB`7L#n6sqq0=O&SQ_tqbj$f#5*ZoM(m:VE#
%ICYM5gdBPfnC]/NpC?^]'_"N?Ms,=p9T7c:n8H>f_9.`7jip@T/Z6_:8-Fei^P'_PE7jE8L[91l9Y=_RhsgE.qsSu*+akgJqBZL5
%):HY\;Fgi$b%t,7adCnRfd0i2:I9L7kdo`3p8.OO,N?-SO9`C6b@hc(msoi_.5CemEl0L"8*f.dKt^rCb],im^`/bC+-1T5/0]Sc
%dk?bXgipF2m,rK<S*o^:FA[XPLme(G/rCc4J&CH]kTV]CEL&ejMgjr_Iq70pZs/WEB\'S^-s2#-[s6$cqZt3t,m2Z2>\.*F(6:G3
%OUY\'hW'p0YPk+?Ir#scBu?%d1gYXB/@l.FU%9j3ZLcNUnaW?o/WUFRs7V@pFEtD'W_FS(#"nMTbjVZtZA*#Lb&2sR`.3X9BL?:=
%m%Bu.f:d2P%o(;V>!;fum.=#XIEP!$4#ASH07)FEpn7M&ImkH-P3D[9+8u1l4Es;9*.ufWdF=DgpH<6]9tY$3r`Z^#3[q@0ZKm_q
%ieTc)SDAV:MRAYOR`At]c(?Uk$\/0jFJ6$GmWaO?'B[a'/W]cL?ZZ8+D_5PM/WF7F-L4F9Gfe=<gU:6';KZ2c)&8K]j9Ah<GJ7Dh
%OMBo32l"S%7@=,(:Fl<jf?5`Vfl^C,nUAaCQH.V4J+u\&pf#K5(YD_`Z.XS_?,\on'#&Z0TK"u]\4Y.'LCGr'\k:B9r$o9[FEl2Q
%SjX[>/6u0=k8uSr]Z#!,h+;/'jgA<]f"<.HG.QLMhL]'F5M&?6p3=F6L\in$mI%a`.=3Ph5=30]T8PuMf!aVWHprZ;Q)n]rB5CD8
%(+eI<;oqAqUIQ%I]+csd3KdA]k.^c\Zfo&![PX[m]]=:7gSOOk`9RVM&N:&t]]/%.n3OF*r-!kZr7mLc?gtS]rf$aC4Xluo>6/n!
%:QA/1U+4,V$L[OKL:pS:=4(S9%dDC\[;%PbFpQ2#[X1'M<OD24Gl=.I]DN6'<c.$SSOD)W0^4&&j*(;Um_AK2FgL_n+4P0h%i:O'
%SXLn$IMeu%.C%`0Q%WWf]VIPP7&T!)UoC'MBY6F_%Z0Fi4kq@ZW0UN'+<3TbfDn=qms?(Lo0Z;OJ%O`Yq]"rfp5Ke+;4pd7.!f;B
%YtM>RUWW5\>LcL)[m`7Qf;0Kf>8dj\*=.UjQ#cIs'\QlI&EESAlQb^$rHu5@kW0V/h(O$.DL]\)pV+(FImsepI59.>[7hiU1]`Jc
%N4-Um/F*pcB]ht`4f$9.9]c1Ve,Y'p!2B$JQ9HoFTQQtDs1#Fg+/4I`4!)gm[%Mm8GY"H0onCH@Csg;pRr9`K0@JPd!3^5gR5<2&
%ms)oVA8f@I\ob^_pK+>Bipi*n&.ceN\S@`qqm/Dn]`.W:O2(Qmk/eFl?GH:$s6$#'oDS--GC,[)G8Of(s7'1V&-)NVa$$1V]6O%d
%lkfZ5hu*2'Dngf!Z4F_Gm>p0'p3KR?Mp!F3FEbRYIf$0Qs8JX>q9/9MF4.*rp!V<:%.hT24oP#X6(:;Ro/T/L?[8X?r(uQH#3Yg6
%2^[_:URRkTG/%R\T"=+[ejUD(3kY!`Zh^3n6S33cbf'Rc"HU7hk\EEu";fuOqPi*EqlaG6#?:,cSJ^Wk;dX-?TGs;TirVuee-P.I
%!$Q!KC'F!_F@:XN!K:@gpIMT]UD\4,q'<?]]a!JT>mdtZ#&F7iU^YUJSOL>B6s&7YG*L7&:]L<m'Lt$,K'm:05]8(>5$hiZ5+Z,/
%9>?hQR-[t]V<#f$0E1L'ZcM!XGBBh!q"Ij`IGjXS4U_ijn[Wt\-PPtKnhe;J*>*eL&77^jI,8rDYSuNm[+7f9!'D%>+&>><FmS"a
%L^jX!2[B9HWJKFrksDQiCP2<I@,Sjlrc!uh'V!Dq"p24!6I-CrGG$q.B#<Y86j:rQhH%re*'@ENGM<a[l::(_'.2cATOIb)IEqRI
%c$k!&(9pWjhsU-Sj3.@DpE09;VYX#"nP=^91l^J,I)WndUWrb`+L$_u1LlB54`uqa/n!SEdE[(G"`QRP/piJP<b#D.e=;IQSTh#*
%c?ngfg*SfI[C=<Kd.<hihX:0tl-'!JpE0:fSpE2'pnp:J88J,rh,B_Fm<28Gd_2PV!sQqp9<f7LhJObV:sEt9;Jc0,9D8X5a_>Ua
%KR47)]oJYh+*uU<rc6'J:>b/W]DpCDG1;^AW..B#$9W-pQ9Xc8c];SfT:t:TrTkH3BB&=)5Wrg0a-'(bnbnopASACHA'_J2SC0pL
%OoMYi8qcGV.\0453X>"jW?e)]0i50'iHu_;5"eBJ9ea]@cr#iO^i?K7*'hto5)Ya9/7?]Wq$eE.=bjs0jbBBYAR$#Fl!keh+$BQ%
%[5Yg-"Mb-:-"HH-s7#&]%mb$rEsk$E)Y</2H=i8>V06i@oF<W2E'3b)Z+B3]+4B_shIir5:cfe#GE=uCQXe=L$nJVdTcIQ0%5Ka]
%6=c)JS9;J?I9eo2)A2KlU-ojO96Pq%$U=K0L7m\:!-203^%McH0R,u#6e;Hj+!=.1K,#:T.+_;YSB\):84a7H_;#Oa$E1^uQQ'Y^
%8WKu(l?qOXbLfd8D",O<ol<PA)nng^99o]W1MflJWtI9?dY+uf@WcN.I#E5O*3-"?R;BkE\f7ZAd[7dO\eglBiH'?n1II.*k<T?a
%Nf9:;S8k@U"5r^>?B;ju>Z!J62+n89YF$u_4"'T1+<8@JerJiS:XVhQ=#X!D-u-bLk#b:[1oeeJK>=!QU-p`..?cY&o*Jb?P;4J_
%(gEoXl3qMc&"cWC=dN[t[qT*pP^o!84^+[K.`kq4:kf4Ec8YhH=AKrFC85I85Ri04.pi*R6EB*_$DK2?FNsBR\f0p1bJ(K3E&H.0
%XA6">+i]<t4k!Y+[9h,l1b$'^144o3Xq*"9D#&d4D1r@.#3PE3Ynah*lkr3CXF(#g22D<['gM+)^U4Er4;Zaf9b=dim5V^9M.OAq
%G;Qf7)ZYGj@m$XZDU-QgHP,9W:a$?hVh:]tOZIJTaco;Ed#p[k)*'Q;>(K>_::EA)/(nS*iK5R4ct!CYn-8/Qm-hl@L;(UR=<6o]
%WE[']3Z>6KeeT#a2)-@lbd\'CpDK.d;`)4p<H*uPi`sZGXt^$D4)(9P'Y(eH%V*r(`;Wc!!<-._8$Sa"2@0!,^ugraNG8[03bGRR
%I2?a8X&(PGTIees!)!^$oniU&XbGk"fqPGU7$uQd(oo0NaF_hoWfE]NmJ%Qi>af_^D6dp^qIk7qLH7F(!t4N98Cp7BT?93Wba9MZ
%+6>8=G8'r_BOMp#:SS\C0K*:>X(Io1e4<bF!Vk4f7%$TQQ5U8]W1l.0Xmu/edqHt6:KZYe(=lCFiXGu?6`LtU1omcqAUmN3_FpV.
%.Bm@kfPI>79'mZj!A,nQ_B-C_6W6QMSBaJU8ZPJuHPVhQ'mY(BUi[`m2EFNB:f`>SU6&g%##h]-.b!OIZ"..C63;LTQ*eLfLfiuo
%f4-r]d,##Foog<Z0A@E3V*k)$<^ekS@^.LLES+/X_3i=2,b5,1%$FA%f*5t?DSj>%X4c!$7<S6b0RZoo6?$em7&/jh![l,/S[^%c
%+MGc0!W);"V6gmV"C_AM;q16Q!Lut6NUg6n%g=>14JnrU;P=k64u6h*Tmo<c=dm`M<TL*C7I*:O`61.pSX+4+IR>iIZM?e%=gZ3:
%l=+e"-rf3e_&j`*HI12QluK2/XpjWS3_gp%dLts%aXsVMPehLWL+!;10kZ]Gm.Gn-]uR9YgGN`tZj:^a__5L*mCfPp6u-QHP#()k
%I5n[7&5L]#5Q<*RASX9n2(Yam8>VV&M5@&s$h[FR/[LJWG?>2H"s1"1?mNa\)3Gq(ek66IWpsIeNHHmX>YBu_qlF_)*4Q#=SN?G3
%J]8!WRoa)#>iX3V>lcYS6oH,W^Sr-R+M:ZsD?<VBkf:e@][)\B*X#jk:cG6tRsPa-etT#h2jp\h6:S/FI>F\.-UsM?R"WHZe(<_C
%$#IF\5C+:dcum(\QLa;RG6#Fn0la/F%\:lt&Qm%9EJ,HMm)GXL^rgMuiZ4Mn@@HSML9=b5<b=C76mM97#?1EViH0S@R^.7.D;ZQU
%m`SV]7-X&31>0nL-MN0t2!Z9:q$:2eMiqB34(/-4'$C*g%mgYW+hia*Sh.jK-2DG8-4jdgh[t]"GRh#m(bXSdD]1Z@Z$Zp@#0+)n
%*>TQR%#P6*$G6M]#&h8mm"Z6;n/(D@!-?bPK`WLa#8paRmG17\MM;TDlNg\J<PoN\!hoY`a:H.%6pg/eL"#dU8aRtm4,Q)3YYtR>
%0VCKXml7>r2PBRV=n`;jl7s3'F>Sc?!-rUdI7r55.*]4F%S6<6a;dn?af`?"PkJfsm:]RK,AC)K"CfW^c-TW2KC0L9P/ShX!D14o
%0GV2#Rb_+nWe,;YF'0t=3"RltbN*Ck<`2-.q<4SSC#th."J\4J%KcC#Yts[r9Y,?"iJ6ABnua*p-2CC'<H,@Y+jPtV1>m8E11`:j
%lTBk/acO?1iVTHj<X5"n50O+4%UmsU_<taT\Ud+efgS$&HV%G;:Ki3MnnWqjL,>q5(d9d,i!Ttcgf#%!-s9)mRO,'4c6UmOL,YKX
%S)OBV#1g<=)3&S=VQUH_*G?3*ZHn#%"0BH6Th3Me:5hq6Km#9=cSoS.<04)shodSE9"#Ln;i.8n'GW4NCmdU%[;!fFiQ-=!FtYlX
%Y7rJCp];ZDF@h-C_^9HOOVtf9lQ7G;Uf_e^kWCos7#V*Z7>R@l%$8"W1Xg+QZA`+Zg<I/BU,K@JW"d/e.-b(+%8GT7"qd];$M)#:
%S6ZnPS^X$MXm*X<_KKTnA@32.?(6AfZ6H?:_W25#$G.3,%>no[Ud3H,^:*-35D8am%ssrqK85!$:S@f=6;A;%CKQtWHa1sAD<Q[!
%?+W:qJH`<0Dme9]qW`cR3\<^MImT:?bV4>h<!>"N3&O6c-4]$)dSp0SUD\iOX?U6Vr65q(GVVt*(>I:h%DVq3M[UuJC3\<$KsgN)
%8M+[j;M[Z)KoS'#?1SW/dUo6BKLTkT25r?;!ui7tKchkAR*Qfe!Ws0C3Khd$XU3QFJ[D[X(FULoRK6:BU4Fp^<85)gV9R)\qR(HF
%/%-=/6os!I6&dqAP%hD#Dli+G9P*ZT>.9roM9lPs1+(E&.JU>J(hdA9c+P]tM#))gNQ`JV27$G[QFT*k.Xe4S'T<m@G($Kpj,S9f
%'STS+#6&4h?<C^0ap\0LCFiCaR!Ufj#]A.u1R4/gbqeC;6%kC<MINu]fkqT_8Y9nM=.]@i;.e062!O'7MESBO92NN7Yi^PE""R*K
%;OWk*:"4,:VE]g+@r^3X.H"uBo@/Z#\",`'C4HR%/00OYhK>kFS'0[>^S@E[BSB%7.>:Rf&Fd%VY`\;Zal@XPdLYg*R5/6+Ek[;s
%4_jJdSVh4PL946BCY3-XW&I+Ye=2$(R@tGJf]Vm;q9p8Zdi/+H2>2,fn#s:A#+CS?$pp6f[tJ`\73n]DC&0!iZRF8o;j9\S5FRa,
%PU=U3]c;:Pa^SZZ3=GZu7;Z)!;W(@F[8'&q'k".;+]K4uanfNnC]1%'A2iQaQ&J<.X&f,3F=O*f.20e$&+%,^314YtBI7Q))o3FN
%/3h-*7]^h+5GCs%>dP8gjqn4GiJVqjF5,<>p?MNpFE7f*"r8df7K0O5L=jCu0I"V.;90OJ:[lt"g9o`hc,:R[)7/-md<-pG=GouL
%13hsLnWfR#A$Ldh%#2"/CY.*I]s*eQgC!)-$b@R0`]7B6/-[hXd[_#S+qd[:E-7PoF?WRl4V[:`Ecg7aUAjY79X%"3F@b*5MT_f7
%Z(]QH2idAf(^XXQmV$VqFATdg7AblOigMg#P>bB56O#L5Q=/IpHp\O99*8rk(Su;-12ig4Y>*^I(-Q4A4kg@n0?^\VQ\*`Jo%D]c
%N5=Duj1>Nup#2h>%$=Mc]fqcp#\^o21C"r_'C(OlUR^!pDp9XU]4]u&)ee6O!7PKE5dd+mbG7h;TZWX7Hs9NW;CN'(2#;7Q<5r<i
%<D-,r6EE@$NKH,r2mY6O?R<5a$d2pb!Dl(.N"*jRn-fGR6/.DVCNi$9CR3hUK.00@QsCM.L1ZSqYBARsC$2`d$Nbg_Aec`ag0cNc
%3oE`4^lBgOOX4@G"Q1,.g'EQ.Bdr/j/MR=+;D!tSF"U>DR"8rq2K@Y)_@eZf,L0tHS6A:2KsAcC0RHH1T5JE\#0-u9_'6W4,I!K@
%!_LJ$FF31Q/Q@IQaJK[,R:u%!;,a+r9aq]YB-b(a/e$B>p716bfT'MVCO8ga5ja_XFWMkGA(7*;BGtPlTYQB/%,s:_8Amh:M*2?N
%XK8(e+7ThVBdm_[\Q.+(!T($091f=>O!_K61Iq.HBsK^g8OWtkD=C.dFI/N@$HrrY,b%efZkhK)5s@n`X:*b2KB*Gp/%K`Jf0Z(F
%(,Cgo_)9m6YA3h(Cm'DF/WHesD2b`=9a!&L+Q6SKZL\'#':Tk@@$euL8!P!!,H06HE=3tcbfCW)6Ri*O$K2stYWTe@REg@%'eKQD
%BXrA:='H5<m>1:,qt)TsRG^$2e0EZK%`LH_5iBm"a:[eJ\Z?$c2ukll%+MR#D#LOnV"rkMH=9@5_)P4fNja.0Z@,e`[pMRZ%!*Em
%bH+.N0+"Ti"q"Q<r)MD:L#E9\FKdOpb&i2+;^A4F_]$^0Q/!shf><-3CesOLI)&fCiS!lLCRq_+\%+LtWEPWT[&h\(;4b#,.,'"!
%e?4J=LLn$BXTq1J&&F$]]LCSs8L<"V"!Y%lHqf@k-<ZY4ArSMYRL.$9<>i<.,0.d2>WG,%DU?boGdeck>l;aqRN5J_o1IOD]2GCV
%/>eIT!_#1^?E+24]52.6VB0R&Xp(Oq7<7iROrsFsccc)]eF,ihCS*O8_p:lDZ0qT"F2lg(&2MpCB=6en.Ror<p37"jYYht)+V+;p
%rpALVgtn9\D)FA9+:#e-7)0lr"$;Y4-8_o`?[*R<5$<7m2!,D:X.Jr9E2"LQ+"eQ23Ep6G"POFip1)gmkXeNM/><19?f_+%R't^`
%ApepAI)n@79/*+F<i%6`TUM7SN^N=@]jMJek'"+\)U\]N`H')S*uNFXWmYY:XojU[K61.1^@Naa]"=<o)]L.5]S%KRerM/tQke5d
%Ke7]Q<"gY`YW1uA>T/3nKfo7`PV(:a`4RmA+1DO7>BCV.3\k=[asT9f#ri[61E%O"Ao/Wq!\QaNiAb.!gka("7(p3Rq8-V!ADsSN
%;-C1+3#^BlqW3a?8Sq`n3;QNqK5"emabcT]"PqL<bI/22qe)O0;tK?3m-@5"elZKN2J5us#E=XmK:tiOX>,AA0hnheA'Cl@M`\9M
%XI!.I3"=Wj"hj'iI,7ZsLGQ7^'(S(4!Ujd'-X(!3d0b`")#i,b6I$VfQf>50R[[/*)1X!LTFEe";*j^Xn.ZNhph1T.8/.GSY;>TH
%eVbZ\f)h9>07.t]or9l\JIdEDQBet(HAL^Df#Zf%kfMURY6;SZJ2>^KbU>E2rGRKlTOj9A`g9VT#Wdc6U=BM]4;&NMh)<=G![j@Z
%PG(==>Gn[fOCe<lO#0[-NO"9=2HTbO_1D0:9<URW(aGQYR1N$V?%%<^JpCmV/Qpi%OJA,m<V=p/L_pI=etBC6OB?4OELm!=Ab)Qa
%p(\4JT,/u.;'C`QQ5:AkIZV%,8Rec_![<%hCJDfC&L%WQC<jOjnUM/(D/-]%h1fX3+?X)-`<kW"^f^uV2d:V8et@I-O:JVo&U?a$
%%B*Ha'!X)GrBT5XCu[-:6Kc]26[^W+(Y"`k5mdFCa(Xkh25FE#nB`T6_EtS1RHZLE.P,O+g^hk0#"jtU>ar5#T`ZT[9d</:!b3qG
%@'9H81-I1T'#r<FJk?>1AP4](:PPB&?_"3$A-1_mK-dMmbSV++_,:jD*li9h"pmqO^-RWek;SP6oCphA=f8d*)/q!.?7\A"M@7N,
%o'efqEZd<5L8oJ5OhKi9jba>;p`7Ntk#TB_P8'C!"$hSXKFH(^XMCH\g?+QkrQJrYB1,&?PH1mYY+OrjOMI9Z`%OOLh\=d*C+NnY
%dHuYO)0=qs)s6rU29m?/mT.Z^fc.9N=bp6!J/j>p8Vh1=G)cM+Nu(O^$fK!!W[8oLOk1Ya8$L..aC'S+Emt-FVeD!rl)*jcF[V76
%Dhs,LdXih5CTB/c'+_p#&Kr1Z]IG!Se4Z;70\0^uB,MW0CL=)9bCE#2SAI<"m'+STfX=T3U(1s,[E0!f);X):aZ0@=c_)L@J^d#!
%_E$G[LSHfnrh/7W?#*B:="\YC<NHKV1''s:H1/ckU<6M;Q!h]V4s,=U[7-;^_e2MSR!s7\!D6(NTgD^4dTB+NaJMDV\;([-lh7*F
%IEA]S``<1-#?&V=+e*u(Hr:t$=1G)!+B9!`N!dpSF7%7`j``j!7Y<g1Y\T"k3,07T1oAm'_PE9&p;]'O[66;D5pZ#cfuBs]oaT!b
%&L905%HeR6*r!pJGYtl_##"c\_%*Q83,P)V>eO#gZVRZU6"k*<B-[iJo#6,Bq4tO[@/$,\>KYgBVIMLR4=Oj6a@YOfRO6oVbq#")
%-8V#$?=97;@1@QSB&K[FUL?@o)a'[cHUWpV#CJo]QJ%p"DirW7U=gN:f8cE!AC_HR=iUi$ZPQK`eo:O2D8>&]mJ8Q3pLF+fbi3>U
%a]!E`'Wg6ULfpA^Cs=:#,\^m[J_PhR^(@ud*!PhO/g"a?i(isW*mq5f\@(VdOoT0s/;qTP#luFN*?`QQ'jF#t"/r&Eg]SoRWN1:!
%XL%"/,J8:WoE!8agI_mrQ@!,LKZ*q(@hb3)Uo'%gJgo4A`?T%RG#+mWRdB7`C6B%S^gbl$7pXGn;>TNZ"Y.E:9Mafi^,T.*h[:lm
%R#UE&,.#94K\#M?&!>u6-uh(sJ4;RU=a1rQCnV2=/XWiu9;UuL%cebQ:j>87/8PNBP\9X8Uue.&o9)K4RC\O&Qt+bT;9u7$("5$6
%po\@Jn5.Fs/Io`$A0q'opVKHn7EcJME_*[aie9$q>-09u5q^Yup]o.j,AnC3("H"!=("%tBY!_G*@G4>UGT#B%Z&283D[!ZKCg$f
%WN(O^Bng5S:P6hGXa"oTKiQj50F,T#F*X\?>00ItBI1uD8TU;cGZg)(4JJ&u:D8"8h&jq=Tr8cHA4D14n:NWG$=409.E=ni-JG/P
%+R7gVZ=&?USP^DR?h'br:S=uu9j/:m/2OW4nlp'[jSE*tJX<05;t30CqMGC0D>UHn]:5#&XZOJL>`Am/BA:>OmCT5L7gm:)<e!PB
%_kKe&EN!f_)hpj?$Xpk23c_R%UVa3?1X_^M"(Cl?NI;=f+LfgA2N?EBc/-fK&He0Dn73qbBCNqW2Lq:N.&-RR];)V[3Yl+Ii68EC
%j<uO<ns#!3)XArCli]MuPB]=H0:G52ToQQ17&Wrc&/7s9!NSF)N,d4h4V3BJAI^0I!&ekf7g#IKVTo4,_KmJ?Gf*C0lkonh@"fH?
%CS5]G?,?ipNusTaB.51;hbm$4i"kT10$pk`NrLA_3]!tU`oo,,0kZ-8VDqa'0\ua6Ib7U[TQ]h+&FZQs8l<jo.m.!)4-R.cn'PE/
%e@fM.EaUKG=u;Z+G4mj[fSPLjJNXLY**-<n5:k\V_rA!Lo1dl_0/ADmlHGm$SoDttKE@f=e)V4OPR"0`!m2t36#XWkMc<Rl(c*\6
%@Sd62s*uh<PDl8A__V_4K!D7Fh4Z8iSQ6MuM<[@l'\6N<:tW(Y3WRb9UA0P1`e:(Z]N594R-J%QU_</-3Wp/?_Q/o8BRX@oE4870
%ipMMM._]sgr:OnZmuu%Xg,lKS)lO$O3UsYZ>Cr(GU"6Vi=DWMf*>B0gFd,0`?KaDXbYKa2l`/_<H#a'9LDUR;!WhWiAh(U2JCAP3
%ehJPi*.UojK*UlHl=\3\^h=?3a\FP>rVQSY$2%sshb6ZB!_rqdoUfu<4`Mn$q5/X440L8@+Fa#Rid:iX3bb_"e#%,BQ_B+p'12Eq
%`!6=>kt0Ak)le2S(jQt8^)BQ)+A]6E+rk)pl%?Aj:su-g6NXp_D?^L\"p<[?X$tmMc$J@[@COUm7+?6t@aTU7MO5QLOCp7_4UlF1
%O=cF"!b,(74"FO$W59:MKN)!\2TDr3`tMT)9`@6j7*hZRmWpKM",eLar1T3C3?q+1l1GOMM!$WEc]T?MXNa:D5m[lo1o.dN#b_>n
%lGN$68/K\o=jW+6Up)3iC,7@&R6$*1:`.AfJX'`L2@L*6M<TL4:6O!cGG$m':BdVI#'"?eURn@n\4lO%,##NUbstU-LaARZ,ELif
%jG7NE%]dUG1??G+7^3hLBR@Q^?%R5(+J7>a(MO</C1-NYg`.Hb#][j`Af.:N%>%R"7=cHpZ8"&;og'`h/%th`d^.+LjXVMsA]JX5
%.M=BjLF&I/f'/C1^3g98l?SCkc;6(?7[in"%P(+S#llaNa:b5=KE>FK(<6bjPU6tU4$6P@JEl+Ha\+-b*TOX3Tg<RL2,<'aHLTR"
%O2<hC"ht<CW%G46F&/U0:;YUKkq>aA2?qUb*4g`TjUYOgP<]tD*_o@*63,66L)iPd$4;*$/-/k$MX_]1.L!9`D0fq":^`tTW0PW=
%Xp<:#Ec0b%@Isp?7?mAr]M[#!c-P(!B&3Da1"(?rO=?d\UL11k@/'mT0sIe\3behmAPstM8/dTtVGSZHRXo*Z+:-90Ud\7Meug&:
%/W&XJXsLZ'*WH-o>+V4g:!Y.#dqdX!ABbEFL(73te6;66@\i5UQ(M>PD[%.h^1RTHIMR!;r7'D_f;GLD87e/.%)]H$bXV5'Od'cB
%fV/26AU86mik!Omm%+$b+N9kJB+^u59W$7pC*KBh+$B5<iU:]Rn%V,PA"?Mi:]L.4nA!e"'@pcPbI.7a"OqV?^Ol=u6qP2sFm2?d
%2@rO4JSJ(`0it[8<cSJ%*^lA4Lq6+-.Mr<d>/\@8TX&4'7qUALb@DVSfR#Hn0Uf'TE=ZpA1CJ+5TI";7%XIJ-Lua]9J-d8o@_C$G
%R<?qj]eXj\+Nj78""M'DM[iQg,$Kk%qcus;I=QPBSdlq[X:7Mq/b953cq4M2C$LJ9.4p"fN:tD^XgRZ/F7*+IXT->N"Ben:WYQ%M
%"M5YWD8em\G\DGA6"("p2,&F9e$rfD3I4*jBg?YV[ch\:=Hc;i;GdM9#?qC0\O:!&;E9U#g9KOIs)9!Ad;MP-eQJ-+,Eg@#K'^nX
%G.#S:o3@1>g<sTIq-iOss"%#7le]bG_p*q/+8,@:0N4je7;tor]Y&1V_:*+oqT7$lGH0A6./n.4\(e=lUDEL0A1JS$(K8p8,1oKr
%GdV8oJisX9"%4^1KIHT"1F[V7P?EO?P3u64m/Xl#A^@Wb&p4_+@\%Zl?YDtq@Mk7oG*!4Xrf6lid,0I(><3g$90Kh-C2qat8HN2?
%PZ#3jhPX-A1d@8@HYOIkZ&-33&Ic\#5khX[\T:Zn;[5unLP&/Ib0`XgF?mVSiGOL0*PmgAm0rJr@YC'MZd-rF;$P](J!DlK.-'3(
%KZMG5's*kD]/W9a'6jMS6iXgql.BIu:Fu]%n:61TVPoioO'@Gjo)TP*42!^9=K4rTCZ]\8@OY/M-Hc3^[Z!0GCpN@-kN&9M^ep7Y
%K!?a/Kjfr8Lhs6>j]uC94`^"5m]h!mlo4P-r6\?TJA0s"(Dsf3+u[ZAmI"l2U+\AQUO*.!;&!$d(5bc9]o0o]U;Ge)9sOU>.RUfY
%NcZ;!F\K#lEb7EP"^s?4=]AJZf0cr8-LsnE.3([G$4C@,Q)siNWg@LC^KYO`IWQ_&h-T<=+"s^46M)"B\!C^t`EuSgPq-\RQmol:
%Jk06N/MP0_@>a'c2CPi1WmgSk8iQ+l7/uu6I"]o?Os9L):P4*P4"i.g=.h1d$L>$nmY&6,-qe161\saP4[iau!k&)@#oW#aC=>F'
%g=^Y(\gnPOq!kR7"t?%lDCM:IbXbZcQmP8'Cnmr>erBeY8Lf$,+KDdHYQD:*OWntA0c5X*6!d;]?r"eP>&9G%jH750)Fa;I'En_s
%QkfWe>5?>)c!.f/fQ&lIW`:;l/7+R>(r1mJ#*2V.ON*k6gOK>];<N4^kJk'_ZcjB$*[i)oNKW**+&T&gLJ3:Dn[5KYD&TOEn51fM
%c4/>F?O$LAL7VaaobGK\YIDLO9;!es\em,M0W@_]QVsWm%8iRO+&ir+;afQPKuP"o9Q_?[ahkorYe]$nYqeb2%eI8?<,CW1MUNVs
%dMd-['n;.d4l3)$Z<7',bMp@8'KHBrOH?>*;RpDHeB+$=gt?;D*e\G"95T@s)<p!+.U@.5,OK8:X:AC#1"a[&)AGCZ9:F^jSiX##
%ce]5&kq:Fe[kVTW#5dksQ.nU>cHZg`lS\OuYI2*3>'\08Hu)i0%R:[V+1@Dl"G@-sa_epN@@eOpG9d:Q@[U1I'0*GE&jrIGK0*::
%PX-o-MQ49k+@i8V]nFB"_6PmP,u)?1`F][SW3KL7>NqH0(ukK\\JCJ%&p8aK#%1ri72A$R&t;a9$B"o4bO>#6l#7N?8Yg%N\8`4Z
%HY,W.2K:\O*+X13b1S%@)/D3+a7<g,*r;VBP\>APO8J>B]Wf1XX+1(o$]OR.k"H+Q=Y-nK/1G1/MHFF`&Xan8Nm>$8;>!mi9?P(m
%755\G/CZVhM4#IOTp"8o8N1<(>:%Htb>JRJ\alR5'%\I$MB-dZUmVgXXkT,"KTB!amC\<J.L:cPe>X3VZsW4A".YffO,.=RKMuZ4
%hH7/\fPWVU(1Cc#f9B$#n2=u*QC,m^:iNiE$`d'__h],FE(h`ON(K\GMBlW]-f?s8>+*R4ZQ*%gi$'-YXaZ3n!,rK\IDSejP?XjX
%C`.@TV6V%#@7,AoZ[p,-VJhd=$]Fj[J:sP=;$4#FID>DKX*HZc0umNp;T&fb/=:QJ(d\=aZXmR#ooU@T/9=sH\=a-?hUSeN*$8Gi
%nRFV5U"=QTCZLiOI]S,i4^N326R@<uW?JDi>h]_F$K'-hE:=LF'F:F@f@Fhnpso"!5a7QTABLDi@U^Q0/,`F4%E[k#"]l$gqmFu5
%5XSPH&C+SrMFrWTB^]MM,5G5UN'h`/',b=%YE24`kmP%kr=Z\=9a7HoQRJSUcV2m1<[+&mdHlX#?7`]&<X#*lg__XL.X<F[<3p<)
%$ju6P=Q4V;n(5PM/%[r=;"QVHG,5O$'j2*Spq`d!,,H\'bO_(?)MTE(!K#V,,7KN^M%"]]RB1S<Qtdt?,d0q[7+"b)5SK"j/UGPs
%$V7UG"R9@1'fJ1S-L++bFH*)!%YJFf\6O]36SqFhk"/R"C8bj%D!SML+usW3%#*'u`mK0l*34KhlqV1RKb0EL'?Fkj+C6e/VNFUV
%6-9u1G'W6K\QRlnNZZ,mL^[<+Q=JjV1\AO&qZ>3\YHZ%)a%8o^\>*U_d?O$?.7H7d@]u3l,R&H'dqcpH2Ild("[VU"'m,aFgaE_k
%*]uq&'oI'K-E0Rq5P/S<Umu0*41Rg4>-UZX>DU_[oKdO6KD#F2A#r=7&QZgpm8+@g%/R`nA1MXs\&&s!ZjQ4H)A3Lu=Es4!B+XHC
%M9n/H4ceTGJmXr$TI>OpiED2r?8(%?$d)^+8YP7)Nua*2^umK61BtfNX95X6:ic#JAKt*5aTd_N->ZIQ=4eM0g,(fQCm!':c(]Gk
%=ar`Qn]R8A0l)VRM[5!K7iXmd-Rn)6/Gl(Go>W+U1?&SHZ4_eA-<+5mXNU%ZE*0JiJOE-4>d7D%P2a-),`k\(q^JTn"G*@RDDX.9
%`>h<HEF`J+%kaegkc3q:#;rML,G8O@O(IPq--j81\52I8M;6PS>4O..1f4:i^nChYJ;-cs'T=^q-JHt:7+"R02F.@S>r#<SeI>@b
%4(+J(j;!G=YGlt4lo4P-_@$/Af&n\n@/sh0+(@DB35QkC+ljoE,l'\pFn/.4:te,h/daif_u:h&K`D6Kbs\6J[g#]LnDh`@fC"Aj
%*/T7K8*16B0Gk.DX0H;o_a^s-lCHl6Q_HU/abq2L/WlL`1K&0/`30(bEmcROP(f6_A>2,PJ3g!2)UP4T]X'_7g<0rR`-'#gb?k-G
%AZ19dl!%fQhjW$$d::!@Tq`pqRo-poc3p]='jcQsGCH5@4$&HAKRc:S<7[=-.4PD?6BlRUA9N<n.%>\HdA/d5c+WZmYme7Qcp!&[
%BDY^"K4HE^kYP*a@T5O$j+.eO-\euCF(q39*f7Dk<^S8@<O'_F1Q<0Mk;0]d5-Q+\6@^inH$1'J\QXGQTS#(k&J7DT*XX28J-#5`
%kS>7VaP%3#(R`!g#iY\JRK8<`p0a"TAF\rlBOb,X"jo,eUs>p:2Y/6>V"UuDH7ETMU1%IFR"4Q3kF9/=]"DulD=Y`i11f@>Y&eZM
%A84)(%N_3"%3&OCERG4#RM!RYdP#)90T4B",UG`VcDf(Nr'=GR#n*5q!N4Rj]No("ebI"1qP/f58_C's!101[ZrS^QFJ0Gj(R#]r
%6#YS/j'7!T#r^]s=XNsVVKaO<d6PjN+8M`f3-tqJ@WFEYJgapooan,lFHWR=5_PGO1Bju4#C=%PWRarCVWNT[2H\)#=cus;8d!^Z
%l^(qA>FSKtf3Jq4Z;2"]q%",1'-3\-DKe!.Z^BuJ>t*JRlV0X>)$Sq/(Ai^)l4)E"`ICsOd=>asqq\3uT`6(mSh1t9'T-TI5fd7D
%^_"^uU5:R[oS_K!I?q"dWfR2tK#jnp&Q?-C.s_krh;/!q6^]iB'BRUga8dVf[5Ur*<c--f8e-XYC4:"*dA1;JmGtHCf/7_WMD+=m
%T,!OD4r'jLn<8+a1(;3TAb&B?"u6@'O050$6U:bV(LR8+UCj"(=@M'<5a0H;O<RKN<$!jSK[<^7/2i4=@Q40H&R,^"72Z,<jN"Fn
%'GcViUTnI/A75:.@[6hg4pCk0HR8`m>cK9%5+%Y@o5HbkNI>lkGlS``@d,uT%HrRHD[)kc:i/SF3<Caa/)r_pGE7/i"PuVE5<T'D
%"e@li:]%*p)5r$0!%^.9obXV0.Q2)c'SYk^(?2Du^Xai"45a_$ET7"4Dp`%eBJ[G`N#71`<Q&gKj5`J#L0$8n)as3t5]RjpEU<FT
%)\P!C`+YuuJ7l[7"k/BEMTF"BG#t]Ojk(dY/@LA.:?:bs<L$&u>t9*63n?r,A_et*'G.+@7=nW7aleYf0:J/_I>.n;(@j_)P3B&f
%oV(^q>>'*JF%8RZ86m6VjY9R1,Z/hrp_#[4%'jOid=q]/JaM.jYBZ2KAWT+th;j[f6+92o!<MT'3%st-BPo#Gq"P;e%^743@"1Qo
%=V0SV=OkP&%0W^Xnq"`OWLTcW>ol?8J2rH+Orh:S?8%VQ9I(6]M>s#f:kA6$emG?'=jF*D5Qu@j!1$cG$rF`;/PS,Ek^5d_To(ar
%+;r+*`l9D,a:&Wg`*f=Q7L6FP12uO8,#$!umqSq6NT4a`?>E4m.eX")]Gt^`Z"><Ois#mJgnpXK>"reU6-f@tF@.>%N)d"ebZJV&
%cZYl5(?jU2VR(<F.C&1'W+\&);^O"k+3dUh6b9iRCgKJM2E6iD<g=X),fit'"k/??:]Lp.na.HT0c&pdS.\]"3u^-uh=1YOejr[3
%G96%p(8?e/`0/*a#&5fKcU^nD8eN>J2unlN>GJgHHp)ZYq;f=/e#`QbRq`&i/s91;nIlrL5F8H-,SnMock>TE6;GP^3X?-!2b)-E
%dWO\e4B.tUb'"K#V;Ffa<Mt/0_lU!*s"J&hIbc6<r<-"6ocSnOTBV?Q%\;1(4_KnQO05SbSCrW+LgUN1;ItF\Z!hYRm;7!\s#ut-
%pAn(8PES..X`f_e;m)R?>"6Gq1<C-4(acn'`74hnTJGOS9,<]1DA:,K0Bm3XBjZL+Lc4r@O";7nb64-e:TZCg*3J@q9G_NaRM;YS
%d_WfJ1d`A`8udm0"ALr3,H0LmU,P[(Df*:jW:N"J"-#A.bg'L""-(#m#J6ireS`jmL/Ga;A1oqBB?-Sh4'<KQ$*l6F4qR[hCPg"g
%/K+cC[S@oQB%7fU,*,7aJ=/+%+/[I>Qlac'F$F&YP%uIf,;F*62!OrO3c*;B<M"8%mrBYK953%^Ejc1.*LRlrO=]C5j43TZ02_@'
%P'R4SiTN<Y1cd]hQ2sPuQGCO-'JPBn5\0XToqdZ^+L%<'5d/^LmoN@2i-J&KE_*N[3un(Dm*LY>aCXh?>Cd&M)I'<lD:DFYipEXr
%>28_k"\p("5/q#$FQq@Wl"2GnG_LTV)0K;;jRZ#A^gN>6%WSE\[rO'HXX8utIP;.-]ZEkj7(6@9Mjhnt\.^:(H1.1s>(38pMK]eA
%QA4Sse6*_no%H$&6S%#aNZDA-%?nF\'+4t_r+ZTa_V-rYZ\EAG6q@MW1&e>=pHdRh<NJNP(/*Jo0t$nRXc9PGlBl)RL6CVD60c2,
%2FI,X3Obt0MV`UV:1_h4W>g#9B;;N>62p@YF]s4*8FJ2Ldp;89B//R6<<7L1FM:ZIbD]]6;maC8VeTX!:2A;.&<Qo]5rIah[6dL@
%PbK?)K=RAEfY>#mILB<V/!j-L[4c:SCYRrOF^!hWfNYc[_J!\_`M-A"`\=:PDF@FGDK^AHJi5.(:]&rn2')NVMcP`nWh.>Xmu8R'
%BJHde0hV7mN@)_t[dI8Ec"ZOWkYTl_b5V'+^9?S8q?KMFW?pI^m:0qs)aIMhZOT]mo<NG94;$ciX7p$/L76_?9cNBooPGH5(0&/K
%>Vd<_f5.7D[d+PG(AIWW3asmc:dse5`$,L"1Fj<+0oUF("H-8g+PS`*#%b#t[uNAZlQfj5ILSHP`SRK<q+I)5+dAUqaM*$/VY.9?
%bV1_KjG=#JMPQh^"&4udne'd_Pn"\2HF#MA&KQ-^QoDWmLXD*H0kQPW)&$DRmol1D[F+;f.%Rqc?>HuAOt??>e40aZ[78X>ak>?n
%R$I`TbtTTRa@Fl%h"dUKVmd+-67.5.KWseb+B>_mXe5>u!142!)#Gu)[EY`l\l@H[SZ!0hjL==8#>dJG_WLMW'-+lFg9Lgj63.']
%d7_/o[EVDVnuKU)MPMEP.B?f739f]2kL\PVHt?@u8&?rCaBDa4[Sgm$94nAtMk=Vs0n%>r<-)-*VqNR<5ajO30-WLe)]Rhm.gT7-
%[k+KP6mh\eo)L^X>tK5I`NA(k>GBD0I'nUqK0p8R,(h''\1nDH5l;!2)ps`[l-;.^8WCAl'M^8mjnJcf5Ask4QBJY$&PX*HJ>$qL
%nbir)aEl%*m_0qEp5_+0W^)=A`f;$pI4O@.amV+;F2a+'Y28:_jn&5@ck<@Bi,2pg$,nUOp>(&Kd-k,0'8(EnbRWXK)J:rqi7Otc
%ge"K1K@Bh?G3mKW>HM\2;IL6MAcUbWd&$eOEAXm5b<:39(gnkF!],(:`/<#%1>qS;cj@Tb_:s\%;7[>%-=76(%Ps@5$SgFZNW>?N
%"f&#F&MKUpJI1`lB2XZB*`Kg',Sb&lPY0U<Xu`J401O)8]9EIb"mmMhg9ai7%/V.cQB!ET!c4b/BLgDM4E$)R]lS4X0nG`($B33Q
%U?TP3B4D'n@fcfsQ?ZC72QV4,f(`7B?3e27Gu*e$XS,J+(IaK_#Md0,6@lZLnfGW]\9X`-Jeq[e;cWJ0YL+t3M-a."YpSr)>k?`B
%dr'Rs5pM\[Qo-qfJnh6eKJOJZAXkjG$W/MG[PQHf\.O+:@fE@*V_q9rXqX7_[%CH9?/;'W&aWr.9soTRG`gGr;,j8ZT5:j3YFWhC
%ETAo/:%2,`o4RMXblF4o3Me"ZN#g'@+iKNa,]Z[G@$=AEJq(e7(la72;EAD)AHZSS;^9S^./tt85Ck.pn[W]IUSJgM<k<qB.0M!"
%WFnL6`\+JUYDsaFHe5F-Ltd_UB3LV>;;-hcK;K"#:+Fi"X%REb5llla,"^\R97qO**c46/E77ZTfHnheY!/Z_<i\[."-du<0>gAt
%^Ig_";?CPun$^#eLE#9CQT-Me.gWSem5,J;=DYb&:j/0JA%IDK&uo2n+c=bNqXgT'5qKd;qs*ZEE+($TrFB#&^9IKnBo)GV<@QV&
%mR&)WE&VPhMkd8o=\fB[U%-X>#[,a.+[YG/6f?qY*?YWK^[':AJ4+LbXDukn0rqW=A@*WIqZ%AM5b&GrB)t[AQ88BpArE<PV@Wb/
%q$L!aR&abR]cZ8^/c,$]%L`o3Y\*ZC1$Cie#6$)9o0DuLH[IMoIo(Z_LHeqR,F4:DduuGp#sOYnPei=-j!>-g@A<d;ZbT"0$V/Q'
%9FJqKS9B^de7n@EBGLt*ie/qc]GFu3"0b5P(%YaAg4\E2(f%`BjVb;G.VtKo]]2,kNafUJJm`4iQD#Y5hIcAti`/<6Mf;j)%n)8m
%lsWa]&;)`WUGF!9,6S9<T9/DLo5ODkXDX-jG&Se40hF::3oa%$[LfFrCQK!@j0YloF+A"b7Ya:\.;l=78%mto.QITDD;2**"gh]q
%<GaD_?]f"1Q28T4Kd_Y-k93QtG\4"7c6YA*.*IlU#l2&^T&![j,):Vu!F%5Kft9aLmB04c!.URCo)t"@hT+(%W%R+Z'??MW\5%&f
%L8V@p_8ueOV70U>.eg2(]jZ69[N(aW_M^It_6FV&Kqo$D[QG)YO1HqX[RH+/5Fq[&N^@XWRa&Pm+88;!.jLn61kQ6ZO6EeM$_lmN
%!s!Pl"E8A*_BS;)08HT3ZM=o]Xu4tN:31+#B]_g1EMbJKN=h\ZhT,5YgA2A&Zg=<866bR%PkbY?ZHQhs,],>=]d#ta##_OsKfq`M
%W!AOYFhMD2D+GEVmJpE.I:QE[/5!%0O"kh,foi;CAAPrWo0L2sRWT@76@qlK7nNt(m\#]aKV?HQ7DpJ#0imdW/_b<khMr#\#hEK9
%&lON`fat<dZRVa-!OJ:^/Z&JFSh4]s0UV.u#($plfE^erWEtWYg3EnKVCk(g``\Q6Oh$c/j3_r4naJA'AU/f'K#Tl-8eRl/0L_m"
%UU8!CJ]\,r#?hK8D5n3>7&poB5*"j,?+"o.E#Vm]>C>C`_Xa^`"<Ous]'p!jggQN.?q./4'MHeS1K;^7W@%B=a[q0JKjf4PT=2p^
%`C)pTGTW_p7FNK[$BEl=Ru<Go);n8jC?U8S9%JGGTnSFc7jYHb@mZ>XIPTCp)DWXO`MY_"<nOWo$"Mje4Z()]57Ph[gMu+QLk?qh
%N'oX+Fg$f`A]/%<)_Z0$Fe71_K<9+<'r/rVB,iLs"$t.[>)kkk&g!$bm^iXU-H\SB(bjJs!_,^t]52Z3pVJ9qcQa@ufLZjj;&9Z;
%HhbTgRM;5B"cH%)fq]+)/d<+0KM(0!XkCo&kEb@0]m0@<+\1K:f/23!0DcuWrQ(Cb38f?-8'GOSAT;1\\HH"iFnc%+iPE[iNak,M
%9f0XL^"G'>N/>cg<moua$In+'T$:;37%Z+nTNF_*[&U5Y;3a]%"!u-US;2YAqQSpF,.Y<uf`>Q9BS[CkDIch@T<:=G`(/QPr2B%r
%(4noYe(@6G/hUcRr;/lTo8#&3B(:mdh@]?#Q!FpcWm+8qhl3/dYeqVrb7I?,hUP@5dTPP1=gMbg_LU,IO!"$@_cX<p-8C(q6]Ur2
%#paJr[2Xp5\R3W(*\R""*SQiOHHppUf#cgCb1=.S*u3GkZ$R:e2/)=F=2#J-%)i9`\Qe86;F4p'FHZGZfQi[GM^=CY8X-*+(0-DQ
%22Hf(MiiVA^.t3'_Of7G.A3'IT#thG+\XsBOSDB]]qKbZQ6gu6LX]0Hcr2Th(Q*k8FfHq>;PB'WM$X10@61EM+!V0Te!$?gm!27N
%_*E+)7)6o*la"hC^rq+:'l^EZTF1+C&]b)tG+>OdjAN"e)160!U;S,\03@O[.uYqr^*#gbV$fBJ)AZb5h+_OS6rhqCU)&>d)l$ug
%$es=d4p8Oq)h$S3-Ms);c9:7mQ$5d9XO*JF*Z[VsSAVC2b=2r7rJn#>36n(2=s/.O3XA%05_J0_b31S*5+D+"/Vn8_/L5KZ[L0ZC
%?=EZBR?aT,+e377c[_s<*#thn$Z_TG6TQ+O"[Z#0Z(mGhELF+4*o0"o8gK3EMH2=>+DFKcT#=I/)rY\TI!?8C^<G4_@FG/A]a]<L
%/*2rPHmk*eqhHb$PjuVn(bdTWI"f8i>Vma@j074CHl#cJ@r-G/1C0Te''#6W%WWiAc?(EX^=1ObA@Y3+Tgh`oi#C(N5hUNB?'%2f
%eku$0:H.3CVTLeH))p\S$jr.cW6Rf+Ea-8V`Q0Sb(df;HFgEL7mq>)W;,lZfeA#We+K`*43g5hb_"R1?G(/_T:S6*c<W'uljr`B>
%9ZG#,7QV),ad`&UWEXJ3Z"su879+8]BSDlucmQ[H+;W7c'm2%CVqM`;q\$Dr&K.n'E3E]f<dB?!;oPaMN,NN=,`$ON_)Hr4!]c$]
%&d/b3j+*@#(5+`e7^*A*rc4)6;R<!pbp,Dfp_)h3ldjs0)0ROgU<-\83"dh<BH[/b>T^'*kP*]rA3LM@<rqc`+W^p3.,K0CWFM6i
%_hr=Lq[C7^?og'SW%l%,&BqDeNUPl;(*[?J0bIKC6pll4Ujo@#D/Fo\Tm;*^CVCrZ%P+82+#A=9d_h,T/pYeM%.%rg4\<p_acZ]:
%#Z4RD4`K\U7"nrO#jM\)f<S>V*muWK*N(_N4)F5flHKW,0f45&4N:^<A)Zu'k^*e_<GhH3F\BTsaAc0h:1drAAm\`bZK)<^&-dAI
%###(Hg'oY@,=NY1E=0shDm_5FasXNQN1tIq.]N0N=?_6U7YtqpK)c-87KaNEl@+A@2Qu&:@@D%:#P7t/H5i:^3Z,foL!f9DJ7ldP
%aB(Xs<O)I?6f=(^_\g2*.X#q@`-A$JY-H9?Qj&\;]iCM,SW^+-J@N4_'#XA'P2$%D#HY$NbWbou.9(j+8/=#N.2l+Z%+S.*3U,H)
%QEKI[:%WA^I`$/'0p`(F@/.1bB!bZ73itbdQe1L!m(q8"qC"n<ZQ20'G.A!l21<fqgg*I7^fr/Ir2Aj#7#3@-1FEu-_6c2:L?Cm9
%KJE;?Of+$[@N2s<\>pUT"kYR&F9u)68%]%/;jips5:QkCrMXd:)Mu'@3C%=l*TT1Sf][\)/fRFDda"EGPKgfb!`Mim9[Z4_E3.N9
%B_jK2"Mm/ugVgmLW$)h96)<TSU7'+of1mK\&_k4"BJiH/Efup)H6tG*&95!F@PH32O9k_U12`[<L%G^ALB5"[4IVY)"uId`'Wu#H
%(1>%+h8A6Q;-j:sW,3G<HPkfalCON%oa$,'#<DkuJHrUpYud\4UA$9o1fm$O9j78K$^'0F>D9FGi!ZLoW9+CsfCkO.LNDZ&7d8U^
%d=k+JcN(StIHaou#.#Au'#pJ6!OgBT2%1%@e\$RpI9L&sbOZSCV?GD@iho,fKFh25r2^C?_,AN;]*O8p`eK/##SL26BP<u)fM2*l
%PZ^uIBdt8!DS]a*d`MATiul.-LX#t+(?neS"R9;$7G:]s1eYi]+Pfg\9COWS^ET<p5]7nueo[b-3bqt4f]iu15rfa_Yo;Cr+OcuS
%Yo%958FE[WXd4gE%nti!X*#$>:q7oAkFcG3H,>\+>agMhJLFfaPm8\]oB+HdZuAg2M(qD]@U"44\&Ld4@\J*R9Nc)IAVb=tQDVKB
%R3,::$W26[1!$I$6^qaQ-.!k$Y6Q8R4Q;$j6$o]#9N>Oh(^qbn\@P)oY`"J1&PFmWACb:\Hte$a&B+]6TtEApKiPJM+irbH]QkV9
%SH[n;'W:^="6J5WD-/ikZbD0]0h+C[06/i60t![Df-LD@a#X\I*KqC_\H4W('BR)q#i[/9LQXV9H#3aPZJ,,sdVeD6p3@H(K@-r;
%ED7Lb?5AUYX?&3c>W[,_#$Xm0(e^.[f[YbBHTs>cncM]a>(8XlGV.2J'!\Z./psa/,u8\:=[2u8il*.c[n6MV8:J8W\e!?'B>D\.
%ANr)/?\e;"Ce>2T<mc@AA<CsSoS-&h4Wf=Q)[1WAOIEll=`oJ5JrGp*FYQ:X338193(TiT-idi:@!G!KUDMTZ!_ED7jYVrUGUB\@
%E]RZ@'G?67B(?'!Xmjt#iCOnS(jsU',\IjsXDD:-]:eMjqo\,YAOA:$;o/PAFf?%W^S/"g6'HlCQ[+%$qcHe9<?>@&o\bBtgD_?)
%FYKM&Zu]2+6=o&\A2QqZ2[4q^0sE-'J3aNW<&+Gb@+s9oHPjDa>Hu*[VaSpeYHSF\0FT]l'.4#;?(N3&2?V*U'[0m<GQWd)N.72I
%EKd%Dm.0G^;K-,/!bB^VAD3q]9;UI9C,ZCUdqA>H"[[.=Z2iM)2$@,1Y^4=18Q*Srb$Np5AJ.m8\mOB@!fbOEQ5n9sYXtf4VR'r7
%9I#HAOq,Q<=rusRX]3n)="`c_%?r?q[pX&Bk(b,uOs;R/.`XCJ?>H6qd$^@^.3%saJo`4UKWTGO@6hglRF)8=,oMRInouse07i"j
%$6YGK-(Du[[s0t<T`K7JM*B%s)8)!.Qbr`VFZ64HCiiQ%33$*nEho"@c6Fr9_buT:1p,i-k"W_8F,Fk"ohLFKLbTT,]I/@)(jEco
%RB;Hjg>m>t)gpALJE!aXD<B5u!>ZWQ7_!eE404M7%3?Aq[?s*e4-V&Y;Et?eP?<oXqq6e!m&Lf;$'DWP<BlEH`(/?LCQ\jtC*5%?
%mDELMq^b5^!*0=A[+5CFVm0nMk?ehTR6@#46*:7m6l,o7H-J:Sep2Z;?pd'F@(oBZG/$>j!_"Z]:uj$rr]q-p>Z*dX#o6K!((^j-
%a9h'l8eQiu.%]R_dkoFB19-5F'7@m<;>*Z"-C:/jKjWP/=d5fbWN:$$P*pkc%5&\=kC[FVa42!h;kUaVO9.g\Zl6=4,:.?PV*O-q
%_s4QH@jrWgel)PhQ(n<ccOeJpM=+;a8,iWk<eIptbFoLk\X\O,l^f@dgPO]_aV7s"(%"I_[Ms?irZQJ8NbPH\CsaG?D<6jk&G2Su
%S!a?3!8'ate!,`@#F(3p&?Gpf\R,I>P2S":Y+g&1&aM.oM@P8k<70jMp9D(%h=:OO9_T(K!kfj@YG[ejP_uhr-7*:!C$TsEoRn>S
%##n!6/\7trk);/6JW8X@%GF)bc;JM4eY.3X]\^:p=_&G4P0:.pHh=VDn!F(Gg[Rr/jla[2&=G:,%%Kpj$4gk@$5cCS-Q]jWJgb&>
%9TB_1V@Al6"Ku>!['RRh;p<C_/7+%+HR13p1Xcl2b9K?;i3%be/iVa^/==G+CJs*DZ6eFZT,u9j-rgG&6cWmmm#_=/pL3_?\W5Lq
%,a]4cl6t6eM2]9,!\;+K*b'8Q!hdn</DARd/@,U*cpWH(Sq;iJ>"$GTGTFcIDIUOdp8El>OjFJ.*Vrr\Vn`m0&6<urU0;kF-UHj;
%!G*G4\7@,UShk2ql4cT%))&)'9MkU^>[+gTgQuEaWA:?uBp0mSq>2%fpY;&2""c7\A$0Nm!8EZ[GI:k7(!=da"tHp@%*+A_%$6&K
%RiQH0YO]V!BWf=I$>FX*CSm)d21upNRK^^Rjc?\[LWg4m;kh>59Tei]`374XaG^h!;[?.Y%nrFE_e'qSoe>#_S?%k<_M26-?cEMu
%n_-al.7r,'dJ1V`li$O+\o,1D_]Q)V'"QWHPmi&19U>:qNMR2ORS0&KB/q1P6>(WFAGBfHb[5LcE[GWq;bV(\-&r^RU/2od>(b53
%[FqWVNSG'\d0uboLQqHlN64#q\M^R"R;J:_'ltTCm>U6$.6')$V\\I2aO.LdcpW78W*upT734Fl-3;\iofpTg+uRTu/V"Ye=Vk8Z
%Bm*;dTF`2RT2f-(2/3*u&C=Ul,C']@GX/U?e$oj$;@`tdX"Cuge<'5.eP$YWl-0Y;@pO(,T.F#ECnG6Xe:C"$Tr:6p@CXW)RRddX
%>%Er+0e@@L+&9,Q6BnCA$%kU8P$4M-0[&$i\D-Kc60MB6[:_j-V-,a2h)#lSCR)b#IE'41VE5`K\92E8ORl8^YtD<52L8?c&$j7b
%Q4$gPWYl]')/O&sH^Ju!MuhTAf.e*a>--n`ID6#Y=5.*1BDc@;%Yd"aX\f+dr5#2/JT*&R9W9I3@Y77FLc-)=8I5_p>Otb2FV:`=
%[JAVk18(XLNV9,LN#_tVh]5tg$mr<*DkE.`H.P'.&])D%Aon/iW%]q>nC#PABi/RH&8)"3e">.;$nSoUmWhJ2;u_\.MhL)bBTG^&
%kYf?\"kj(fCNi'Y[muZC<S6!aY\0&rLllbT2CYXr!FGLZ-LE-E65:gA+jr[S>.74@Yri%VA]d-OL4iDCOL0.T?%g7to&2KS`kq60
%Z"eAS/bj?8b%]_Vp<Bmf??LWiB+J\\@g#*%flDg@51F\;;A?G:0I$-.]61S-@tV<:^m=]\66,h9AM:H"7hpnN2[Z=Bb+A8U+9iI8
%W6SgOXoU98K`pLbL6llQ?2fZ(?aN(F-_5N0JBu'4#ie1Egc_=Rd?95%oK4T:751A_aWG?"'e9f,VFeTf^oT[ZKM(=f-)NMd=h7a!
%hhkTZI-iTh34)"DH__LSO;'/SU<]>5f5\Q#d.7Y-.u*MKs#!FV".bYH.>_&FnKaDol#iU3aaun9HArsRXdVj&>?*(opiXm*Pls:+
%$(lTpQKTJsBWl.s\+&4>jTn$[*Yug`'!ob0To%,u_gTq2pOO#g:\Q\MR$\%fZP[YRL$?_+P)rk%%NWTj&g+B(`3O%!Kqtjr$>E7V
%Q2m2-e)$q:nR]KtUhCj4^a>r2o[p(K24NaLPXss`F#"$;7N.fGJr1M!0/1t"@gI98%9VuZ;T,Slo*uPX##eTH=a"pdHa.4]kVOm8
%BQ\[K1n`B1nh82IH$0$2!3.EZBS7(T*E\8l>;PRp:#Jp,P^S(<5SG>fZCR12K\]&$=R?OT6X<G^T&'*dn_4f=E?aeeG'c\uWlQqa
%l>OWVL&"<6qO3c_:h&I59$#_P/bQo.pK2iE30;gu7_(^j4lLs\dM_o1NRT*3@4Q@://;0i*jr,hpN\LS+YtBt*Cb-m<XYkW.$QUu
%!@9-jm8m#Op=B)srX?>6)'`>2)O7>h&\!($W`s/&,QN7$nF/-<i8*E%r$D9SBNXaYL=MGe99PH;^omr(VuO-A<Muo;^7W5\]=dlI
%ogKO*6[j;._;l)H8>`1;D$GK9;["]/4WWuTjo)&*8i"Pp8g8s5M>$1^\cn:QT*.mHBT4ANV]*eD(6o5KOH!)$T7)klhrdO/*#j@Y
%YZ+\&EZ&_"Fi2#)St-_9HGVGR*9/`4#S(K5^uSE-F>CEC>bB!V<eAkV?tGYh-,MelV+7"oImb&P_-D=]T$Q\Vk<kYGCfW=Ha-84h
%/a.nmYNg%#dBGofq\"]H8)&-.=?1.-cIodQqTY/lI*1gK"q_Af0#fS(UVCM14kM%r8DM2<hccn=okIFP"LMXcPo74+1:iZlTS`f%
%iuX`PUTbON6=2$@D&:M7b;+9/0L/hdcA(A7m1'G:6MO]K4f5*6(N#4=Y`FfJUj\oVf'S5!98UEhZ\Mi+ikBTI1pgXZDmlkPOHeg4
%<@J/@IHP#UaWn8f/h6.S_t!Rd)r`QX<">Oh\co?P+m=C(;#E0CA`A8[0H#USUi'2paZ))Aq:ah5"H&uV[Rs.-q+;EnY-[gUp>pIX
%@HL1hT=Wj'T(SQVo";R4K)fp_W@$PpGA-fgUtm%$okbk_RgRaqP/M+qaBiH"-'Z>JX+E!H:t]e:>62G1@SbSKK[IMA^cbZo8_o!d
%@0?Va3b)>%+2NV_7T3n78B+sG@N\l)N@eqp0YV,8Iu"L6T8Sk\&/@QVV!8[cO<Ol5gT[]J'd=ja'=OVD3rI-HLr<hl*UZDl(4f2J
%X^FKB)!LPEbhHKJZ"9turNE*]&kd?L$db['c*\/,\MeVn-l@DnE*u",XGfk5coMW43Pa[k+)QC/[k@9`@5SHlRn\.T;+0Kp`!8[9
%BeEHEdBggCYc<C\K1V$_/A@i.Ul9U>C^n6XB(j)KB."*nD6j.=Xs(Xcd<`4B=_"?FN,l!XO1R_\e'UnDM_KWl4*m=^cH4Ydlt">k
%)4=tRCs!EX&)ca%Y$>/4CILf^'0&lJ,'/R0LL!%CTtuS\;9$@M\We(ZL'lGq&PSL\)p;\-7TCD>1D'h6g-^7)Eta;Q!#a4hrR6V[
%#G#kU:A[^o3W*X`)U=R*-Uh^o"<CVAL1^q(P)l/]h=Amme#*S?T"4Zp!\3fMipkoUPsTrR967V:#lLXN3bU0f4es2<kU@JF<!GW!
%>Y&G[=[kG'`AqoDGp0/3X6'taW!^-=;&V9YXesr0.1jd4^PgLPk[K:F2%52;MW#Vk1,a.;T->Kj08R]?4taFQhS=Ih"IGKD@4dOb
%+Lk>B\0.6r#gk's?J<cTY0M)Y'N6[^l4VnUB2P4K>-gAjPifC:A_YbKG_Iui2:^S_@0RDHHb?RaX(8_8e['%9.=s5:K`'r5&]1Bs
%&3$Z!"l`Xh0:*;HUIZ:/%S>%Q#[+2DY%Z9\*KUJOP)ok\U&hm0UU[=<(IX6G,q2Gu"9R&</aAK*>R.jN71Y5/=q"sY'a,ik[abU*
%8/Iig%j^Qm,-mKgW3c<)EL]E=I0aH!rS]T0f\#pKZ:f@'rTJkdXg*hS9:N%&pleP.'"QcM$p$gko-hli.[_dS$jKfopXAa3qO1d<
%O8-oM(J'>s?NYMm/l3Kr,*NFe/ohMB_P+k/7G>H!i#PK_I?QK5-4qEdh*`fUir)<$bW+uUda1Et$m1dSB"!*HRR-]U9,67N,_mNp
%B<`YBc8M!USH0(:p3)*IVFcBBXF47Z4*sL/OPW/1QWHLNd::e[a"5@FrT]s4fSk*iULB5W?rRo4U_6[V:4gM<lL%fPEW"=&Cu^W>
%kl[HhA[A5#p6]26k(SN^"l3@s_SR5J*uDV2i)s4KV`^>nFt%bH$EAW=-T27([5k<`2Pmk:VWO2G:c:(1N3HRR?4kL%5n['.--gOU
%n&1!A_^s)a1g<a<_5e_f]!j@$k@O64Jq>kdQ96anY0RjoA#_KgIT`Q\Ftc>oFn\0UN&\oY9'HmA?P7i4aY!?GHLT9$3:6d,A3#.(
%)N"8CcCB=HMXD3I@R/>W)`Gfi.B.G"TCF]%pXAa+!c).nLA2)`%&_#T)OJMW/MP2Z"?&1f4fff#q@N@lU>eG7ed\IA8c<ROD"%cX
%8gYa+#qr,eU_69=`aGAl,5O\]Td?7EF]j]%.2amo_>q-W%Kj5=JT`9\WDaC1XdTJ]`%P^'OGl5VWaYqdE[7\2DN,B:+DP^n][RmJ
%9t'Ih;$`nr#7^>;8M]Z9]$SQlbi"*o)Q"hg"qFSdS>B3o//h<\k]jUC8,[%G?<CT2k7XAsH[/'Mrr/c^?<L%qs/>>]IbKO-nG=L1
%LV=m*P8O*idPluL5`-Cg8DB^_YI3(tBnFb5ikJjgI(%?qMb)4OWiu-Pq4-*BIK&Xc7Y8rC_u+^eJs8C%rrj9+@Bo5&`Jn;6KLajq
%aFcW9n.NZK6*ZD1(+!EpNE0eVWZoXqMMkV+AIm7+)E::[=i^5<&;$lieuW*j6WCr@;ZTAj3iNVBU7has>%8[.o-r.IXUOB+1_"48
%$mJnh]8f]C]5g2PSQ0*'Yj9'CCIEif^dh8IkBCsoM0`/n`]+6K;*N+jC[iP1o.*Zk/(rd8NMK'T.-g`V[](=[>q&6hs0I!PQi/$#
%0-J`qKSO%fL:ZA=dr%Qr\6@ar[;=Yk)!.11:@G!W%TKqObOTX7T6jN/"B/M^8XoE^3'4gV]0Xj1]'N$dI<u[O<n,rM(\gpfo#C"C
%^#RF60:HKKl)InaI4i!LWcs*c2X)\VUYDuuqj6Y7/Qm;'rC*Qr"/X;n$`8l5:lp-<g0aDCQE.F]Wrs%U*jYN1\a7o$8jA&G<b_3+
%Ps=pA5Bt(a74U:N"+Rr3_C*>4)Sk0Z5\3*4@s8HiDeBAs5pMFT*&*$W!XpIBPf5Tc+<$4=&[7l:`d^Aa2?'5%%Z7`cnKK0ZWDWt!
%,AF<8H32WiX/LFalD[#YVSc%U8BdJ%&B`f8!3njb!3%.j0U;1Dd#5FA#*CLJ5$::<bV!-s2p^bC:>#5IcL]>$itI6)h'c'2lJu-D
%GT09f=8T_SM8g*=Va[#E%"u,4+9]##0HM6u61A2L.!PP10lgg![]N88N+RopY(AsJV_,u:R\A4lX2;AsFX[Cf?N3`nWLJ"W8Uk>T
%iq<&\C^JI^`O*e-0l>sFQnqp"[!F1gi-Q&ihM5j,<^UK:6Z%J>Jrl\YdmpSiN?P)4X'4#NDe:L/@j!3gT@@T]pI^Bm[\.Jj(,p's
%_D9h[EoZnC^FB?Mn2UL.:sEuJN?],nTW)HUYe5OO'c_67UJ[X%B>q\.E+&SV>(kl<4;GG>MT'P+P]0b6@S.N<Xg?GL)hs@6K8jA>
%)?t":/W(F'a`u?-%Alc/?-%/B7Nho&R.s6X#TrA`A!B=D#s$1\O;EO_P0iBt(rT]g;/MkhB%eqTCd*QgdMok*)^B`85&&#m\JoLG
%-djHK&'&XaOg5@A83MPr6S_7]#PTP[XZW8\`D($1l(gub"AfeZjVFU9!<-Wjp`t0,%_oJG%D=\./M;A-r&Xh*=YC0Q,28<F*]UkK
%.s^$0Z<re9I9:@*PFRK@#'tOid/Pt-[;t"ZXdj7[bqgJ=a](5`^ARihkefX&a/_f~>
%AI9_PrivateDataEnd
